#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОбновления

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра             = "РегистрСведений.УдалитьНастройкиТранспортаОбмена";
	
	ЗапросУзлыОбмена = Новый Запрос(ОбменДаннымиСервер.ТекстЗапросаПланыОбменаДляМонитора(, Ложь));
	ТаблицаУзлыОбменаБСП = ЗапросУзлыОбмена.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаУзлыОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ПОМЕСТИТЬ ВТУзлыОбмена
	|ИЗ
	|	&ТаблицаУзлыОбмена КАК ТаблицаУзлыОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиТранспорта.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	ВТУзлыОбмена КАК ВТУзлыОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНастройкиТранспортаОбмена КАК НастройкиТранспорта
	|		ПО (НастройкиТранспорта.УзелИнформационнойБазы = ВТУзлыОбмена.УзелИнформационнойБазы)");
	Запрос.УстановитьПараметр("ТаблицаУзлыОбмена", ТаблицаУзлыОбменаБСП);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Истина;
	
	МетаданныеРегистра    = Метаданные.РегистрыСведений.УдалитьНастройкиТранспортаОбмена;
	ПолноеИмяРегистра     = МетаданныеРегистра.ПолноеИмя();
	ПредставлениеРегистра = МетаданныеРегистра.Представление();
	ПредставлениеОтбора   = НСтр("ru = 'Узел = ""%1""'");
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь, ПолноеИмяРегистра, ДополнительныеПараметрыВыборкиДанныхДляОбработки);
	
	Обработано = 0;
	Проблемных = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			УзелИнформационнойБазы = Выборка.УзелИнформационнойБазы;
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
			ЭлементБлокировки.УстановитьЗначение("УзелИнформационнойБазы", УзелИнформационнойБазы);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиТранспортаОбменаДанными");
			ЭлементБлокировки.УстановитьЗначение("Корреспондент", УзелИнформационнойБазы);
			
			Блокировка.Заблокировать();
			
			НаборЗаписейСтарый = СоздатьНаборЗаписей();
			НаборЗаписейСтарый.Отбор.УзелИнформационнойБазы.Установить(УзелИнформационнойБазы);
			
			ПредставлениеОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОтбора,
				УзелИнформационнойБазы);
			
			НаборЗаписейСтарый.Прочитать();
			
			Если НаборЗаписейСтарый.Количество() = 0 Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСтарый);
			Иначе
				НаборЗаписейНовый = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
				НаборЗаписейНовый.Отбор.Корреспондент.Установить(УзелИнформационнойБазы);
				
				ЗаписьНовый = НаборЗаписейНовый.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНовый, НаборЗаписейСтарый[0]);
				ЗаписьНовый.Корреспондент = УзелИнформационнойБазы;
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНовый);
				
				НаборЗаписейСтарый.Очистить();
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейСтарый);
				
				Обработано = Обработано + 1;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Проблемных = Проблемных + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать набор записей регистра ""%1"" с отбором %2 по причине:
				|%3'"), ПредставлениеРегистра, ПредставлениеОтбора, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, , ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра) Тогда
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	Если Обработано = 0 И Проблемных <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедуре РегистрыСведений.УдалитьНастройкиТранспортаОбмена.ОбработатьДанныеДляПереходаНаНовуюВерсию не удалось обработать некоторые записи узлов обмена (пропущены): %1'"), 
			Проблемных);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			, ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Процедура РегистрыСведений.УдалитьНастройкиТранспортаОбмена.ОбработатьДанныеДляПереходаНаНовуюВерсию обработала очередную порцию записей: %1'"),
			Обработано));
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Процедура ПеренестиНастройкиТранспортаОбменаДаннымиКорреспондента(УзлыОбменаДанными) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиТранспорта.УзелИнформационнойБазы КАК Корреспондент,
	|	НастройкиТранспорта.COMАутентификацияОперационнойСистемы КАК COMАутентификацияОперационнойСистемы,
	|	НастройкиТранспорта.COMВариантРаботыИнформационнойБазы КАК COMВариантРаботыИнформационнойБазы,
	|	НастройкиТранспорта.COMИмяИнформационнойБазыНаСервере1СПредприятия КАК COMИмяИнформационнойБазыНаСервере1СПредприятия,
	|	НастройкиТранспорта.COMИмяПользователя КАК COMИмяПользователя,
	|	НастройкиТранспорта.COMИмяСервера1СПредприятия КАК COMИмяСервера1СПредприятия,
	|	НастройкиТранспорта.COMКаталогИнформационнойБазы КАК COMКаталогИнформационнойБазы,
	|	НастройкиТранспорта.EMAILМаксимальныйДопустимыйРазмерСообщения КАК EMAILМаксимальныйДопустимыйРазмерСообщения,
	|	НастройкиТранспорта.EMAILСжиматьФайлИсходящегоСообщения КАК EMAILСжиматьФайлИсходящегоСообщения,
	|	НастройкиТранспорта.EMAILУчетнаяЗапись КАК EMAILУчетнаяЗапись,
	|	НастройкиТранспорта.EMAILТранслитерироватьИменаФайловСообщенийОбмена КАК EMAILТранслитерироватьИменаФайловСообщенийОбмена,
	|	НастройкиТранспорта.FILEКаталогОбменаИнформацией КАК FILEКаталогОбменаИнформацией,
	|	НастройкиТранспорта.FILEСжиматьФайлИсходящегоСообщения КАК FILEСжиматьФайлИсходящегоСообщения,
	|	НастройкиТранспорта.FILEТранслитерироватьИменаФайловСообщенийОбмена КАК FILEТранслитерироватьИменаФайловСообщенийОбмена,
	|	НастройкиТранспорта.FTPСжиматьФайлИсходящегоСообщения КАК FTPСжиматьФайлИсходящегоСообщения,
	|	НастройкиТранспорта.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения КАК FTPСоединениеМаксимальныйДопустимыйРазмерСообщения,
	|	НастройкиТранспорта.FTPСоединениеПассивноеСоединение КАК FTPСоединениеПассивноеСоединение,
	|	НастройкиТранспорта.FTPСоединениеПользователь КАК FTPСоединениеПользователь,
	|	НастройкиТранспорта.FTPСоединениеПорт КАК FTPСоединениеПорт,
	|	НастройкиТранспорта.FTPСоединениеПуть КАК FTPСоединениеПуть,
	|	НастройкиТранспорта.FTPТранслитерироватьИменаФайловСообщенийОбмена КАК FTPТранслитерироватьИменаФайловСообщенийОбмена,
	|	НастройкиТранспорта.WSURLВебСервиса КАК WSURLВебСервиса,
	|	НастройкиТранспорта.WSЗапомнитьПароль КАК WSЗапомнитьПароль,
	|	НастройкиТранспорта.WSИмяПользователя КАК WSИмяПользователя,
	|	НастройкиТранспорта.WSИспользоватьПередачуБольшогоОбъемаДанных КАК WSИспользоватьПередачуБольшогоОбъемаДанных,
	|	НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию КАК ВидТранспортаСообщенийОбменаПоУмолчанию,
	|	НастройкиТранспорта.КоличествоЭлементовВТранзакцииВыгрузкиДанных КАК КоличествоЭлементовВТранзакцииВыгрузкиДанных,
	|	НастройкиТранспорта.КоличествоЭлементовВТранзакцииЗагрузкиДанных КАК КоличествоЭлементовВТранзакцииЗагрузкиДанных
	|ИЗ
	|	РегистрСведений.УдалитьНастройкиТранспортаОбмена КАК НастройкиТранспорта
	|ГДЕ
	|	НастройкиТранспорта.УзелИнформационнойБазы В(&УзлыОбменаДанными)");
	Запрос.УстановитьПараметр("УзлыОбменаДанными", УзлыОбменаДанными);
	
	ТаблицаНастройки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаНастройки Из ТаблицаНастройки Цикл
		НаборЗаписейНовый = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьНаборЗаписей();
		НаборЗаписейНовый.Отбор.Корреспондент.Установить(СтрокаНастройки.Корреспондент);
		
		ЗаписьНастройки = НаборЗаписейНовый.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНастройки, СтрокаНастройки);
		НаборЗаписейНовый.Записать(Истина);
		
		НаборЗаписейСтарый = СоздатьНаборЗаписей();
		НаборЗаписейСтарый.Отбор.УзелИнформационнойБазы.Установить(СтрокаНастройки.Корреспондент);
		НаборЗаписейСтарый.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
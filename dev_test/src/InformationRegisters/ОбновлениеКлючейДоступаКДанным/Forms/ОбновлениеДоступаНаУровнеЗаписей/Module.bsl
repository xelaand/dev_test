#Область ОписаниеПеременных

&НаКлиенте
Перем АдресРезультата, АдресХранимыхДанных, ИдентификаторЗаданияОбновленияПрогресса, ТекстОшибкиЗавершенияРегламентногоЗадания;

&НаКлиенте
Перем ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/РегистрСведений.ОбновлениеКлючейДоступаКДанным.Форма.ОбновлениеДоступаНаУровнеЗаписей";
	
	ПериодОбновленияПрогресса = 3;
	АвтообновлениеПрогресса = Истина;
	ПоляСортировки.Добавить("Список", "Возр");
	
	Если Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.ГруппаПредупреждениеОграничениеОтключено.Видимость = Истина;
	КонецЕсли;
	
	Если Не УправлениеДоступомСлужебный.ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		Элементы.ГруппаПредупреждениеУниверсальноеОграничениеОтключено.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСостояниеЗаданияОбновленияДоступа();
	ОбновитьСостояниеЗаданияОбновленияДоступаЧерезТриСекунды();
	
	НачатьОбновлениеПрогресса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОбновленияПрогресса) Тогда
		ОтменитьОбновлениеПрогрессаНаСервере(ИдентификаторЗаданияОбновленияПрогресса);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОбновлениеКлючейДоступаКДанным"
	 Или ИмяСобытия = "Запись_ОбновлениеКлючейДоступаПользователей" Тогда
		
		НачатьОбновлениеПрогресса(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РассчитыватьПоКоличествуДанныхПриИзменении(Элемент)
	
	ЭтоПовторноеОбновлениеПрогресса = Ложь;
	НачатьОбновлениеПрогресса(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтообновлениеПрогрессаПриИзменении(Элемент)
	
	НачатьОбновлениеПрогресса();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапуститьРегламентноеЗаданиеСейчас(Команда)
	
	СостояниеЗаданияОбновленияДоступа = Неопределено;
	
	ТекстПредупреждения = ЗапуститьРегламентноеЗаданиеСейчасНаСервере(
		ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную, СостояниеЗаданияОбновленияДоступа);
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеЗаданияОбновленияДоступа(СостояниеЗаданияОбновленияДоступа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРегламентноеЗадание(Команда)
	
	ВключитьРегламентноеЗаданиеНаСервере();
	Элементы.РегламентноеЗаданиеОтключено.Видимость = Ложь;
	
	НачатьОбновлениеПрогресса(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИВыключитьОбновлениеДоступа(Команда)
	
	ОтменитьИВыключитьОбновлениеДоступаНаСервере();
	
	НачатьОбновлениеПрогресса(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогресс(Команда)
	
	НачатьОбновлениеПрогресса(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОбновлениеПрогресса(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОбновленияПрогресса) Тогда
		ОтменитьОбновлениеПрогрессаНаСервере(ИдентификаторЗаданияОбновленияПрогресса);
		Если АвтообновлениеПрогресса Тогда
			АвтообновлениеПрогресса = Ложь;
			Пояснение = НСтр("ru = 'Автообновление прогресса отключено'");
		Иначе
			Пояснение = "";
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обновление прогресса отменено'"),,
			Пояснение);
	КонецЕсли;
	
	Элементы.ОбновлениеПрогресса.ТекущаяСтраница = Элементы.ОбновлениеЗавершено;
	Элементы.ОтменитьОбновлениеПрогресса.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстОшибкиЗавершенияРегламентногоЗадания(Команда)
	
	ПоказатьПредупреждение(, ТекстОшибкиЗавершенияРегламентногоЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура РучноеУправление(Команда)
	
	ОткрытьФорму("РегистрСведений.ОбновлениеКлючейДоступаКДанным.Форма.ОбновлениеДоступаРучноеУправление");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоВозрастанию(Команда)
	
	СортироватьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоУбыванию(Команда)
	
	СортироватьСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбработанныеСписки(Команда)
	
	Элементы.ФормаПоказатьОбработанныеСписки.Пометка =
		Не Элементы.ФормаПоказатьОбработанныеСписки.Пометка;
	
	НачатьОбновлениеПрогресса(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСостояниеЗаданияОбновленияДоступаЧерезТриСекунды()
	
	ОтключитьОбработчикОжидания("ОбновитьСостояниеЗаданияОбновленияДоступаОбработчикОжидания");
	ПодключитьОбработчикОжидания("ОбновитьСостояниеЗаданияОбновленияДоступаОбработчикОжидания", 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗаданияОбновленияДоступаОбработчикОжидания()
	
	ОбновитьСостояниеЗаданияОбновленияДоступа();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗаданияОбновленияДоступа(Состояние = Неопределено)
	
	Если Состояние = Неопределено Тогда
		Состояние = СостояниеЗаданияОбновленияДоступа(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Состояние.ПоследнееЗавершениеРегламентногоЗадания) Тогда
		Элементы.ПоследнееЗавершениеРегламентногоЗадания.Формат =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДЛФ=DT; ДП='%1'",
				?(Состояние.РегламентноеЗаданиеВыполняется,
					НСтр("ru = 'Не завершалось'"), НСтр("ru = 'Не запускалось'")));
	КонецЕсли;
	
	ПоследнееЗавершениеРегламентногоЗадания      = Состояние.ПоследнееЗавершениеРегламентногоЗадания;
	ПоследнееЗавершениеРегламентногоЗаданияВремя = Состояние.ПоследнееЗавершениеРегламентногоЗадания;
	ТекстОшибкиЗавершенияРегламентногоЗадания    = Состояние.ТекстОшибкиЗавершенияРегламентногоЗадания;
	
	Элементы.ПоследнееЗавершениеРегламентногоЗадания.Видимость      = Не Состояние.ПоследнееЗавершениеСегодня;
	Элементы.ПоследнееЗавершениеРегламентногоЗаданияВремя.Видимость =    Состояние.ПоследнееЗавершениеСегодня;
	
	Элементы.РегламентноеЗаданиеЗавершилосьОшибкой.Видимость =
		ЗначениеЗаполнено(ТекстОшибкиЗавершенияРегламентногоЗадания);
	
	Элементы.РегламентноеЗаданиеВыполняется.Видимость   =    Состояние.РегламентноеЗаданиеВыполняется;
	Элементы.РегламентноеЗаданиеНеВыполняется.Видимость = Не Состояние.РегламентноеЗаданиеВыполняется;
	
	Элементы.КартинкаРегламентноеЗаданиеВыполняется.Видимость       =    Состояние.ФоновоеЗаданиеВыполняется;
	Элементы.КартинкаРегламентноеЗаданиеОжидаетВыполнения.Видимость = Не Состояние.ФоновоеЗаданиеВыполняется;
	
	Если Не Состояние.РегламентноеЗаданиеВыполняется Тогда
		Элементы.ВремяВыполненияРегламентногоЗадания.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ВсегоМинут = Цел(Состояние.ВыполняетсяСекунд / 60);
	Секунд = Состояние.ВыполняетсяСекунд - ВсегоМинут * 60;
	ВсегоЧасов = Цел(ВсегоМинут / 60);
	Минут = ВсегоМинут - ВсегоЧасов * 60;
	
	Если ВсегоЧасов > 0 Тогда
		Шаблон = НСтр("ru = 'Выполняется %3 ч %2 мин %1 сек'");
		
	ИначеЕсли Минут > 0 Тогда
		Шаблон = НСтр("ru = 'Выполняется %2 мин %1 сек'");
	Иначе
		Шаблон = НСтр("ru = 'Выполняется %1 сек'");
	КонецЕсли;
	
	Элементы.ВремяВыполненияРегламентногоЗадания.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
			Формат(Секунд, "ЧН=0; ЧГ="), Формат(Минут, "ЧГ="), Формат(ВсегоЧасов, "ЧГ="));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеЗаданияОбновленияДоступа(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную)
	
	ПоследнееОбновлениеДоступа = ПоследнееОбновлениеДоступа();
	
	ТекущаяДатаНаСервере = УправлениеДоступомСлужебный.ТекущаяДатаНаСервере();
	
	Состояние = Новый Структура;
	
	Состояние.Вставить("ПоследнееЗавершениеРегламентногоЗадания",
		ПоследнееОбновлениеДоступа.ДатаЗавершенияНаСервере);
	
	Состояние.Вставить("ПоследнееЗавершениеСегодня",
		ЭтоСегодняшняяДата(ТекущаяДатаНаСервере, Состояние.ПоследнееЗавершениеРегламентногоЗадания));
	
	Состояние.Вставить("ТекстОшибкиЗавершенияРегламентногоЗадания",
		ПоследнееОбновлениеДоступа.ТекстОшибкиЗавершения);
	
	Если ЗначениеЗаполнено(ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания) Тогда
		ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
			ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания);
	Иначе
		ПоследнееФоновоеЗадание = Неопределено;
	КонецЕсли;
	
	Состояние.Вставить("ВыполняетсяСекунд", 0);
	
	Если ПоследнееФоновоеЗадание = Неопределено
	 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Если ТипЗнч(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную) = Тип("УникальныйИдентификатор") Тогда
			ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
				ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
			
			Если ПоследнееФоновоеЗадание = Неопределено
			 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
				
				ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоследнееФоновоеЗадание = Неопределено
		 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			
			Состояние.Вставить("РегламентноеЗаданиеВыполняется", Ложь);
			Состояние.Вставить("ФоновоеЗаданиеВыполняется", Ложь);
		Иначе
			Состояние.Вставить("РегламентноеЗаданиеВыполняется", Истина);
			ОжидаетВыполненияСекунд = ТекущаяДатаНаСервере - ПоследнееФоновоеЗадание.Начало;
			ОжидаетВыполненияСекунд =  ?(ОжидаетВыполненияСекунд < 0, 0, ОжидаетВыполненияСекунд);
			Состояние.Вставить("ФоновоеЗаданиеВыполняется", ОжидаетВыполненияСекунд < 2);
		КонецЕсли;
	Иначе
		ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную = Неопределено;
		
		Состояние.Вставить("РегламентноеЗаданиеВыполняется", Истина);
		Состояние.Вставить("ФоновоеЗаданиеВыполняется", Истина);
		ВыполняетсяСекунд = ТекущаяДатаНаСервере - ПоследнееОбновлениеДоступа.ДатаЗапускаНаСервере;
		Состояние.Вставить("ВыполняетсяСекунд", ?(ВыполняетсяСекунд < 0, 0, ВыполняетсяСекунд));
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСегодняшняяДата(ТекущаяДата, Дата)
	
	Возврат ТекущаяДата < Дата + 12 * 60 * 6;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоследнееОбновлениеДоступа()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоследнееОбновлениеДоступа.Значение КАК Значение
	|ИЗ
	|	Константа.ПоследнееОбновлениеДоступа КАК ПоследнееОбновлениеДоступа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СведенияОбОбновлении = ?(Выборка.Следующий(), Выборка.Значение, Неопределено);
	
	Возврат УправлениеДоступомСлужебный.ПоследнееОбновлениеДоступа(СведенияОбОбновлении);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗапуститьРегламентноеЗаданиеСейчасНаСервере(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную, СостояниеЗаданияОбновленияДоступа)
	
	ПоследнееОбновлениеДоступа = ПоследнееОбновлениеДоступа();
	
	Если ЗначениеЗаполнено(ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания) Тогда
		ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
			ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания);
	Иначе
		ПоследнееФоновоеЗадание = Неопределено;
	КонецЕсли;
	
	Если ПоследнееФоновоеЗадание = Неопределено
	 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		Если ТипЗнч(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную) = Тип("УникальныйИдентификатор") Тогда
			ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
				ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
		КонецЕсли;
	КонецЕсли;
	
	Если ПоследнееФоновоеЗадание = Неопределено
	 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		
		ТекстПредупреждения = "";
		ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(
			Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей.ИмяМетода,,,
			НСтр("ru = 'Запуск вручную'") + ": " + Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей.Наименование);
			
		ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную = ФоновоеЗадание.УникальныйИдентификатор;
	Иначе
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление доступа уже запущено
			           |(компьютер: %1, сеанс: %2, начат: %3 в %4)'"),
			ПоследнееОбновлениеДоступа.ИмяКомпьютера,
			ПоследнееОбновлениеДоступа.НомерСеанса,
			Формат(ПоследнееОбновлениеДоступа.НачалоСеанса, "ДЛФ=D"),
			Формат(ПоследнееОбновлениеДоступа.НачалоСеанса, "ДЛФ=T"));
	КонецЕсли;
	
	СостояниеЗаданияОбновленияДоступа = СостояниеЗаданияОбновленияДоступа(
		ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаКлиенте
Процедура НачатьОбновлениеПрогресса(ЗапускВручную = Ложь)
	
	Если ЗапускВручную И ЗначениеЗаполнено(ИдентификаторЗаданияОбновленияПрогресса) Тогда
		ОтменитьОбновлениеПрогрессаНаСервере(ИдентификаторЗаданияОбновленияПрогресса);
		
	ИначеЕсли Не АвтообновлениеПрогресса И Не ЗапускВручную
	 Или Элементы.ОбновлениеПрогресса.ТекущаяСтраница = Элементы.ОбновлениеВыполняется Тогда
		
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьПрогрессОбработчикОжидания", 0.1, Истина);
	Элементы.ОбновлениеПрогресса.ТекущаяСтраница = Элементы.ОбновлениеВыполняется;
	Элементы.ОтменитьОбновлениеПрогресса.Доступность = Ложь;
	Элементы.КартинкаОбновлениеПрогресса.Видимость = Истина;
	Элементы.КартинкаОжиданиеОбновленияПрогресса.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеПрогрессаОбработчикОжидания()
	
	НачатьОбновлениеПрогресса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогрессОбработчикОжидания()
	
	Контекст = Новый Структура;
	Контекст.Вставить("РассчитыватьПоКоличествуДанных",  РассчитыватьПоКоличествуДанных);
	Контекст.Вставить("ПоказыватьОбработанныеСписки",    Элементы.ФормаПоказатьОбработанныеСписки.Пометка);
	Контекст.Вставить("ЭтоПовторноеОбновлениеПрогресса", ЭтоПовторноеОбновлениеПрогресса);
	Контекст.Вставить("ВсегоОбновлено",                  ВсегоОбновлено);
	Контекст.Вставить("ПериодОбновленияПрогресса",       ПериодОбновленияПрогресса);
	Контекст.Вставить("АвтообновлениеПрогресса",         АвтообновлениеПрогресса);
	Контекст.Вставить("ДобавленныеСтроки",               Новый Массив);
	Контекст.Вставить("УдаленныеСтроки",                 Новый Соответствие);
	Контекст.Вставить("ИзмененныеСтроки",                Новый Соответствие);
	
	Попытка
		Статус = НачатьОбновлениеПрогрессаНаСервере(Контекст, АдресРезультата, АдресХранимыхДанных, УникальныйИдентификатор,
			ИдентификаторЗаданияОбновленияПрогресса, ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
	Исключение
		Элементы.ОтменитьОбновлениеПрогресса.Доступность = Истина;
		ВызватьИсключение;
	КонецПопытки;
	Элементы.ОтменитьОбновлениеПрогресса.Доступность = Истина;
	
	Если Статус = "Выполнено" Тогда
		ОбновитьПрогрессПослеПолученияДанных(Контекст);
		
	ИначеЕсли Статус = "Выполняется" Тогда
		ПодключитьОбработчикОжидания("ЗавершитьОбновлениеПрогрессаОбработчикОжидания", 1, Истина);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбновлениеПрогрессаОбработчикОжидания()
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаданияОбновленияПрогресса) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Неопределено;
	ЗаданиеВыполнено = ЗавершитьОбновлениеПрогрессаНаСервере(Контекст, АдресРезультата, АдресХранимыхДанных,
		ИдентификаторЗаданияОбновленияПрогресса, ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
	
	Если Не ЗаданиеВыполнено Тогда
		ОбновлениеВыполняется = Контекст.ОбновлениеПрогрессаВыполняется;
		Элементы.КартинкаОбновлениеПрогресса.Видимость         =    ОбновлениеВыполняется;
		Элементы.КартинкаОжиданиеОбновленияПрогресса.Видимость = Не ОбновлениеВыполняется;
		ПодключитьОбработчикОжидания("ЗавершитьОбновлениеПрогрессаОбработчикОжидания", 1, Истина);
		Возврат;
	КонецЕсли;
	
	ОбновитьПрогрессПослеПолученияДанных(Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогрессПослеПолученияДанных(Контекст)
	
	ВсегоОбновлено = Контекст.ВсегоОбновлено;
	Если Контекст.Свойство("ПериодОбновленияПрогресса") Тогда
		ПериодОбновленияПрогресса = Контекст.ПериодОбновленияПрогресса;
	КонецЕсли;
	Если Контекст.Свойство("АвтообновлениеПрогресса") Тогда
		АвтообновлениеПрогресса = Контекст.АвтообновлениеПрогресса;
	КонецЕсли;
	
	Элементы.РегламентноеЗаданиеОтключено.Видимость = Контекст.Свойство("РегламентноеЗаданиеОтключено");
	
	Индекс = Списки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Строка = Списки.Получить(Индекс);
		Если Контекст.УдаленныеСтроки.Получить(Строка.Список) <> Неопределено Тогда
			Списки.Удалить(Индекс);
		Иначе
			ИзмененнаяСтрока = Контекст.ИзмененныеСтроки.Получить(Строка.Список);
			Если ИзмененнаяСтрока <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Строка, ИзмененнаяСтрока);
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	Для Каждого ДобавленнаяСтрока Из Контекст.ДобавленныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Списки.Добавить(), ДобавленнаяСтрока);
	КонецЦикла;
	
	Если Контекст.ДобавленныеСтроки.Количество() > 0 Тогда
		СортироватьСписокПоПолям();
	КонецЕсли;
	
	Если АвтообновлениеПрогресса Тогда
		ПодключитьОбработчикОжидания("НачатьОбновлениеПрогрессаОбработчикОжидания",
			ПериодОбновленияПрогресса, Истина);
	КонецЕсли;
	
	Элементы.ОбновлениеПрогресса.ТекущаяСтраница = Элементы.ОбновлениеЗавершено;
	ЭтоПовторноеОбновлениеПрогресса = Истина;
	
	ОбновитьСостояниеЗаданияОбновленияДоступа(Контекст.СостояниеЗаданияОбновленияДоступа);
	ОбновитьСостояниеЗаданияОбновленияДоступаЧерезТриСекунды();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОбновлениеПрогрессаНаСервере(Контекст, АдресРезультата, АдресХранимыхДанных, ИдентификаторФормы,
			ИдентификаторЗаданияОбновленияПрогресса, ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную)
	
	Если ЗначениеЗаполнено(АдресХранимыхДанных) Тогда
		ХранимыеДанные = ПолучитьИзВременногоХранилища(АдресХранимыхДанных);
	Иначе
		ХранимыеДанные = Новый Структура;
		ХранимыеДанные.Вставить("СтрокиСписков",    Новый Соответствие);
		ХранимыеДанные.Вставить("СвойстваСписков",  Новый Соответствие);
		ХранимыеДанные.Вставить("КоличествоКлючей", 0);
		ХранимыеДанные.Вставить("ДатаПоследнегоОбновления", '00010101');
		АдресХранимыхДанных = ПоместитьВоВременноеХранилище(ХранимыеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(Контекст);
	ПараметрыПроцедуры = Новый Структура(ФиксированныйКонтекст);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	ПараметрыПроцедуры.Вставить("ХранимыеДанные", ХранимыеДанные);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Управление доступом: Получение прогресса обновления доступа'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.АдресРезультата = АдресРезультата;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне("УправлениеДоступомСлужебный.ОбновитьПрогрессВФоне",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ИдентификаторЗаданияОбновленияПрогресса = Неопределено;
	
	Если РезультатЗапуска.Статус = "Выполнено" Тогда
		ЗавершитьОбновлениеПрогрессаНаСервере(Контекст, АдресРезультата, АдресХранимыхДанных,
			Неопределено, ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную);
		
	ИначеЕсли РезультатЗапуска.Статус = "Выполняется" Тогда
		ИдентификаторЗаданияОбновленияПрогресса = РезультатЗапуска.ИдентификаторЗадания;
		
	ИначеЕсли РезультатЗапуска.Статус = "Ошибка" Тогда
		ВызватьИсключение РезультатЗапуска.ПодробноеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат РезультатЗапуска.Статус;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьОбновлениеПрогрессаНаСервере(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ИдентификаторЗадания = Неопределено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗавершитьОбновлениеПрогрессаНаСервере(Контекст, Знач АдресРезультата, Знач АдресХранимыхДанных,
			Знач ИдентификаторЗаданияОбновленияПрогресса, ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную)
	
	Если ИдентификаторЗаданияОбновленияПрогресса <> Неопределено
	   И Не ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияОбновленияПрогресса) Тогда
		
		Контекст = Новый Структура("ОбновлениеПрогрессаВыполняется",
			ПолучитьИзВременногоХранилища(АдресРезультата) <> Неопределено);
		Возврат Ложь;
	КонецЕсли;
	
	Контекст = ПолучитьИзВременногоХранилища(АдресРезультата);
	ПоместитьВоВременноеХранилище(Контекст.ХранимыеДанные, АдресХранимыхДанных);
	Контекст.Удалить("ХранимыеДанные");
	
	Контекст.Вставить("СостояниеЗаданияОбновленияДоступа",
		СостояниеЗаданияОбновленияДоступа(ИдентификаторЗаданияОбновленияДоступаЗапущенногоВручную));
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СортироватьСписок(ПоУбыванию = Ложь)
	
	ТекущаяКолонка = Элементы.Списки.ТекущийЭлемент;
	
	Если ТекущаяКолонка = Неопределено
	 Или Не СтрНачинаетсяС(ТекущаяКолонка.Имя, "Списки") Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Выберите колонку для сортировки'"));
		Возврат;
	КонецЕсли;
	
	ПоляСортировки.Очистить();
	
	Поле = Сред(Элементы.Списки.ТекущийЭлемент.Имя, СтрДлина("Списки") + 1);
	ПоляСортировки.Добавить(Поле, ?(ПоУбыванию, "Убыв", "Возр"));
	Если Поле <> "СписокПредставление" Тогда
		ПоляСортировки.Добавить("СписокПредставление", "Возр");
	КонецЕсли;
	
	СортироватьСписокПоПолям();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьСписокПоПолям(ИндексПоляСортировки = 0, СтрокиСписка = Неопределено)
	
	Если ИндексПоляСортировки >= ПоляСортировки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПолеСортировки = ПоляСортировки[ИндексПоляСортировки].Значение;
	Если СтрокиСписка = Неопределено Тогда
		СтрокиСписка = Новый СписокЗначений;
		Для Каждого Строка Из Списки Цикл
			СтрокиСписка.Добавить(Строка,
				ПредставлениеДляСортировки(Строка[ПолеСортировки]));
		КонецЦикла;
	ИначеЕсли СтрокиСписка.Количество() < 2 Тогда
		Возврат;
	Иначе
		Для Каждого ЭлементСписка Из СтрокиСписка Цикл
			ЭлементСписка.Представление =
				ПредставлениеДляСортировки(ЭлементСписка.Значение[ПолеСортировки]);
		КонецЦикла;
	КонецЕсли;
	
	НачальныйИндекс = Списки.Индекс(СтрокиСписка[0].Значение);
	СтрокиСписка.СортироватьПоПредставлению(
		НаправлениеСортировки[ПоляСортировки[ИндексПоляСортировки].Представление]);
	
	ТекущееПредставление = Неопределено;
	Подстроки = Неопределено;
	НовыйИндекс = НачальныйИндекс;
	Для Каждого ЭлементСписка Из СтрокиСписка Цикл
		ТекущийИндекс = Списки.Индекс(ЭлементСписка.Значение);
		Если ТекущийИндекс <> НовыйИндекс Тогда
			Списки.Сдвинуть(ТекущийИндекс, НовыйИндекс - ТекущийИндекс);
		КонецЕсли;
		Если ТекущееПредставление <> ЭлементСписка.Представление Тогда
			Если Подстроки <> Неопределено Тогда
				СортироватьСписокПоПолям(ИндексПоляСортировки + 1, Подстроки);
			КонецЕсли;
			Подстроки = Новый СписокЗначений;
			ТекущееПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		Подстроки.Добавить(ЭлементСписка.Значение);
		НовыйИндекс = НовыйИндекс + 1;
	КонецЦикла;
	
	Если Подстроки <> Неопределено Тогда
		СортироватьСписокПоПолям(ИндексПоляСортировки + 1, Подстроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеДляСортировки(Значение)
	
	Возврат Формат(Значение, "ЧЦ=15; ЧДЦ=4; ЧН=00000000000,0000; ЧВН=; ЧГ=");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВключитьРегламентноеЗаданиеНаСервере()
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьИВыключитьОбновлениеДоступаНаСервере()
	
	ПоследнееОбновлениеДоступа = ПоследнееОбновлениеДоступа();
	
	Если ЗначениеЗаполнено(ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания) Тогда
		ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
			ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания);
	
		Если ПоследнееФоновоеЗадание <> Неопределено
		   И ПоследнееФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			
			ПоследнееФоновоеЗадание.Отменить();
		КонецЕсли;
	КонецЕсли;
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей, Ложь);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НавигационнаяСсылка = "e1cib/app/ОбщаяФорма.СинхронизацияДанных";
	
	ИнициализироватьРеквизитыФормы();
	
	УстановитьОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДанныеМонитораИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если    ИмяСобытия = "ВыполненОбменДанными"
		Или ИмяСобытия = "Запись_СценарииОбменовДанными"
		Или ИмяСобытия = "Запись_УзелПланаОбмена"
		Или ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		Или ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными"
		Или ИмяСобытия = "ЗакрытаФормаРезультатовОбменаДанными" Тогда
		
		ОбновитьДанныеМонитораВФоне();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокСостоянияУзлов

&НаКлиенте
Процедура СписокПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСинхронизацию(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаСинхронизацииЗавершена(ТекущиеДанные.УзелИнформационнойБазы) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ВопросПродолжитьНастройкуСинхронизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОповещениеЗавершения,
			НСтр("ru = 'Перед запуском синхронизации данных необходимо завершить ее настройку.
			|Открыть форму помощника настройки?'"),
			РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("УзелОбмена",            ТекущиеДанные.УзелИнформационнойБазы);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена",        ТекущиеДанные.ИмяПланаОбмена);
		ДополнительныеПараметры.Вставить("ИнтерактивнаяОтправка", ТекущиеДанные.ИнтерактивнаяОтправка);
		
		ДополнительныеПараметры.Вставить("АвтоматическаяСинхронизация", ТекущиеДанные.ВариантОбменаДанными = "Синхронизация");
		
		ОписаниеПродолжения = Новый ОписаниеОповещения("ПродолжитьВыполнениеСинхронизации", ЭтотОбъект, ДополнительныеПараметры);
			
		Если МодельСервиса Тогда
			ВыполнитьОбработкуОповещения(ОписаниеПродолжения);
		Иначе
			ПроверитьСовместимостьПравилКонвертации(ОписаниеПродолжения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(ТекущиеДанные.УзелИнформационнойБазы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	ОбновитьДанныеМонитораИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
		
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ПерейтиВЖурналРегистрацииСобытий("ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ПерейтиВЖурналРегистрацииСобытий("ВыгрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбновление(Команда)
	
	ОбменДаннымиКлиент.УстановитьОбновлениеКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоОбмену(Команда)

	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПодробноеОписание = ПодробнаяИнформацияНаСервере(ТекущиеДанные.УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыСинхронизацииДанных(Команда)
	
	ОбменДаннымиКлиент.ОткрытьРезультатыОбменаДанными(МассивИспользуемыхУзлов(СписокПриложений));
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(ТекущиеДанные.УзелИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНастройкуСинхронизации(Команда)
	
	ОбменДаннымиКлиент.ОткрытьФормуНастройкиНовойСинхронизацииДанных(ФормаНовойСинхронизацииДанных,
		ПараметрыФормыНовойСинхронизацииДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуСинхронизации(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МодельСервиса Тогда
		
		Если ТекущиеДанные.НастройкаСинхронизацииВМенеджереСервиса Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Для удаления настройки синхронизации данных перейдите в менеджер сервиса.
				|В менеджере сервиса воспользуйтесь командой ""Синхронизация данных"".'"));
				
		ИначеЕсли ТекущиеДанные.ЭтоОбменСПриложениемВСервисе Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИмяПланаОбмена",              ТекущиеДанные.ИмяПланаОбмена);
			ПараметрыФормы.Вставить("ОбластьДанныхКорреспондента", ТекущиеДанные.ОбластьДанных);
			ПараметрыФормы.Вставить("НаименованиеКорреспондента",  ТекущиеДанные.НаименованиеКорреспондента);
			
			ИмяОбработкиПомощника = "ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете";
			ИмяФормыПомощника     = "ОтключениеСинхронизацииДанных";
			
			ИмяФормыОтключенияСинхронизации = "Обработка.[ИмяОбработки].Форма.[ИмяФормы]";
			ИмяФормыОтключенияСинхронизации = СтрЗаменить(ИмяФормыОтключенияСинхронизации, "[ИмяОбработки]", ИмяОбработкиПомощника);
			ИмяФормыОтключенияСинхронизации = СтрЗаменить(ИмяФормыОтключенияСинхронизации, "[ИмяФормы]", ИмяФормыПомощника);
			
			ОткрытьФорму(ИмяФормыОтключенияСинхронизации,
				ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(ТекущиеДанные.УзелИнформационнойБазы);
		КонецЕсли;
		
	Иначе
		ОбменДаннымиКлиент.УдалитьНастройкуСинхронизации(ТекущиеДанные.УзелИнформационнойБазы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаСинхронизацииДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОПланеОбмена = СведенияОПланеОбмена(ТекущиеДанные.ИмяПланаОбмена);
	
	Если СведенияОПланеОбмена.ИспользуютсяПравилаКонвертации Тогда
		ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных(СведенияОПланеОбмена.ИмяПланаОбмена);
	Иначе
		ВидПравил = ПредопределенноеЗначение("Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов");
		
		Отбор              = Новый Структура("ИмяПланаОбмена, ВидПравил", СведенияОПланеОбмена.ИмяПланаОбмена, ВидПравил);
		ЗначенияЗаполнения = Новый Структура("ИмяПланаОбмена, ВидПравил", СведенияОПланеОбмена.ИмяПланаОбмена, ВидПравил);
		ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "ПравилаДляОбменаДанными", 
			ТекущиеДанные.УзелИнформационнойБазы, "ПравилаРегистрацииОбъектов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяВыгрузкаДанных(Команда)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("УзелОбмена", ТекущиеДанные.УзелИнформационнойБазы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НачальнаяВыгрузкаДанныхЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ВыгрузкаДанныхДляСопоставления",
		ПараметрыПомощника, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Тусклый цвет шрифта настроенной, но ни разу не запускавшейся синхронизации.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Не запускалась'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Особый цвет шрифта синхронизации, по которой не завершена настройка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеПредставление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = НСтр("ru = 'Настройка не завершена'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноКрасный);
	
	// Скрыть пустую картинку состояния синхронизации данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрыть пустую картинку состояния выгрузки данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеВыгрузкиКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеВыгрузкиКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Скрыть пустую картинку состояния загрузки данных.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокПриложенийСостояниеЗагрузкиКартинка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокПриложений.СостояниеЗагрузкиКартинка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросПродолжитьНастройкуСинхронизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОткрытьФормуНастройкиПараметровСинхронизации(ДополнительныеПараметры.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяВыгрузкаДанныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораИнтерактивно", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметровСинхронизации(ТекущиеДанные)
	
	ПараметрыПомощника = Новый Структура;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьФормуНастройкиПараметровСинхронизацииЗавершение", ЭтотОбъект);
	
	Если НастройкаСинхронизацииЗавершена(ТекущиеДанные.УзелИнформационнойБазы) Тогда
		
		ПараметрыПомощника.Вставить("Ключ", ТекущиеДанные.УзелИнформационнойБазы);
		ПараметрыПомощника.Вставить("ИмяФормыПомощника", "ПланОбмена.[ИмяПланаОбмена].ФормаОбъекта");
		
		ПараметрыПомощника.ИмяФормыПомощника = СтрЗаменить(ПараметрыПомощника.ИмяФормыПомощника,
			"[ИмяПланаОбмена]", ТекущиеДанные.ИмяПланаОбмена);
		
		ОткрытьФорму(ПараметрыПомощника.ИмяФормыПомощника,
			ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии);
		
	Иначе
		
		ПараметрыПомощника.Вставить("УзелОбмена", ТекущиеДанные.УзелИнформационнойБазы);
		
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаСинхронизации",
			ПараметрыПомощника, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПараметровСинхронизацииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораИнтерактивно", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ = Ложь)
	
	ТекстСообщения = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			МодульОбменДаннымиВМоделиСервисаПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервисаПовтИсп");
			Если Не МодульОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		 		ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'В неразделенном режиме настройка синхронизации данных с другими программами недоступна.'");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		СписокПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
		Если СписокПлановОбмена.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ
		И Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаСинхронизацииЗавершена(УзелОбмена)
	
	Возврат ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелОбмена);
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОПланеОбмена(ИмяПланаОбмена)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Результат.Вставить("ИспользуютсяПравилаКонвертации",
		ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытий(ДействиеПриОбмене)
	
	ТекущиеДанные = Элементы.СписокПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(ТекущиеДанные.УзелИнформационнойБазы,
		ЭтотОбъект, ДействиеПриОбмене);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМонитораИнтерактивно()
	
	ИндексСтрокиСписокПриложений = ПолучитьТекущийИндексСтроки("СписокПриложений");
	
	Если МодельСервиса Тогда
		ПриНачалеОбновленияДанныхМонитора();
	Иначе
		ОбновитьСписокПриложений();
	КонецЕсли;
	
	ВыполнитьПозиционированиеКурсора("СписокПриложений", ИндексСтрокиСписокПриложений);
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМонитораВФоне()
	
	ИндексСтрокиСписокПриложений = ПолучитьТекущийИндексСтроки("СписокПриложений");
	
	Если МодельСервиса Тогда
		ПриНачалеОбновленияДанныхМонитора(Ложь);
	Иначе
		ОбновитьСписокПриложений();
	КонецЕсли;
	
	ВыполнитьПозиционированиеКурсора("СписокПриложений", ИндексСтрокиСписокПриложений);
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитораВФоне", 60, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеОбновленияДанныхМонитора(Интерактивно = Истина)
	
	ПараметрыОбработчикаПолученияСпискаПриложений = Неопределено;
	ПродолжитьОжидание = Ложь;
	
	ПриНачалеПолученияСпискаПриложенийНаСервере(
		ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
		
	Если ПродолжитьОжидание Тогда
		Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.КоманднаяПанель.Доступность = Ложь;
			
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
			
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитора",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииОбновленияДанныхМонитора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииОбновленияДанныхМонитора()
	
	ПродолжитьОжидание = Ложь;
	ПриОжиданииПолученияСпискаПриложенийНаСервере(ПараметрыОбработчикаПолученияСпискаПриложений, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПолученияСпискаПриложений);
		
		ПодключитьОбработчикОжидания("ПриОжиданииОбновленияДанныхМонитора",
			ПараметрыОбработчикаОжиданияПолученияСпискаПриложений.ТекущийИнтервал, Истина);
	Иначе
		ПараметрыОбработчикаОжиданияПолученияСпискаПриложений = Неопределено;
		ПриЗавершенииОбновленияДанныхМонитора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОбновленияДанныхМонитора()
	
	ПриЗавершенииПолученияСпискаПриложенийНаСервере();
	Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаСписокПриложений;
	Элементы.КоманднаяПанель.Доступность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриНачалеПолученияСпискаПриложенийНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ОбщегоНазначения.ОбщийМодуль(
		"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете");
	
	МодульПомощникНастройки.ПриНачалеПолученияСпискаПриложений(
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииПолученияСпискаПриложенийНаСервере(ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникНастройки = ОбщегоНазначения.ОбщийМодуль(
		"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете");
	
	МодульПомощникНастройки.ПриОжиданииПолученияСпискаПриложений(
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииПолученияСпискаПриложенийНаСервере()
	
	МодульПомощникНастройки = ОбщегоНазначения.ОбщийМодуль(
		"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете");
	
	ПараметрыОбработчикаПолученияСпискаПриложений.ДополнительныеПараметры.Вставить("Режим", "НастроенныеОбмены");
	
	СтатусЗавершения = Неопределено;
	МодульПомощникНастройки.ПриЗавершенииПолученияСпискаПриложений(
		ПараметрыОбработчикаПолученияСпискаПриложений, СтатусЗавершения);
		
	ПриложенияМоделиСервиса = Неопределено;	
	Если Не СтатусЗавершения.Отказ Тогда
		ПриложенияМоделиСервиса = СтатусЗавершения.Результат;
	КонецЕсли;
	
	ОбновитьСписокПриложений(ПриложенияМоделиСервиса);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокПриложений(ПриложенияМоделиСервиса = Неопределено)
	
	Элементы.ПанельСписокПриложений.ТекущаяСтраница = Элементы.СтраницаСписокПриложений;
	Элементы.КоманднаяПанель.Доступность = Истина;
	
	ПланыОбменаБСП = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	
	ТаблицаМонитора = ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ПланыОбменаБСП);
	СписокПриложений.Загрузить(ТаблицаМонитора);
	
	ЕстьНастроенныеОбмены = (СписокПриложений.Количество() > 0);
	
	Для Каждого СтрокаПриложение Из СписокПриложений Цикл
		
		СтрокаПриложение.НаименованиеКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаПриложение.УзелИнформационнойБазы, "Наименование");
			
		Если Не ПриложенияМоделиСервиса = Неопределено Тогда
			СтрокаПриложениеМоделиСервиса = ПриложенияМоделиСервиса.Найти(СтрокаПриложение.УзелИнформационнойБазы, "Корреспондент");
			Если Не СтрокаПриложениеМоделиСервиса = Неопределено Тогда
				СтрокаПриложение.ЭтоОбменСПриложениемВСервисе = Истина;
				СтрокаПриложение.ОбластьДанных = СтрокаПриложениеМоделиСервиса.ОбластьДанных;
				СтрокаПриложение.НаименованиеКорреспондента = СтрокаПриложениеМоделиСервиса.НаименованиеПриложения;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПриложение.ЭтоОбменСПриложениемВСервисе Тогда
			
			СтрокаПриложение.РежимРаботыПриложения = 1;
			СтрокаПриложение.ИнтерактивнаяОтправка = Истина;
			
		Иначе
			
			ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(
				СтрокаПриложение.УзелИнформационнойБазы);
			СтрокаПриложение.РежимРаботыПриложения = ?(ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS,
				1, 0);
			
			СтрокаПриложение.ИнтерактивнаяОтправка =
				Не ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(СтрокаПриложение.ИмяПланаОбмена);
			
		КонецЕсли;
		
		ИдентификаторНастройки = ОбменДаннымиСервер.СохраненныйВариантНастройкиУзлаПланаОбмена(
			СтрокаПриложение.УзелИнформационнойБазы);
		
		СтрокаПриложение.ИмяФормыПомощникаНастройкиСинхронизацииДанных = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(СтрокаПриложение.ИмяПланаОбмена,
			"ИмяФормыПомощникаНастройкиСинхронизацииДанных",
			ИдентификаторНастройки,
			СтрокаПриложение.ВерсияКорреспондента);
		
		СостояниеСинхронизации = СостояниеСинхронизацииДанных(СтрокаПриложение);
		СтрокаПриложение.СостояниеПредставление = СостояниеСинхронизации.Представление;
		СтрокаПриложение.СостояниеКартинка      = СостояниеСинхронизации.Картинка;
		
		Если ЗначениеЗаполнено(СтрокаПриложение.ДатаПоследнегоЗапуска) Тогда
			СтрокаПриложение.СостояниеВыгрузкиКартинка = КартинкаРезультатаВыполнения(СтрокаПриложение.РезультатПоследнейВыгрузкиДанных);
			СтрокаПриложение.СостояниеЗагрузкиКартинка = КартинкаРезультатаВыполнения(СтрокаПриложение.РезультатПоследнейЗагрузкиДанных);
		Иначе
			// Не отображаем надпись "Никогда", если синхронизация еще ни разу не выполнялась,
			// чтобы не перегружать интерфейс.
			СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойВыгрузки = "";
			СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойЗагрузки = "";
			
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				// Если получены данные для выполнения сопоставление, отображаем соответствующую дату получения сообщения.
				СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойЗагрузки = СтрокаПриложение.ПредставлениеДатыСообщенияДляСопоставления;
				СтрокаПриложение.СостояниеЗагрузкиКартинка = 5;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТребуетсяОбновление = ОбменДаннымиВызовСервера.ТребуетсяУстановкаОбновления();
	
	УстановитьОтображениеЭлементовФормы();
	
	ОбновитьКомандуРезультатовСинхронизации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеСинхронизацииДанных(СтрокаПриложение)
	
	Состояние = Новый Структура;
	Состояние.Вставить("Представление", "");
	Состояние.Вставить("Картинка",      0);
	
	Если Не СтрокаПриложение.НастройкаЗавершена Тогда
		Состояние.Представление = НСтр("ru = 'Настройка не завершена'");
		Состояние.Картинка = 3;
		
		Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
			Состояние.Представление = НСтр("ru = 'Настройка не завершена, получены данные для сопоставления'");
		КонецЕсли;
	Иначе
		Если СтрокаПриложение.ДатаНачалаПоследнейЗагрузки > СтрокаПриложение.ДатаОкончанияПоследнейЗагрузки Тогда
			Состояние.Представление = НСтр("ru = 'Загрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли СтрокаПриложение.ДатаНачалаПоследнейВыгрузки > СтрокаПриложение.ДатаОкончанияПоследнейВыгрузки Тогда
			Состояние.Представление = НСтр("ru = 'Выгрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаПриложение.ДатаПоследнегоЗапуска) Тогда
			Состояние.Представление = НСтр("ru = 'Не запускалась'");
			
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
		Иначе
			Состояние.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Прошлый запуск: %1'"),
				СтрокаПриложение.ПредставлениеДатыПоследнегоЗапуска);
				
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаРезультатаВыполнения(РезультатВыполнения)
	
	Если РезультатВыполнения = 2 Тогда
		Возврат 3; // выполнено с предупреждениями
	ИначеЕсли РезультатВыполнения = 1 Тогда
		Возврат 2; // ошибка
	ИначеЕсли РезультатВыполнения = 0 Тогда
		Возврат 0; // успешно
	КонецЕсли;
	
	// без статуса
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ЕстьПравоАдминистрированиеОбменов   = ОбменДаннымиСервер.ЕстьПраваНаАдминистрированиеОбменов();
	
	ЕстьПравоПросмотрЖурналаРегистрации = ПравоДоступа("ЖурналРегистрации", Метаданные);
	ЕстьПравоОбновления                 = ПравоДоступа("ОбновлениеКонфигурацииБазыДанных", Метаданные);
	
	ПрефиксИБ = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	МодельСервиса = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеЭлементовФормы()
	
	Если ЕстьПравоАдминистрированиеОбменов Тогда
		Элементы.СписокПриложенийИзменитьНастройкуСинхронизации.Видимость      = ЕстьНастроенныеОбмены;
		Элементы.СписокПриложенийСоставОтправляемыхДанных.Видимость            = ЕстьНастроенныеОбмены;
		Элементы.СписокПриложенийЗагрузитьПравилаСинхронизацииДанных.Видимость = ЕстьНастроенныеОбмены И Не МодельСервиса;
		Элементы.СписокПриложенийГруппаРасписаниеВыполненияОбмена.Видимость    = ЕстьНастроенныеОбмены И Не МодельСервиса;
		Элементы.СписокПриложенийУдалитьНастройкуСинхронизации.Видимость       = ЕстьНастроенныеОбмены;
	Иначе
		Элементы.СписокПриложенийИзменитьНастройкуСинхронизации.Видимость      = Ложь;
		Элементы.СписокПриложенийСоставОтправляемыхДанных.Видимость            = Ложь;
		Элементы.СписокПриложенийЗагрузитьПравилаСинхронизацииДанных.Видимость = Ложь;
		Элементы.СписокПриложенийГруппаУправление.Видимость                    = Ложь;
		Элементы.СписокПриложенийГруппаРасписаниеВыполненияОбмена.Видимость    = Ложь;
	КонецЕсли;
	
	Если ЕстьПравоПросмотрЖурналаРегистрации Тогда
		Элементы.СписокПриложенийГруппаСобытия.Видимость = ЕстьНастроенныеОбмены;
	Иначе
		Элементы.СписокПриложенийГруппаСобытия.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИнформационнаяПанельТребуетсяОбновление.Видимость = ТребуетсяОбновление;
	
	Элементы.ВыполнитьСинхронизацию.Видимость = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийИнформацияПоОбмену.Видимость = ЕстьНастроенныеОбмены;
	
	Элементы.ОткрытьРезультатыСинхронизацииДанных.Доступность = ЕстьНастроенныеОбмены;
	
	// Командная панель.
	Элементы.СписокПриложенийГруппаСобытия.Доступность                       = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаИзменениеИСостав.Доступность              = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаВыполненияОбменаДанными.Доступность       = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийГруппаРасписаниеВыполненияОбмена.Доступность    = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийЗагрузитьПравилаСинхронизацииДанных.Доступность = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийИнформацияПоОбмену.Доступность                  = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийУдалитьНастройкуСинхронизации.Доступность       = ЕстьНастроенныеОбмены;
	
	// Контекстное меню.
	Элементы.СписокПриложенийКонтекстноеМенюГруппаРасписаниеВыполненияОбмена.Видимость = Не МодельСервиса;
	
	Элементы.СписокПриложенийКонтекстноеМенюГруппаСобытия.Доступность                    = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаИзменениеИСостав.Доступность           = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаВыполненияОбменаДанными.Доступность    = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаРасписаниеВыполненияОбмена.Доступность = ЕстьНастроенныеОбмены;
	Элементы.СписокПриложенийКонтекстноеМенюГруппаУправление.Доступность                 = ЕстьНастроенныеОбмены;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандуРезультатовСинхронизации()
	
	Если ЕстьНастроенныеОбмены Тогда
		СтруктураЗаголовка = ОбменДаннымиСервер.СтруктураЗаголовкаГиперссылкиМонитораПроблем(
			МассивИспользуемыхУзлов(СписокПриложений));
		ЗаполнитьЗначенияСвойств(Элементы.ОткрытьРезультатыСинхронизацииДанных, СтруктураЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивИспользуемыхУзлов(ТаблицаМонитора)
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаМонитора Из ТаблицаМонитора Цикл
		Результат.Добавить(СтрокаМонитора.УзелИнформационнойБазы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьТекущийИндексСтроки(ИмяТаблицы)
	
	// Возвращаемое значение функции.
	ИндексСтроки = Неопределено;
	
	// При обновлении монитора выполняем позиционирование курсора.
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(ТекущиеДанные);
		
	КонецЕсли;
	
	Возврат ИндексСтроки;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПозиционированиеКурсора(ИмяТаблицы, ИндексСтроки)
	
	Если ИндексСтроки <> Неопределено Тогда
		
		// Выполняем проверки позиционирования курсора после получения новых данных.
		Если ЭтотОбъект[ИмяТаблицы].Количество() <> 0 Тогда
			
			Если ИндексСтроки > ЭтотОбъект[ИмяТаблицы].Количество() - 1 Тогда
				
				ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Количество() - 1;
				
			КонецЕсли;
			
			// позиционируем курсор
			Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтотОбъект[ИмяТаблицы][ИндексСтроки].ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если спозиционировать строку не удалось, то устанавливаем текущей первую строку.
	Если Элементы[ИмяТаблицы].ТекущаяСтрока = Неопределено
		И ЭтотОбъект[ИмяТаблицы].Количество() <> 0 Тогда
		
		Элементы[ИмяТаблицы].ТекущаяСтрока = ЭтотОбъект[ИмяТаблицы][0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодробнаяИнформацияНаСервере(УзелОбмена)
	
	ИмяПланаОбмена = УзелОбмена.Метаданные().Имя;
	
	ВариантНастройкиОбмена = ОбменДаннымиСервер.СохраненныйВариантНастройкиУзлаПланаОбмена(УзелОбмена);
	ВерсияКорреспондента   = ОбменДаннымиСервер.ВерсияКорреспондента(УзелОбмена);
	
	СсылкаНаПодробноеОписание = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(
		ИмяПланаОбмена, "ПодробнаяИнформацияПоОбмену", ВариантНастройкиОбмена, ВерсияКорреспондента);
	
	Возврат СсылкаНаПодробноеОписание;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьВыполнениеСинхронизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ИнтерактивнаяОтправка Тогда
		
		ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ДополнительныеПараметры.УзелОбмена, ЭтотОбъект);
		
	Иначе
		
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
			ЭтотОбъект, , ДополнительныеПараметры.АвтоматическаяСинхронизация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовместимостьПравилКонвертации(ОбработкаПродолжения)
	
	ОписаниеОшибки = Неопределено;
	Если ПравилаКонвертацииСовместимыСТекущейВерсией(ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена, ОписаниеОшибки) Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
		
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПерейтиКЗагрузкеПравил", НСтр("ru = 'Загрузить правила'"));
		Если ОписаниеОшибки.ВидОшибки <> "НекорректнаяКонфигурация" Тогда
			Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КонецЕсли;
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена",       ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПравилКонвертацииНаСовместимость", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыФормы.Картинка = ОписаниеОшибки.Картинка;
		ПараметрыФормы.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		Если ОписаниеОшибки.ВидОшибки = "НекорректнаяКонфигурация" Тогда
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных не может быть выполнена'");
		Иначе
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно'");
		КонецЕсли;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ОписаниеОшибки.ТекстОшибки, Кнопки, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПравилКонвертацииНаСовместимость(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение = "Продолжить" Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения);
			
		ИначеЕсли Результат.Значение = "ПерейтиКЗагрузкеПравил" Тогда
			
			ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных(ДополнительныеПараметры.ИмяПланаОбмена);
			
		КонецЕсли; // При "Отмена" ничего не делаем.
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена, ОписаниеОшибки)
	
	ДанныеОПравилах = Неопределено;
	Если Не ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ДанныеОПравилах) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПравилаДляОбменаДанными.ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена,
		ОписаниеОшибки, ДанныеОПравилах);
		
КонецФункции

&НаСервере
Функция ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ИнформацияОПравилах)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
	|	ПравилаДляОбменаДанными.ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)");
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация;
		
		ИнформацияОПравилах = Новый Структура;
		ИнформацияОПравилах.Вставить("ИмяКонфигурации",              СтруктураПравил.Источник);
		ИнформацияОПравилах.Вставить("ВерсияКонфигурации",           СтруктураПравил.ВерсияКонфигурацииИсточника);
		ИнформацияОПравилах.Вставить("СинонимКонфигурацииВПравилах", СтруктураПравил.СинонимКонфигурацииИсточника);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
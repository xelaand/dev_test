#Область ПрограммныйИнтерфейс

// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    Адрес - Строка, Структура - Строка в формате JSON или XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//    Строка - Наименование региона.
//
Функция РегионАдресаКонтактнойИнформации(Знач Адрес) Экспорт
	
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			Возврат "";
		КонецЕсли;
	
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
			Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;
		
		Адрес = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(Адрес);
		
	ИначеЕсли ТипЗнч(Адрес) <> Тип("Структура") Тогда
		
		ВызватьИсключение НСтр("ru = 'Невозможно определить субъекта РФ, ожидается адрес.'");
		
	КонецЕсли;
	
	СубъектРФ = СокрЛП(Адрес.Area + " " + Адрес.AreaType);
	
	Возврат СубъектРФ;
	
КонецФункции

// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    Адрес - Строка, Структура - Строка в формате JSON или строка XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//    Строка - Наименование города.
//
Функция ГородАдресаКонтактнойИнформации(Знач Адрес) Экспорт
	
	Если ТипЗнч(Адрес) = Тип("Строка") Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			Возврат "";
		КонецЕсли;
	
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Адрес) Тогда
			Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Адрес, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;
		
		Адрес = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(Адрес);
		
	ИначеЕсли ТипЗнч(Адрес) <> Тип("Структура") Тогда
		
		ВызватьИсключение НСтр("ru = 'Невозможно определить город, ожидается адрес.'");
		
	КонецЕсли;
	
	Город = СокрЛП(Адрес.City + " " + Адрес.CityType);
	
	Возврат Город;
	
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
// Параметры:
//   Адреса                  - Массив - XDTO объекты или строки XML соответствующие XDTO пакету Адрес.
//   ДополнительныеПараметры - Структура - Параметры контактной информации:
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Массив - Содержит массив структур, содержимое структуры см. описание функции СведенияОбАдресе.
//
Функция СведенияОбАдресах(Адреса, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры);
КонецФункции

// Возвращает сведения об адресе в виде отдельных частей адреса и различных кодов (код региона, ОКТМО и др.).
//
// Параметры:
//   Адрес                  - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO пакету Адрес.
//                          - ОбъектXDTO - XDTO объект, соответствующий XDTO пакету Адрес.
//   ДополнительныеПараметры - Структура - для уточнения возвращаемого значения:
//       * БезПредставлений - Булево - Если Истина, то поле Представление будет отсутствовать. По умолчанию, Ложь.
//       * КодыКЛАДР        - Булево - Если Истина, то возвращается структура КодыКЛАДР. По умолчанию, Ложь.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращается полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
//       * ПроверитьАдрес   - Булево - Если Истина, то адрес будет проверен на соответствие ФИАС.
//
// Возвращаемое значение:
//   Структура - сведения об адресе:
//        * Представление    - Строка - текстовое представление адреса по административно-территориальному делению.
//        * МуниципальноеПредставление - Строка - текстовое представление адреса по муниципальному делению.
//        * ТипАдреса        - Строка - основной тип адреса (только для адресов РФ).
//                                      Варианты: "Муниципальный", "Административно-территориальный".
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * КодРегиона       - Строка - код региона РФ.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа (устарело).
//        * ОкругСокращение  - Строка - сокращение округа (устарело).
//        * Район            - Строка - текстовое представление района у адресов по административно-территориальному делению.
//        * РайонСокращение  - Строка - сокращение района у адресов по административно-территориальному делению.
//        * МуниципальныйРайон - Строка - текстовое представление муниципального района у адресов по муниципальному делению.
//        * МуниципальныйРайонСокращение - Строка - сокращение муниципального района у адресов по муниципальному делению.
//        * Город            - Строка - текстовое представление города у адресов по административно-территориальному делению.
//        * ГородСокращение  - Строка - сокращение города  у адресов по административно-территориальному делению.
//        * Поселение            - Строка - текстовое представление поселения у адресов по муниципальному делению.
//        * ПоселениеСокращение  - Строка - сокращение поселения у адресов по муниципальному делению.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района.
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Территория            - Строка - текстовое представление территории.
//        * ТерриторияСокращение  - Строка - сокращение территории.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории (устарело).
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории (устарело).
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории (устарело).
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории (устарело).
//        * Здание - Структура - структура с информацией о здании адреса.
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N
//                                     171н.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса   - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * Комментарий - Строка - комментарий об адресе.
//        * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Идентификационный код последнего адресного объекта
//                                        в иерархи адреса. Например, для адреса: Москва г., Дмитровское ш., д.9 это
//                                        будет идентификатор улицы.
//        * ИдентификаторДома             - УникальныйИдентификатор - Идентификационный код дома(строения) адресного объекта.
//        * Идентификаторы - Структура - Идентификаторы адресных объектов адреса.
//            ** РегионИдентификатор - УникальныйИдентификатор - идентификатор региона.
//            ** РайонИдентификатор - УникальныйИдентификатор - идентификатор района.
//            ** МуниципальныйРайонИдентификатор - УникальныйИдентификатор - идентификатор муниципального района.
//            ** ГородИдентификатор - УникальныйИдентификатор - идентификатор города.
//            ** ПоселениеИдентификатор - УникальныйИдентификатор - идентификатор поселения.
//            ** ВнутригородскойРайонИдентификатор - УникальныйИдентификатор - идентификатор внутригородского района.
//            ** ТерриторияИдентификатор - УникальныйИдентификатор - идентификатор территории.
//            ** ТерриторияИдентификатор - УникальныйИдентификатор - идентификатор территории.
//            ** УлицаИдентификатор      - УникальныйИдентификатор - идентификатор улица.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - Код КЛАДР региона.
//           ** Район           - Строка    - Код КЛАДР район.
//           ** Город           - Строка    - Код КЛАДР города.
//           ** НаселенныйПункт - Строка    - Код КЛАДР населенного пункта.
//           ** Улица           - Строка    - Код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
//        * РезультатПроверкиАдреса - Строка - "Успех", если адрес корректный, "Ошибка" - при наличии ошибок проверки,
//                                             "Отказ", если не удалось проверить адрес, т.к. не доступен классификатор.
//                                             Пустая строка, если в параметре ДополнительныеПараметры.ПроверитьАдрес не
//                                             установлен флаг ПроверитьАдрес.
//        * ОшибкиПроверкиАдреса - Строка  - описание ошибок в адресе, выявленных в ходе проверки.
//
Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры);
КонецФункции

// Проверяет адрес на соответствие требованиям к адресной информации.
//
// Параметры:
//   АдресВXML          - Строка - Строка XML соответствующая XDTO пакету Адрес.
//   ПараметрыПроверки  - Структура, СправочникСсылка.ВидыКонтактнойИнформации - Флаги проверки адреса:
//          ТолькоНациональныйАдрес - Булево - Адрес должен быть только Российским. По умолчанию ИСТИНА.
//          ФорматАдреса - Строка - По какому классификатору проверять "КЛАДР" или "ФИАС". По умолчанию "КЛАДР".
// Возвращаемое значение:
//   Структура - содержит структуру с полями:
//        * Результат - Строка - Результат проверки: "Корректный", "НеПроверен", "СодержитОшибки".
//        * СписокОшибок - СписокЗначений - Информация о ошибках.
Функция ПроверитьАдрес(Знач АдресВXML, ПараметрыПроверки = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдрес(АдресВXML, ПараметрыПроверки);
КонецФункции

// Преобразует структуру описывающую адрес во внутренний формат хранения контактной информации JSON.
//
// Параметры:
//  ПоляАдреса - Структура - Адрес с разбивкой по полям. Список полей см. РаботаСАдресамиКлиентСервер.ПоляАдреса.
// 
// Возвращаемое значение:
//  Строка - Адрес во внутренний формат JSON.
//
Функция ПоляАдресаВJSON(ПоляАдреса) Экспорт
	
	Результат = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");
	
	Результат.AddressType = ПоляАдреса.ТипАдреса;
	Если ПоляАдреса.ТипАдреса <> РаботаСАдресамиКлиентСервер.МуниципальныйАдрес()
		И ПоляАдреса.ТипАдреса <> РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес() Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный тип адреса (%1)'"),
			ПоляАдреса.ТипАдреса);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ПоляАдреса.ТипАдреса <> РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес() Тогда
		Результат.Value = ПоляАдреса.Представление;
	Иначе
		Результат.Value = ПоляАдреса.МуниципальноеПредставление;
	КонецЕсли;
	
	Результат.Comment     = ПоляАдреса.Комментарий;
	
	Результат.Country     = ПоляАдреса.Страна;
	Результат.CountryCode = ПоляАдреса.КодСтраны;
	
	Результат.ZIPcode     = ПоляАдреса.Индекс;
	
	Результат.AreaCode    = ПоляАдреса.КодРегиона;
	
	Результат.Area     = ПоляАдреса.Регион;
	Результат.AreaType = ПоляАдреса.РегионСокращение;
	
	Результат.City     = ПоляАдреса.Город;
	Результат.CityType = ПоляАдреса.ГородСокращение;
	
	Результат.Street     = ПоляАдреса.Улица;
	Результат.StreetType = ПоляАдреса.УлицаСокращение;
	
	Результат.District     = ПоляАдреса.Район;
	Результат.DistrictType = ПоляАдреса.РайонСокращение;
	
	Результат.MunDistrict     = ПоляАдреса.МуниципальныйРайон;
	Результат.MunDistrictType = ПоляАдреса.МуниципальныйРайонСокращение;
	
	Результат.Settlement     = ПоляАдреса.Поселение;
	Результат.SettlementType = ПоляАдреса.ПоселениеСокращение;
	
	Результат.CityDistrict     = ПоляАдреса.ВнутригородскойРайон;
	Результат.CityDistrictType = ПоляАдреса.ВнутригородскойРайонСокращение;
	
	Результат.Locality     = ПоляАдреса.НаселенныйПункт;
	Результат.LocalityType = ПоляАдреса.НаселенныйПунктСокращение;
	
	Результат.Territory     = ПоляАдреса.Территория;
	Результат.TerritoryType = ПоляАдреса.ТерриторияСокращение;
	
	Результат.HouseType   = ПоляАдреса.Здание.ТипЗдания;
	Результат.HouseNumber = ПоляАдреса.Здание.Номер;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.РегионИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.РегионИдентификатор) Тогда
		Результат.AreaID = Строка(ПоляАдреса.Идентификаторы.РегионИдентификатор);
		Результат.ID = Результат.AreaID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.РайонИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.РайонИдентификатор) Тогда
		Результат.DistrictID = Строка(ПоляАдреса.Идентификаторы.РайонИдентификатор);
		Результат.ID         = Результат.DistrictID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.ГородИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.ГородИдентификатор) Тогда
		Результат.CityID = Строка(ПоляАдреса.Идентификаторы.ГородИдентификатор);
		Результат.ID     = Результат.CityID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.МуниципальныйРайонИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.МуниципальныйРайонИдентификатор) Тогда
		Результат.MunDistrictID = Строка(ПоляАдреса.Идентификаторы.МуниципальныйРайонИдентификатор);
		Результат.ID            = Результат.MunDistrictID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.ПоселениеИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.ПоселениеИдентификатор) Тогда
		Результат.SettlementID = Строка(ПоляАдреса.Идентификаторы.ПоселениеИдентификатор);
		Результат.ID           = Результат.SettlementID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.ВнутригородскойРайонИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.ВнутригородскойРайонИдентификатор) Тогда
		Результат.CityDistrictID = Строка(ПоляАдреса.Идентификаторы.ВнутригородскойРайонИдентификатор);
		Результат.ID             = Результат.CityDistrictID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.НаселенныйПунктИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.НаселенныйПунктИдентификатор) Тогда
		Результат.LocalityID = Строка(ПоляАдреса.Идентификаторы.НаселенныйПунктИдентификатор);
		Результат.ID         = Результат.LocalityID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.ТерриторияИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.ТерриторияИдентификатор) Тогда
		Результат.TerritoryID = Строка(ПоляАдреса.Идентификаторы.ТерриторияИдентификатор);
		Результат.ID          = Результат.TerritoryID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.Идентификаторы.УлицаИдентификатор) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.Идентификаторы.УлицаИдентификатор) Тогда
		Результат.StreetID = Строка(ПоляАдреса.Идентификаторы.УлицаИдентификатор);
		Результат.ID       = Результат.StreetID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.ИдентификаторДома) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.ИдентификаторДома) Тогда
		Результат.HouseID = Строка(ПоляАдреса.ИдентификаторДома);
		Результат.ID      = Результат.HouseID;
	КонецЕсли;
	
	Если ТипЗнч(ПоляАдреса.ИдентификаторАдресногоОбъекта) = ТипУникальныйИдентификатор
		И ЗначениеЗаполнено(ПоляАдреса.ИдентификаторАдресногоОбъекта) Тогда
		Результат.ID = Строка(ПоляАдреса.ИдентификаторАдресногоОбъекта);
	КонецЕсли;
	
	Для Каждого ТекущийКорпус Из ПоляАдреса.Корпуса Цикл
		Результат.Buildings.Добавить(
			Новый Структура("Type, Number", ТекущийКорпус.ТипКорпуса, ТекущийКорпус.Номер));
	КонецЦикла;
	
	Для Каждого ТекущееПомещение Из ПоляАдреса.Помещения Цикл
		Результат.Apartments.Добавить(
			Новый Структура("Type, Number", ТекущееПомещение.ТипПомещения, ТекущееПомещение.Номер));
	КонецЦикла;
	
	// Заполнение кода КЛАДР последнего в иерархии адресного объекта.
	Если Не ПустаяСтрока(ПоляАдреса.КодыКЛАДР.Улица) Тогда
		Результат.CodeKLADR = ПоляАдреса.КодыКЛАДР.Улица;
	ИначеЕсли Не ПустаяСтрока(ПоляАдреса.КодыКЛАДР.НаселенныйПункт) Тогда
		Результат.CodeKLADR = ПоляАдреса.КодыКЛАДР.НаселенныйПункт;
	ИначеЕсли Не ПустаяСтрока(ПоляАдреса.КодыКЛАДР.Город) Тогда
		Результат.CodeKLADR = ПоляАдреса.КодыКЛАДР.Город;
	ИначеЕсли Не ПустаяСтрока(ПоляАдреса.КодыКЛАДР.Район) Тогда
		Результат.CodeKLADR = ПоляАдреса.КодыКЛАДР.Район;
	ИначеЕсли Не ПустаяСтрока(ПоляАдреса.КодыКЛАДР.Регион) Тогда
		Результат.CodeKLADR = ПоляАдреса.КодыКЛАДР.Регион;
	КонецЕсли;
	
	Результат.OKTMO          = ПоляАдреса.ДополнительныеКоды.ОКТМО;
	Результат.OKATO          = ПоляАдреса.ДополнительныеКоды.ОКАТО;
	Результат.IFNSFLCode     = ПоляАдреса.ДополнительныеКоды.КодИФНСФЛ;
	Результат.IFNSULCode     = ПоляАдреса.ДополнительныеКоды.КодИФНСЮЛ;
	Результат.IFNSFLAreaCode = ПоляАдреса.ДополнительныеКоды.КодУчасткаИФНСФЛ;
	Результат.IFNSULAreaCode = ПоляАдреса.ДополнительныеКоды.КодУчасткаИФНСЮЛ;
	
	Если ПустаяСтрока(Результат.ID) Тогда
		
		// Если в адресе не заполнены идентификаторы, тогда заполнить их.
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Value) Тогда
		РаботаСАдресамиКлиентСервер.ОбновитьПредставлениеАдреса(Результат, Ложь);
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Результат);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обратная совместимость.

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать РаботаСАдресами.СведенияОбАдресе.
// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - Строка XML соответствующая XDTO пакету Адрес.
//    СокращенныйСоставПолей - Булево - Если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СокращенныйСоставПолей);
		Возврат РаботаСАдресамиКлиентСервер.ПреобразоватьСписокПолейВСтроку(СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.СведенияОбАдресе.
// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - Строка XML соответствующая XDTO пакету Адрес.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - Параметры контактной информации.
//     * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - Представление страны.
//        ** КодСтраны        - Строка - Код страны по ОКСМ.
//        ** Индекс           - Строка - Почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - Представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - Код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - Сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - Представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - Сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - Представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - Сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - Представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - Представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - Сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - Тип дома см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Дом              - Строка - Представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - Тип корпуса см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Корпус           - Строка - Представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - Тип квартиры см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Квартира         - Строка - Представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - Код страны. Например, +7.
//        ** КодГорода        - Строка - Код города. Например, 495.
//        ** НомерТелефона    - Строка - Номер телефона.
//        ** Добавочный       - Строка - Добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
			ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации <> Неопределено Тогда
		// Генерируем по виду
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			ВидКонтактнойИнформации.Тип);
	КонецЕсли;
	
	Если ВидКонтактнойИнформации <> Неопределено
		И ((ТипЗнч(ВидКонтактнойИнформации) = Тип("Структура") И ВидКонтактнойИнформации.Свойство("Тип"))
		ИЛИ ТипЗнч(ВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")) Тогда
			ТипКонтактнойИнформации = ВидКонтактнойИнформации.Тип;
	Иначе
		ТипКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями.
	Результат = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(ТипКонтактнойИнформации);
	СтруктураЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
	Если ТипКонтактнойИнформации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтруктураЗначенийПолей);
		Возврат Результат;
	КонецЕсли;
	
	Возврат СтруктураЗначенийПолей;
	
КонецФункции

// Устарела. Следует использовать РаботаСАдресами.СведенияОбАдресе.
// Преобразует адреса нового формата XML ФИАС в адрес формата КЛАДР.
//
// Параметры:
//   Данные                  - Строка - строка XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - Представление страны.
//        ** КодСтраны        - Строка - Код страны по ОКСМ.
//        ** Индекс           - Строка - Почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - Представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - Код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - Сокращение региона.
//        ** Район            - Строка - Представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - Сокращение района.
//        ** Город            - Строка - Представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - Сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - Представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - Сокращение населенного пункта.
//        ** Улица            - Строка - Представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - Сокращение улицы.
//        ** ТипДома          - Строка - Тип дома см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Дом              - Строка - Представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - Тип корпуса см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Корпус           - Строка - Представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - Тип квартиры см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Квартира         - Строка - Представление квартиры (только для адресов РФ).
//        ** АдресРФ          - Булево - Если Истина, то адрес российский.
//        ** Представление    - Строка - Представление адреса.
//
Функция АдресВФорматеКЛАДР(Знач Данные) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Результат = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
				ПредыдущийФорматКонтактнойИнформацииXML(Данные));
			Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Данные);
			
	ИначеЕсли ПустаяСтрока(Данные) Тогда
		// Генерируем пустую структуру по виду
		Результат = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		Представление = "";
	КонецЕсли;
	
	Если Результат.Свойство("Страна") И СтрСравнить(Результат.Страна, РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование) = 0 Тогда
		Результат.Вставить("АдресРФ", Истина);
	Иначе
		Результат.Вставить("АдресРФ", Ложь);
	КонецЕсли;
	Результат.Вставить("Представление", Представление);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает пространство имен для оперирования с XDTO контактной информации.
//
// Возвращаемое значение:
//      Строка - пространство имен.
//
Функция ПространствоИмен() Экспорт
	Возврат "http://www.v8.1c.ru/ssl/contactinfo_ru";
КонецФункции

// Преобразует XML. Обратная совместимость.
//
Функция ПередЧтениемXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	
	Если СтрНайти(ТекстXML, "Адрес") = 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;
	
	Если СтрНайти(ТекстXML, "http://www.v8.1c.ru/ssl/contactinfo_ru") > 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;
	
	ТекстXML = СтрЗаменить(ТекстXML, "xsi:type=""АдресРФ""", "xmlns:rf=""http://www.v8.1c.ru/ssl/contactinfo_ru"" xsi:type=""rf:АдресРФ""");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ", "<rf:СубъектРФ");
	ТекстXML = СтрЗаменить(ТекстXML, "/СубъектРФ>", "/rf:СубъектРФ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ/>", "<rf:СубъектРФ/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Округ", "<rf:Округ");
	ТекстXML = СтрЗаменить(ТекстXML, "/Округ>", "/rf:Округ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Округ/>", "<rf:Округ/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО", "<rf:СвРайМО");
	ТекстXML = СтрЗаменить(ТекстXML, "/СвРайМО>", "/rf:СвРайМО>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО/>", "<rf:СвРайМО/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Район", "<rf:Район");
	ТекстXML = СтрЗаменить(ТекстXML, "/Район>", "/rf:Район>");
	ТекстXML = СтрЗаменить(ТекстXML, "</Район>", "</rf:Район>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Город", "<rf:Город");
	ТекстXML = СтрЗаменить(ТекстXML, "/Город>", "/rf:Город>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Город/>", "<rf:Город/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ВнутригРайон", "rf:ВнутригРайон");
	
	ТекстXML = СтрЗаменить(ТекстXML, "НаселПункт", "rf:НаселПункт");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Улица", "<rf:Улица");
	ТекстXML = СтрЗаменить(ТекстXML, "/Улица>", "/rf:Улица>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Улица/>", "<rf:Улица/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ОКТМО", "rf:ОКТМО");
	ТекстXML = СтрЗаменить(ТекстXML, "ОКАТО", "rf:ОКАТО");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ДопАдрЭл", "rf:ДопАдрЭл");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Номер", "<rf:Номер");
	ТекстXML = СтрЗаменить(ТекстXML, "/Номер>", "/rf:Номер>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Номер/>", "<rf:Номер/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение", "<rf:Местоположение");
	ТекстXML = СтрЗаменить(ТекстXML, "/Местоположение>", "/rf:Местоположение>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение/>", "<rf:Местоположение/>");
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПередЗаписьюXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	
	Позиция = СтрНайти(ТекстXML, "АдресРФ""");
	Если Позиция > 0 Тогда
		ПозицияНачало = СтрНайти(ТекстXML, """", НаправлениеПоиска.СКонца, Позиция);
		Префикс = Сред(ТекстXML, ПозицияНачало + 1, Позиция - ПозицияНачало - 2);
		
		ТекстXML = СтрЗаменить(ТекстXML, Префикс +":", "");
		ТекстXML = СтрЗаменить(ТекстXML, " xmlns:"+ Префикс + "=""http://www.v8.1c.ru/ssl/contactinfo_ru""", "");
	КонецЕсли;
	
	Возврат ТекстXML;
КонецФункции

Функция ДополнительныеПравилаПреобразования() Экспорт
	
	КодыДополнительныхАдресныхЭлементов = Новый ТекстовыйДокумент;
	Для Каждого ДополнительныйАдресныйЭлемент Из РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ() Цикл
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + ДополнительныйАдресныйЭлемент.Наименование + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + НРег(ДополнительныйАдресныйЭлемент.Наименование) + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
	КонецЦикла;
	
	КодыРегионов = Новый ТекстовыйДокумент;
	ВсеРегионы = ВсеРегионы();
	Если ВсеРегионы <> Неопределено Тогда
		Для Каждого Строка Из ВсеРегионы Цикл
			КодыРегионов.ДобавитьСтроку("<data:item data:code=""" + Формат(Строка.КодСубъектаРФ, "ЧН=; ЧГ=") + """>" 
			+ Строка.Представление + "</data:item>");
		КонецЦикла;
	КонецЕсли;
	
	РасширенныйТекстПреобразования = "
	|  <xsl:template match=""/"" mode=""domestic"">
	|    <xsl:element name=""Состав"">
	|      <xsl:attribute name=""xsi:type"">АдресРФ</xsl:attribute>
	|    
	|      <xsl:element name=""СубъектРФ"">
	|        <xsl:variable name=""value"" select=""tns:Structure/tns:Property[@name='Регион']/tns:Value/text()"" />
	|
	|        <xsl:choose>
	|          <xsl:when test=""0=count($value)"">
	|            <xsl:variable name=""regioncode"" select=""tns:Structure/tns:Property[@name='КодРегиона']/tns:Value/text()""/>
	|            <xsl:variable name=""regiontitle"" select=""$enum-regioncode-nodes/data:item[@data:code=number($regioncode)]"" />
	|              <xsl:if test=""0!=count($regiontitle)"">
	|                <xsl:value-of select=""$regiontitle""/>
	|              </xsl:if>
	|          </xsl:when>
	|          <xsl:otherwise>
	|            <xsl:value-of select=""$value"" />
	|          </xsl:otherwise> 
	|        </xsl:choose>
	|
	|      </xsl:element>
	|   
	|      <xsl:element name=""Округ"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Округ']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""СвРайМО"">
	|        <xsl:element name=""Район"">
	|          <xsl:value-of select=""tns:Structure/tns:Property[@name='Район']/tns:Value/text()""/>
	|        </xsl:element>
	|      </xsl:element>
	|  
	|      <xsl:element name=""Город"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Город']/tns:Value/text()""/>
	|      </xsl:element>
	|    
	|      <xsl:element name=""ВнутригРайон"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='ВнутригРайон']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""НаселПункт"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='НаселенныйПункт']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""Улица"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Улица']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:variable name=""index"" select=""tns:Structure/tns:Property[@name='Индекс']/tns:Value/text()"" />
	|      <xsl:if test=""0!=count($index)"">
	|        <xsl:element name=""ДопАдрЭл"">
	|          <xsl:attribute name=""ТипАдрЭл"">" + РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса() + "</xsl:attribute>
	|          <xsl:attribute name=""Значение""><xsl:value-of select=""$index""/></xsl:attribute>
	|        </xsl:element>
	|      </xsl:if>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипДома']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Дом'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Дом']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКорпуса']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Корпус'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Корпус']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКвартиры']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Квартира'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Квартира']/tns:Value/text()"" />
	|      </xsl:call-template>
	|    
	|    </xsl:element>
	|  </xsl:template>
	|
	|  <xsl:param name=""enum-codevalue"">
	|" + КодыДополнительныхАдресныхЭлементов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-codevalue-nodes"" select=""exsl:node-set($enum-codevalue)"" />
	|
	|  <xsl:param name=""enum-regioncode"">
	|" + КодыРегионов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-regioncode-nodes"" select=""exsl:node-set($enum-regioncode)"" />
	|  
	|  <xsl:template name=""add-elem-number"">
	|    <xsl:param name=""source"" />
	|    <xsl:param name=""defsrc"" />
	|    <xsl:param name=""value"" />
	|
	|    <xsl:if test=""0!=count($value)"">
	|
	|      <xsl:choose>
	|        <xsl:when test=""0!=count($source)"">
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$source]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:when>
	|        <xsl:otherwise>
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$defsrc]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:otherwise>
	|      </xsl:choose>
	|
	|    </xsl:if>
	|  
	|  </xsl:template>
	|  
	|</xsl:stylesheet>";
	
	Возврат РасширенныйТекстПреобразования;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Внутреннее для сериализации.
Функция КонвертироватьАдресИзJSONВXML(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено) Экспорт
	
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	НазваниеОсновнойСтраны  = ВРег(РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование);
	
	// Национальный
	НациональныйАдрес = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	Адрес.Страна = НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресНациональный = Истина;
	
	ПолеПредставления      = "";
	
	АдресСодержитДополнительныеТерритории = ЗначениеЗаполнено(ЗначенияПолей.Territory);
	
	Для Каждого ЭлементСписка Из ЗначенияПолей Цикл
		
		Если ПустаяСтрока(ЭлементСписка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = ВРег(ЭлементСписка.Ключ);
		
		Если ИмяПоля="ZIPCODE" Тогда
			ЭлементИндекс = СоздатьДопАдрЭлемента(НациональныйАдрес);
			ЭлементИндекс.ТипАдрЭл = РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "COMMENT" Тогда
			Результат.Комментарий = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "COUNTRY" Тогда
			Адрес.Страна = Строка(ЭлементСписка.Значение);
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресНациональный = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "COUNTRYCODE" Тогда
			// действия не требуется
			
		ИначеЕсли ИмяПоля = "AREACODE" Тогда
			Если ПустаяСтрока(НациональныйАдрес.СубъектРФ) Тогда
				НациональныйАдрес.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "AREA" Тогда
			НациональныйАдрес.СубъектРФ = ЭлементСписка.Значение + " " + ЗначенияПолей.AreaType;
			
		ИначеЕсли ИмяПоля = "DISTRICT" Тогда
			Если НациональныйАдрес.СвРайМО = Неопределено Тогда
				НациональныйАдрес.СвРайМО = ФабрикаXDTO.Создать(НациональныйАдрес.Тип().Свойства.Получить("СвРайМО").Тип)
			КонецЕсли;
			НациональныйАдрес.СвРайМО.Район = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.DistrictType);
			
		ИначеЕсли ИмяПоля = "CITY" Тогда
			Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
				НациональныйАдрес.Город = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.CityType);
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "TERRITORY" Тогда
			
			ПутьXPath = РаботаСАдресамиКлиентСервер.XPathДополнительногоОбъектаАдресации(90, ЗначенияПолей.TerritoryType);
			Обработки.РасширенныйВводКонтактнойИнформации.УстановитьXDTOРеквизитОбъекта(НациональныйАдрес, ПутьXPath, 
			ЭлементСписка.Значение + " " + ЗначенияПолей.TerritoryType);
			
		ИначеЕсли ИмяПоля = "LOCALITY" Тогда
			НациональныйАдрес.НаселПункт = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.LocalityType);
			
		ИначеЕсли ИмяПоля = "CITYDISTRICT" Тогда
			НациональныйАдрес.ВнутригРайон = СокрЛП(ЭлементСписка.Значение + " " + ЗначенияПолей.CityDistrictType);
			
		ИначеЕсли ИмяПоля = "STREET" Тогда
			НациональныйАдрес.Улица = СокрЛП(ЭлементСписка.Значение  + " " + ЗначенияПолей.StreetType);
			
		ИначеЕсли ИмяПоля = "HOUSETYPE" Тогда
			
			ЭлементДом = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
			ЭлементДом.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			Если ЭлементДом.Тип = Неопределено Тогда
				ЭлементДом.Тип = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Дом");
			КонецЕсли;
			ЭлементДом.Значение = ЗначенияПолей.HouseNumber;
			
		ИначеЕсли ИмяПоля = "BUILDINGS" Тогда
			
			Для каждого СписокСтроение Из ЭлементСписка.Значение Цикл
				
				// тип корпуса
				ЭлементКорпус          = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
				ЭлементКорпус.Тип      = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(СписокСтроение.Type);
				Если ЭлементКорпус.Тип = Неопределено Тогда
					ЭлементКорпус.Тип  = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Корпус");
				КонецЕсли;
				ЭлементКорпус.Значение = СписокСтроение.Number;
				
			КонецЦикла;
			
		ИначеЕсли ИмяПоля = "APARTMENTS" Тогда
			
			Для каждого СписокСтроение Из ЭлементСписка.Значение Цикл
				
				// тип квартиры
				ЭлементКвартира          = СоздатьНомерДопАдрЭлемента(НациональныйАдрес);
				ЭлементКвартира.Тип      = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации(СписокСтроение.Type);
				Если ЭлементКвартира.Тип = Неопределено Тогда
					ЭлементКвартира.Тип  = РаботаСАдресамиКлиентСервер.КодСериализацииОбъектаАдресации("Квартира");
				КонецЕсли;
				ЭлементКвартира.Значение = СписокСтроение.Number;
				
			КонецЦикла;
			
		ИначеЕсли ИмяПоля = "OKTMO" Тогда
			НациональныйАдрес.ОКТМО = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ОКАТО" Тогда
			НациональныйАдрес.ОКАТО = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "VALUE" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресНациональный, НациональныйАдрес, Результат.Представление);
	
	Возврат Результат;
КонецФункции

// Преобразует формат из XML в JSON
//
Функция КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Знач Тип = Неопределено, Представление = "") Экспорт
	
	Если Тип <> Неопределено И ТипЗнч(Тип) <> Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Тип = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.ТипВидаКонтактнойИнформации(Тип);
	КонецЕсли;
	
	Если Тип = Неопределено Тогда
		
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
			Тип = УправлениеКонтактнойИнформацией.ТипКонтактнойИнформации(КонтактнаяИнформация);
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
			ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
			
			НайденТип = ?(КонтактнаяИнформация.Состав = Неопределено, Неопределено, КонтактнаяИнформация.Состав.Тип());
			Тип = УправлениеКонтактнойИнформациейСлужебный.СоответствиеXDTOТиповКонтактнойИнформации(НайденТип);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Метаданные.ОбщиеМодули.Найти("РаботаСАдресамиКлиентСервер") <> Неопределено Тогда
		МодульРаботаСАдресамиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресамиКлиентСервер");
		Результат = МодульРаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(Тип);
		ОсновнаяСтрана = МодульРаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	Иначе
		Результат = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(Тип);
		ОсновнаяСтрана = "";
	КонецЕсли;
	
	НаименованиеСтраны = "";
	Формат9Запятых = Ложь;
	ЭлементыАдреса = Новый Соответствие;
	
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнформация) Тогда
			
			РезультатПреобразования = Новый Структура;
			XDTOКонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип, РезультатПреобразования, Представление);
			Результат.Value   = XDTOКонтактнаяИнформация.Представление;
			Результат.Comment = XDTOКонтактнаяИнформация.Комментарий;
		Иначе
			Если СтрЧислоВхождений(КонтактнаяИнформация, ",") = 9 Тогда
				Формат9Запятых = Истина;
				АдресРФ        = КонтактнаяИнформация;
			Иначе
				XDTOКонтактнаяИнформация      = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип);
				Результат.Value          = XDTOКонтактнаяИнформация.Представление;
				Результат.Comment        = XDTOКонтактнаяИнформация.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
		
		XDTOКонтактнаяИнформация = КонтактнаяИнформация;
		Результат.Value          = XDTOКонтактнаяИнформация.Представление;
		Результат.Comment        = XDTOКонтактнаяИнформация.Комментарий;
		
	КонецЕсли;
	
	Если Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес И Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ Формат9Запятых Тогда
		
		ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
		Состав = XDTOКонтактнаяИнформация.Состав;
		
		Если Состав = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		XDTOТип = Состав.Тип();
		
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			
			Результат.Вставить("Country", Состав.Страна);
			Страна = ?(ПустаяСтрока(Состав.Страна),
					ОсновнаяСтрана,
					Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина));
			НаименованиеСтраны = Страна.Наименование;
			Результат.Вставить("CountryCode", СокрЛП(Страна.Код));
			
			АдресРФ = Состав.Состав;
			
		ИначеЕсли 
			XDTOТип = ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен(), "НомерТелефона")
			Или XDTOТип = ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен(), "НомерФакса") Тогда
			
			Результат.CountryCode = Состав.КодСтраны;
			Результат.AreaCode    = Состав.КодГорода;
			Результат.Number      = Состав.Номер;
			Результат.ExtNumber   = Состав.Добавочный;
			
			Возврат Результат;
			
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = Состав;
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Если АдресРФ = Неопределено Тогда
			Возврат Результат;
		ИначеЕсли ТипЗнч(АдресРФ) = Тип("Строка") Тогда
			
			Если СтрЧислоВхождений(АдресРФ, ",") = 9 Тогда
				
				Если УправлениеКонтактнойИнформацией.ЭтоСтранаУчастникЕАЭС(Результат.Country) Тогда
					Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресЕАЭС();
				Иначе
					Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
				КонецЕсли;
				
				ЧастиАдреса = СтрРазделить(АдресРФ, ",");
				Результат.ZIPCode = ЧастиАдреса[1];
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[2]);
				Результат.Area     = НаименованиеСокращение.Наименование;
				Результат.AreaType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[3]);
				Результат.District     = НаименованиеСокращение.Наименование;
				Результат.DistrictType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[4]);
				Результат.City         = НаименованиеСокращение.Наименование;
				Результат.CityType     = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[5]);
				Результат.Locality     = НаименованиеСокращение.Наименование;
				Результат.LocalityType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[6]);
				Результат.Street       = НаименованиеСокращение.Наименование;
				Результат.StreetType   = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[7]);
				Результат.HouseNumber  = НаименованиеСокращение.Сокращение;
				Результат.HouseType    = НаименованиеСокращение.Наименование;
				
				Если ЗначениеЗаполнено(ЧастиАдреса[8]) Тогда
					НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[8]);
					Результат.Buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
						НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЧастиАдреса[9]) Тогда
					НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[9]);
					Результат.Apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
						НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(АдресРФ.Адрес_по_документу) Тогда
				Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме();
			Иначе
				Результат.AddressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
			КонецЕсли;
			
			Результат.Country = НаименованиеСтраны;
			Результат.ZIPCode = Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(АдресРФ);
			Результат.OKTMO = Формат(АдресРФ.ОКТМО, "ЧГ=0");
			Результат.OKATO = Формат(АдресРФ.ОКАТО, "ЧГ=0");
			
			СубъектРФ = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.СубъектРФ);
			Результат.Area     = Строка(СубъектРФ.Наименование);
			Результат.AreaType = Строка(СубъектРФ.Сокращение);
			
			РайонАдреса = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(РайонАдреса(АдресРФ));
			Результат.District     = Строка(РайонАдреса.Наименование);
			Результат.DistrictType = Строка(РайонАдреса.Сокращение);
			
			Город = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.Город);
			Результат.City     = Строка(Город.Наименование);
			Результат.CityType = Строка(Город.Сокращение);
			
			НаселПункт = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.НаселПункт);
			Результат.Locality     = Строка(НаселПункт.Наименование);
			Результат.LocalityType = Строка(НаселПункт.Сокращение);
			
			Улица = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.Улица);
			Результат.Street     = Строка(Улица.Наименование);
			Результат.StreetType = Строка(Улица.Сокращение);
			
			ВнутригРайон = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.ВнутригРайон);
			Результат.CityDistrict     = Строка(ВнутригРайон.Наименование);
			Результат.CityDistrictType = Строка(ВнутригРайон.Сокращение);
			
			ЗначениеДополнительныхЭлементов = Обработки.РасширенныйВводКонтактнойИнформации.ЗначениеДополнительныхЭлементов(АдресРФ);
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент) Тогда
				ДополнительныйЭлемент = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент);
				Результат.Territory     = Строка(ДополнительныйЭлемент.Наименование);
				Результат.TerritoryType = Строка(ДополнительныйЭлемент.Сокращение);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент) Тогда
				ПодчиненныйЭлемент = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент);
				Результат.Street     = Строка(ПодчиненныйЭлемент.Наименование);
				Результат.StreetType = Строка(ПодчиненныйЭлемент.Сокращение);
			КонецЕсли;
			
			ЗданияИПомещения = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(АдресРФ);
			Для каждого Здание Из ЗданияИПомещения.Здания Цикл
				Если Здание.Вид = 1 Тогда
					Результат.HouseType = Здание.Тип;
					Результат.HouseNumber = Здание.Значение;
				Иначе
					Результат.Buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(Здание.Тип, Здание.Значение));
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Помещение Из ЗданияИПомещения.Помещения Цикл
				Результат.Apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(Помещение.Тип, Помещение.Значение));
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(РаботаСАдресами.ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат УправлениеКонтактнойИнформацией.ПолучитьXDTOРеквизитОбъекта(АдресРФ, РаботаСАдресамиКлиентСервер.XPathРайона());
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

// Возвращает список всех регионов адресного классификатора.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//      * КодСубъектаРФ - Число                   - Код региона.
//      * Идентификатор - УникальныйИдентификатор - Идентификатор региона.
//      * Представление - Строка                  - Наименование и сокращение региона.
//      * Загружено     - Булево                  - Истина, если классификатор по данному региону сейчас загружен.
//      * ДатаВерсии    - Дата                    - UTC версия загруженных данных.
//   Неопределено    - если нет подсистемы адресного классификатора.
// 
Функция ВсеРегионы()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.СведенияОЗагрузкеСубъектовРФ();
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента = ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);
	Возврат ДопАдрЭлемента;
КонецФункции

// Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка, Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Возврат МодульАдресныйКлассификатор.НаименованиеРегионаПоКоду(Код);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
Функция СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры)
	Результат = Новый Массив;
	Для каждого Адрес Из Адреса Цикл
		Результат.Добавить(СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает сведения об адресе в виде отдельных частей адреса и различных кодов (код региона, ОКТМО и др.).
//
// Параметры:
//   Адрес                  - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO пакету Адрес.
//                          - ОбъектXDTO - XDTO объект, соответствующий XDTO пакету Адрес.
//   ДополнительныеПараметры - Структура - для уточнения возвращаемого значения:
//       * БезПредставлений - Булево - Если Истина, то поле Представление будет отсутствовать. По умолчанию, Ложь.
//       * КодыКЛАДР        - Булево - Если Истина, то возвращается структура КодыКЛАДР. По умолчанию, Ложь.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращается полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// ,      * ВключатьСтрануВПредставление - Булево - Если Истина, то представление включает наименование страны.
//       * ПроверитьАдрес   - Булево - Если Истина, то адрес будет проверен на соответствие ФИАС.
//
// Возвращаемое значение:
//   Структура - сведения об адресе:
//        * Представление    - Строка - текстовое представление адреса по административно-территориальному делению.
//        * МуниципальноеПредставление - Строка - текстовое представление адреса по муниципальному делению.
//        * ТипАдреса        - Строка - основной тип адреса (только для адресов РФ).
//                                      Варианты: "Муниципальный", "Административно-территориальный".
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * КодРегиона       - Строка - код региона РФ.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа (устарело).
//        * ОкругСокращение  - Строка - сокращение округа (устарело).
//        * Район            - Строка - текстовое представление района у адресов по административно-территориальному делению.
//        * РайонСокращение  - Строка - сокращение района у адресов по административно-территориальному делению.
//        * МуниципальныйРайон - Строка - текстовое представление муниципального района у адресов по муниципальному делению.
//        * МуниципальныйРайонСокращение - Строка - сокращение муниципального района у адресов по муниципальному делению.
//        * Город            - Строка - текстовое представление города у адресов по административно-территориальному делению.
//        * ГородСокращение  - Строка - сокращение города  у адресов по административно-территориальному делению.
//        * Поселение            - Строка - текстовое представление поселения у адресов по муниципальному делению.
//        * ПоселениеСокращение  - Строка - сокращение поселения у адресов по муниципальному делению.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района.
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Территория            - Строка - текстовое представление территории.
//        * ТерриторияСокращение  - Строка - сокращение территории.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории (устарело).
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории (устарело).
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории (устарело).
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории (устарело).
//        * Здание - Структура - структура с информацией о здании адреса.
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N
//                                     171н.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - Идентификационный код последнего адресного объекта
//                                        в иерархи адреса. Например, для адреса: Москва г., Дмитровское ш., д.9 это
//                                        будет идентификатор улицы.
//        * ИдентификаторДома             - УникальныйИдентификатор - Идентификационный код дома(строения) адресного объекта.
//        * Идентификаторы - Структура - Идентификаторы адресных объектов адреса.
//            ** РегионИдентификатор - УникальныйИдентификатор - идентификатор региона.
//            ** РайонИдентификатор - УникальныйИдентификатор - идентификатор района.
//            ** МуниципальныйРайонИдентификатор - УникальныйИдентификатор - идентификатор муниципального района.
//            ** ГородИдентификатор - УникальныйИдентификатор - идентификатор города.
//            ** ПоселениеИдентификатор - УникальныйИдентификатор - идентификатор поселения.
//            ** ВнутригородскойРайонИдентификатор - УникальныйИдентификатор - идентификатор внутригородского района.
//            ** ТерриторияИдентификатор - УникальныйИдентификатор - идентификатор территории.
//            ** ТерриторияИдентификатор - УникальныйИдентификатор - идентификатор территории.
//            ** УлицаИдентификатор      - УникальныйИдентификатор - идентификатор улица.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - Код КЛАДР региона.
//           ** Район           - Строка    - Код КЛАДР район.
//           ** Город           - Строка    - Код КЛАДР города.
//           ** НаселенныйПункт - Строка    - Код КЛАДР населенного пункта.
//           ** Улица           - Строка    - Код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
//        * РезультатПроверкиАдреса - Строка - "Успех", если адрес корректный, "Ошибка" - при наличии ошибок проверки,
//                                             "Отказ", если не удалось проверить адрес, т.к. не доступен классификатор.
//                                             Пустая строка, если в параметре ДополнительныеПараметры.ПроверитьАдрес не
//                                             установлен флаг ПроверитьАдрес.
//        * ОшибкиПроверкиАдреса - Строка  - описание ошибок в адресе, выявленных в ходе проверки.
//
Функция СведенияОбАдресеВВидеСтруктуры(Знач АдресСтрокой, ДополнительныеПараметры)
	
	Результат = Новый Структура();
	
	Параметры = Новый Структура();
	Параметры.Вставить("БезПредставлений",               Ложь);
	Параметры.Вставить("НаименованиеВключаетСокращение", Ложь);
	Параметры.Вставить("КодыКЛАДР",                      Ложь);
	Параметры.Вставить("ПолноеНаименованиеСокращений",   Ложь);
	Параметры.Вставить("ПроверитьАдрес",                 Ложь);
	Параметры.Вставить("ВключатьСтрануВПредставление",   Ложь);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ДополнительныеПараметры);
	КонецЕсли;
	
	СоответствиеСокращений = Новый Соответствие;
	
	Если НЕ (ТипЗнч(АдресСтрокой) = Тип("Структура") И АдресСтрокой.Свойство("Value")) Тогда
		
		Если НЕ УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресСтрокой) Тогда
			АдресСтрокой = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресСтрокой, Перечисления.ТипыКонтактнойИнформации.Адрес);
		КонецЕсли;
		
	КонецЕсли;
	
	Адрес = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(АдресСтрокой);
	
	Если ПустаяСтрока(Адрес.ID) Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Адрес);
		КонецЕсли;
		
	КонецЕсли;
	
	// Основные сведения
	Результат.Вставить("Индекс",      Адрес.ZipCode);
	Результат.Вставить("ТипАдреса",   Адрес.AddressType);
	Результат.Вставить("Страна",      Адрес.Country);
	Результат.Вставить("КодСтраны",   Адрес.CountryCode);
	Результат.Вставить("Комментарий", Адрес.Comment);
	
	ЭтоНациональныйАдрес = ?(СтрСравнить(Адрес.Country, РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование) = 0, Истина, Ложь);
	КодРегиона = ?(ЭтоНациональныйАдрес, КодРегиона(Адрес["Area"] + " " +Адрес["AreaType"]), "");
	Результат.Вставить("КодРегиона", КодРегиона);
	
	// Обратная совместимость, уровни устарели.
	Результат.Вставить("Округ", "");
	Результат.Вставить("ОкругСокращение", "");
	Результат.Вставить("ДополнительнаяТерритория", "");
	Результат.Вставить("ДополнительнаяТерриторияСокращение", "");
	Результат.Вставить("ЭлементДополнительнойТерритории", "");
	Результат.Вставить("ЭлементДополнительнойТерриторииСокращение", "");
	
	СоответствиеУровней = Новый Соответствие;
	СоответствиеУровней.Вставить("Area",         Новый Структура("Имя, Уровень", "Регион", 1));
	СоответствиеУровней.Вставить("District",     Новый Структура("Имя, Уровень", "Район", 3));
	СоответствиеУровней.Вставить("MunDistrict",  Новый Структура("Имя, Уровень", "МуниципальныйРайон", 31));
	СоответствиеУровней.Вставить("City",         Новый Структура("Имя, Уровень", "Город", 4));
	СоответствиеУровней.Вставить("Settlement",   Новый Структура("Имя, Уровень", "Поселение", 41));
	СоответствиеУровней.Вставить("CityDistrict", Новый Структура("Имя, Уровень", "ВнутригородскойРайон", 5));
	СоответствиеУровней.Вставить("Locality",     Новый Структура("Имя, Уровень", "НаселенныйПункт", 6));
	СоответствиеУровней.Вставить("Territory",    Новый Структура("Имя, Уровень", "Территория", 65));
	СоответствиеУровней.Вставить("Street",       Новый Структура("Имя, Уровень", "Улица", 7));
	
	Идентификаторы = Новый Структура();
	Результат.Вставить("Идентификаторы", Идентификаторы);
	
	ИдентификаторАдресногоОбъекта = "";
	МаксимальныйУровеньИдентификатора = 0;
	Для каждого ЧастьАдреса Из СоответствиеУровней Цикл
		
		ИдентификаторТекущегоУровня = Адрес[ЧастьАдреса.Ключ + "ID"];
		
		Сокращение = Адрес[ЧастьАдреса.Ключ + "Type"];
		НаименованиеУровня = ?(Параметры.НаименованиеВключаетСокращение, СокрЛП(Адрес[ЧастьАдреса.Ключ] + " " + Сокращение),
			Адрес[ЧастьАдреса.Ключ]);
		
		Результат.Вставить(ЧастьАдреса.Значение.Имя, НаименованиеУровня);
		Результат.Вставить(ЧастьАдреса.Значение.Имя + "Сокращение", Сокращение);
		СоответствиеСокращений.Вставить(ЧастьАдреса.Значение.Уровень, Сокращение);
		
		Идентификаторы.Вставить(ЧастьАдреса.Значение.Имя + "Идентификатор", ИдентификаторТекущегоУровня);
		
		УровеньИдентификатора = ?(ЧастьАдреса.Значение.Уровень < 10, ЧастьАдреса.Значение.Уровень * 10, ЧастьАдреса.Значение.Уровень);
		Если ЗначениеЗаполнено(ИдентификаторТекущегоУровня) И МаксимальныйУровеньИдентификатора < УровеньИдентификатора Тогда
			ИдентификаторАдресногоОбъекта = ИдентификаторТекущегоУровня;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("ИдентификаторАдресногоОбъекта", ИдентификаторАдресногоОбъекта);
	
	// Установка полных сокращений, если определен параметр.
	Если Параметры.ПолноеНаименованиеСокращений  = Истина Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			МодульАдресныйКлассификаторСлужебный.ПолныеНаименованияСокращений(СоответствиеСокращений);
			
			Для каждого ЧастьАдреса Из СоответствиеУровней Цикл
				
				Результат.Вставить(ЧастьАдреса.Значение.Имя + "Сокращение", СоответствиеСокращений[ЧастьАдреса.Значение.Уровень]);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// Дома, здания, строения
	Результат.Вставить("Здание", Новый Структура("ТипЗдания, Номер"));
	Результат.Вставить("Корпуса", Новый Массив);
	Результат.Вставить("Помещения", Новый Массив);
	
	Результат.Здание.Вставить("ТипЗдания", Адрес.HouseType);
	Результат.Здание.Вставить("Номер",     Адрес.HouseNumber);
	
	Для каждого Корпус Из Адрес.Buildings Цикл
		Результат.Корпуса.Добавить(Новый Структура("ТипКорпуса, Номер", Корпус.Type, Корпус.Number));
	КонецЦикла;
	
	Для каждого Корпус Из Адрес.Apartments Цикл
		Результат.Помещения.Добавить(Новый Структура("ТипПомещения, Номер", Корпус.Type, Корпус.Number));
	КонецЦикла;
	
	Результат.Вставить("ИдентификаторДома", "");
	
	РезультатПроверкиАдреса = "";
	СписокОшибок            = "";
	
	Если ЭтоНациональныйАдрес Тогда
		
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			ДополнительныеКоды = МодульАдресныйКлассификаторСлужебный.КодыАдресаИКодыКЛАДР(Адрес, ИдентификаторАдресногоОбъекта);
			Результат.Вставить("ДополнительныеКоды", ДополнительныеКоды.КодыАдреса);
			Если Параметры.КодыКЛАДР Тогда
				Результат.Вставить("КодыКЛАДР", ДополнительныеКоды.КодыКЛАДР);
			КонецЕсли;
		Иначе
			ЗаполнитьКодыАдреса(Результат, Адрес);
		КонецЕсли;
		
		Если Параметры.ПроверитьАдрес Тогда
			
			РезультатПроверки = ПроверитьАдрес(Адрес);
			
			Если РезультатПроверки.Результат = "Корректный" Тогда
				РезультатПроверкиАдреса = "Успех";
			ИначеЕсли РезультатПроверки.Результат = "СодержитОшибки" Тогда
				РезультатПроверкиАдреса = "Ошибка";
				СписокОшибок = РезультатПроверки.СписокОшибок;
			Иначе
				РезультатПроверкиАдреса = "Отказ";
				СписокОшибок = РезультатПроверки.СписокОшибок;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить("РезультатПроверкиАдреса", РезультатПроверкиАдреса);
		Результат.Вставить("ОшибкиПроверкиАдреса", СписокОшибок);
		
		
	КонецЕсли;
	
	Если Не Параметры.БезПредставлений Тогда
		
		Результат.Вставить("Представление" , РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(Адрес,
			Параметры.ВключатьСтрануВПредставление, РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес()));
		
		Результат.Вставить("МуниципальноеПредставление", РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(Адрес,
			Параметры.ВключатьСтрануВПредставление, РаботаСАдресамиКлиентСервер.МуниципальныйАдрес()));
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейСлужебный.ЗаменитьВСтруктуреНеопределеноНаПустуюСтроку(Результат);
	
	Возврат Результат;
	
КонецФункции

// Возвращает код региона по его полному наименованию.
//
//  Параметры:
//      НаименованиеРегиона - Строка - полное наименование региона с сокращением.
//
// Возвращаемое значение:
//      Строка - код региона из двух цифр. Пустая строка, если наименование определить не удалось.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция КодРегиона(Знач ПолноеНаименование) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Код = МодульАдресныйКлассификатор.КодРегионаПоНаименованию(ПолноеНаименование);
		Возврат Формат(Код, "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет коды по структуре адреса.
//
Процедура ЗаполнитьКодыАдреса(Результат, Адрес)
	
	ДополнительныеКоды = Новый Структура();
	ДополнительныеКоды.Вставить("ОКТМО", "");
	ДополнительныеКоды.Вставить("ОКАТО", "");
	ДополнительныеКоды.Вставить("КодИФНСФЛ", "");
	ДополнительныеКоды.Вставить("КодИФНСЮЛ", "");
	ДополнительныеКоды.Вставить("КодУчасткаИФНСФЛ", "");
	ДополнительныеКоды.Вставить("КодУчасткаИФНСЮЛ", "");
	ДополнительныеКоды.Вставить("ИдентификаторДома", "");
	ДополнительныеКоды.Вставить("КодУчасткаИФНСЮЛ", "");
	
	Результат.Вставить("ДополнительныеКоды", ДополнительныеКоды);

	УстановитьЗначенияПоля(Результат, Адрес, "ОКТМО", "OKTMO");
	УстановитьЗначенияПоля(Результат, Адрес, "ОКАТО", "OKATO");
	УстановитьЗначенияПоля(Результат, Адрес, "КодИФНСФЛ", "IFNSFLCode");
	УстановитьЗначенияПоля(Результат, Адрес, "КодИФНСЮЛ", "IFNSULCode");
	УстановитьЗначенияПоля(Результат, Адрес, "КодУчасткаИФНСФЛ", "IFNSFLAreaCode");
	УстановитьЗначенияПоля(Результат, Адрес, "КодУчасткаИФНСЮЛ", "IFNSULAreaCode");
	УстановитьЗначенияПоля(Результат, Адрес, "ИдентификаторДома", "HouseID");
	
	КодКЛАДР = "";
	Если Адрес.Свойство("CodeKLADR") И ЗначениеЗаполнено(Адрес.CodeKLADR) Тогда
		КодКЛАДР = Адрес.CodeKLADR;
	КонецЕсли;
	Результат.Вставить("КодыКЛАДР", ОпределитьКодыКодыКЛАДР(Адрес, КодКЛАДР));
	
КонецПроцедуры

Процедура УстановитьЗначенияПоля(Приемник, Источник, ИмяПоляПриемник, ИмяПоляИсточник)
	Если Источник.Свойство(ИмяПоляИсточник) Тогда
		Значение = ?(ЗначениеЗаполнено(Источник), Источник[ИмяПоляИсточник], ""); // Неопределено, Null и др. в пустую строку
	КонецЕсли;
	Приемник[ИмяПоляПриемник] = Значение;
КонецПроцедуры

// Заполняет коды по структуре адреса.
//
Функция ОпределитьКодыКодыКЛАДР(Адрес, Знач КодКЛАДР)
	
	КодыКЛАДР = Новый Структура();
	КодыКЛАДР.Вставить("Регион",               "");
	КодыКЛАДР.Вставить("Округ",                "");
	КодыКЛАДР.Вставить("Город",                "");
	КодыКЛАДР.Вставить("ВнутригородскойРайон", "");
	КодыКЛАДР.Вставить("НаселенныйПункт",      "");
	КодыКЛАДР.Вставить("Улица",                "");
	
	// Заполнить коды КЛАДР.
	Если ЗначениеЗаполнено(КодКЛАДР) Тогда
		КодКЛАДР = Формат(КодКЛАДР, "ЧРГ=''; ЧГ=0");
		
		Если СтрДлина(КодКЛАДР) = 17 Тогда
			КодыКЛАДР.Улица = КодКЛАДР;
		КонецЕсли;
		КодКЛАДР = Лев(КодКЛАДР, 13);
		
		Если СтрДлина(КодКЛАДР) = 12 Тогда
			КодКЛАДР = "0" + КодКЛАДР;
		КонецЕсли;
		
		Если СтрДлина(КодКЛАДР) = 13 Тогда
			Если ЗначениеЗаполнено(Адрес.Area) Тогда
				КодыКЛАДР.Регион = Лев(КодКЛАДР, 2) + "00000000000";
			КонецЕсли;
			Если ЗначениеЗаполнено(Адрес.District) Тогда
				КодыКЛАДР.Район = Лев(КодКЛАДР, 5) + "00000000";
			КонецЕсли;
			Если ЗначениеЗаполнено(Адрес.City) Тогда
				КодыКЛАДР.Город = Лев(КодКЛАДР, 8) + "00000";
			КонецЕсли;
			Если ЗначениеЗаполнено(Адрес.Settlement) Тогда
				КодыКЛАДР.НаселенныйПункт = Лев(КодКЛАДР, 11) + "00";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодыКЛАДР;
	
КонецФункции


#КонецОбласти
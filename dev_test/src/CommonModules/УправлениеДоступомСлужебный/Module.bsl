#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции.

// Добавляет пользователя в группу доступа, соответствующую поставляемому профилю.
// Группа доступа определяется по идентификатору ссылки поставляемого профиля.
// Если группа доступа не будет найдена, она будет создана.
//
// Параметры:
//  Пользователь        - СправочникСсылка.Пользователи,
//                        СправочникСсылка.ВнешниеПользователи,
//                        СправочникСсылка.ГруппыПользователей,
//                        СправочникСсылка.ГруппыВнешнихПользователей
//                        - участник, которого нужно включить в группу доступа.
// 
//  ПоставляемыйПрофиль - Строка - строка идентификатора поставляемого профиля.
//                      - СправочникСсылка.ПрофилиГруппДоступа - ссылка на профиль, который
//                        создан по описанию в модуле УправлениеДоступомПереопределяемый
//                        в процедуре ЗаполнитьПоставляемыеПрофилиГруппДоступа.
//                        Профили с непустым списком видов доступа не поддерживаются.
//                        Профиль групп доступа Администратор не поддерживается.
// 
Процедура ВключитьПользователяВГруппуДоступа(Пользователь, ПоставляемыйПрофиль) Экспорт
	
	ОбработатьСвязьПользователяСГруппойДоступа(Пользователь, ПоставляемыйПрофиль, Истина);
	
КонецПроцедуры

// Обновляет состав пользователей указанных групп исполнителей.
// 
// Требуется вызывать при изменении состава пользователей у групп исполнителей,
// например, у групп исполнителей задач.
//
// В качестве значений параметра передается группы исполнителей, состав которых изменился.
//
// Параметры:
//  ГруппыИсполнителей - Например, СправочникСсылка.ГруппыИсполнителейЗадач.
//                     - Массив значений указанных выше типов.
//                     - Неопределено - без отбора.
//
Процедура ОбновитьПользователейГруппИсполнителей(ГруппыИсполнителей = Неопределено) Экспорт
	
	Если ТипЗнч(ГруппыИсполнителей) = Тип("Массив") И ГруппыИсполнителей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ГруппыИсполнителей", ГруппыИсполнителей);
	
	РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей(Параметры);
	
КонецПроцедуры

// Проверяет существование вида доступа с указанным именем.
// Применяется для автоматизации условного встраивания подсистем.
// 
Функция ВидДоступаСуществует(ИмяВидаДоступа) Экспорт
	
	Возврат СвойстваВидаДоступа(ИмяВидаДоступа) <> Неопределено;
	
КонецФункции

// Возвращает вид интерфейса пользователя для настройки доступа.
Функция УпрощенныйИнтерфейсНастройкиПравДоступа() Экспорт
	
	УпрощенныйИнтерфейс = Ложь;
	УправлениеДоступомПереопределяемый.ПриОпределенииИнтерфейсаНастройкиДоступа(УпрощенныйИнтерфейс);
	
	Возврат УпрощенныйИнтерфейс = Истина;
	
КонецФункции

// Возвращает массив разрешенных значений указанных типов в рамках всех групп доступа.
// Используется в процедуре НастроитьОтборыДинамическогоСписка для ускорения открытия динамических списков.
// 
// Параметры:
//  Таблица      - Строка - полное имя объекта метаданных, например, "Документ.РасходнаяНакладная".
//  ТипЗначений  - Тип    - тип значений доступа, разрешенные значения которых нужно вернуть.
//               - Массив - массив указанных выше типов.
//
//  Значения     - Неопределено - не учитывать.
//               - Массив - массив значений типов, указанных в параметре ТипЗначений.
//
// Возвращаемое значение:
//  Неопределено - если количество разрешенных значений превышает 100 (когда параметр Значения не определен).
//  Массив       - ссылки разрешенных значений указанных типов.
//
Функция РазрешенныеЗначенияДляДинамическогоСписка(Таблица, ТипЗначений, Значения = Неопределено) Экспорт
	
	Если ТипЗнч(ТипЗначений) <> Тип("Массив") Тогда
		ТипыЗначений = Новый Массив;
		ТипыЗначений.Добавить(ТипЗначений);
		
	ИначеЕсли ТипЗначений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		ТипыЗначений = ТипЗначений;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапросаЗначенийБезГрупп =
	"ВЫБРАТЬ ПЕРВЫЕ 101
	|	ЗначенияБезГрупп.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ЗначениеПустойСсылки КАК Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияБезПустойСсылки.Ссылка
	|	ИЗ
	|		&ТаблицаЗначенийДоступа КАК ЗначенияБезПустойСсылки) КАК ЗначенияБезГрупп
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ГруппыДоступаПользователя КАК ГруппыДоступа
	|			ГДЕ
	|				ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|							ГДЕ
	|								Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|								И Значения.ЗначениеДоступа = ЗначенияБезГрупп.Ссылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|							ГДЕ
	|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(ЗначенияБезГрупп.Ссылка)
	|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|	И ЗначенияБезГрупп.Ссылка В(&Значения)";
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ТекстЗапросаЗначенийБезГрупп = СтрЗаменить(ТекстЗапросаЗначенийБезГрупп, "ПЕРВЫЕ 101", "");
	Иначе
		ТекстЗапросаЗначенийБезГрупп = СтрЗаменить(ТекстЗапросаЗначенийБезГрупп, "ЗначенияБезГрупп.Ссылка В(&Значения)", "Истина");
	КонецЕсли;
	
	ТекстЗапросаЗначенийСГруппами =
	"ВЫБРАТЬ ПЕРВЫЕ 101
	|	ЗначенияСГруппами.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ЗначениеПустойСсылки КАК Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияБезПустойСсылки.Ссылка
	|	ИЗ
	|		&ТаблицаЗначенийДоступа КАК ЗначенияБезПустойСсылки) КАК ЗначенияСГруппами
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ГруппыДоступаПользователя КАК ГруппыДоступа
	|			ГДЕ
	|				ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
	|									ПО
	|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|											И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа
	|											И ГруппыЗначений.ЗначениеДоступа = ЗначенияСГруппами.Ссылка)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ВЫБОР
	|					КОГДА ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|							ГДЕ
	|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(ЗначенияСГруппами.Ссылка)
	|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ)
	|	И ЗначенияСГруппами.Ссылка В(&Значения)";
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ТекстЗапросаЗначенийСГруппами = СтрЗаменить(ТекстЗапросаЗначенийСГруппами, "ПЕРВЫЕ 101", "");
	Иначе
		ТекстЗапросаЗначенийСГруппами = СтрЗаменить(ТекстЗапросаЗначенийСГруппами, "ЗначенияСГруппами.Ссылка В(&Значения)", "Истина");
	КонецЕсли;
	
	ТекстЗапросаВсеЗначения =
	"ВЫБРАТЬ ПЕРВЫЕ 101
	|	ВсеЗначения.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ЗначениеПустойСсылки КАК Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияБезПустойСсылки.Ссылка
	|	ИЗ
	|		&ТаблицаЗначенийДоступа КАК ЗначенияБезПустойСсылки) КАК ВсеЗначения
	|ГДЕ
	|	ВсеЗначения.Ссылка В(&Значения)";
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ТекстЗапросаВсеЗначения = СтрЗаменить(ТекстЗапросаВсеЗначения, "ПЕРВЫЕ 101", "");
	Иначе
		ТекстЗапросаВсеЗначения = СтрЗаменить(ТекстЗапросаВсеЗначения, "ВсеЗначения.Ссылка В(&Значения)", "Истина");
	КонецЕсли;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	ТекстЗапроса = "";
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	ДобавитьТекущегоПользователя = Ложь;
	ЕстьИспользуемыеВидыДоступа = Ложь;
	
	Для Каждого ТекущийТип Из ТипыЗначений Цикл
		Свойства = СвойстваВидовДоступа.ПоТипамЗначений.Получить(ТекущийТип);
		Если Свойства = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип ""%1"" не является типом значений доступа'"), Строка(ТекущийТип));
		КонецЕсли;
		Если Не ВидДоступаИспользуется(Свойства.Имя) Тогда
			ТекущийТекстЗапроса = ТекстЗапросаВсеЗначения;
		Иначе
			Если СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами.Получить(ТекущийТип) = Неопределено Тогда
				ТекущийТекстЗапроса = ТекстЗапросаЗначенийБезГрупп;
			Иначе
				ТекущийТекстЗапроса = ТекстЗапросаЗначенийСГруппами;
			КонецЕсли;
			ЕстьИспользуемыеВидыДоступа = Истина;
		КонецЕсли;
		ТаблицаЗначенийДоступа = Метаданные.НайтиПоТипу(ТекущийТип).ПолноеИмя();
		ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "&ТаблицаЗначенийДоступа", ТаблицаЗначенийДоступа);
		ТекущийТекстЗапроса = СтрЗаменить(ТекущийТекстЗапроса, "&ЗначениеПустойСсылки",
			"ЗНАЧЕНИЕ(" + ТаблицаЗначенийДоступа + ".ПустаяСсылка)");
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			ОбъединитьЗапросСЗапросом(ТекстЗапроса, ТекущийТекстЗапроса);
		Иначе
			ТекстЗапроса = ТекущийТекстЗапроса;
		КонецЕсли;
		Если ТекущийТип = ТипЗнч(АвторизованныйПользователь) Тогда
			ДобавитьТекущегоПользователя = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИспользуемыеВидыДоступа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОсновнойТаблицыСписка", Таблица);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", АвторизованныйПользователь);
	Запрос.Текст = ТекстЗапросаГруппДоступа();
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("Значения", Значения);
	КонецЕсли;
	
	ДобавитьЗапросВПакет(Запрос.Текст, ТекстЗапроса);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(Значения) <> Тип("Массив")
	   И Выгрузка.Количество() > 100 Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	РазрешенныеЗначения = Выгрузка.ВыгрузитьКолонку("Ссылка");
	
	Если ДобавитьТекущегоПользователя Тогда
		РазрешенныеЗначения.Добавить(АвторизованныйПользователь);
	КонецЕсли;
	
	Возврат РазрешенныеЗначения;
	
КонецФункции

// Добавляет администраторов системы в группу доступа,
// связанную с предопределенным профилем ОткрытиеВнешнихОтчетовИОбработок.
//
Процедура УстановитьПравоОткрытияВнешнихОтчетовИОбработок(ОткрытиеРазрешено) Экспорт
	
	СвойстваПрофиля = ОписаниеПрофиляОткрытиеВнешнихОтчетовИОбработок();
	СвойстваПрофиля.Вставить("Ссылка", Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
		СвойстваПрофиля.Имя, Истина));
	
	ИдентификаторРоли = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Роли.ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок);
	
	// В упрощенном интерфейсе группу доступа создавать не требуется (только профиль).
	УпрощенныйИнтерфейс = УпрощенныйИнтерфейсНастройкиПравДоступа();
	Если Не УпрощенныйИнтерфейс Тогда
		ГруппаПрофиля = ГруппаДоступаОткрытиеВнешнихОтчетовИОбработок(СвойстваПрофиля);
	КонецЕсли;
	
	Если ОткрытиеРазрешено Тогда
		// Включение администраторов в группы доступа с этим профилем.
		Если Не УпрощенныйИнтерфейс Тогда
			ГруппаДоступаОбъект = ГруппаПрофиля.ПолучитьОбъект();
		КонецЕсли;
		РольАдминистратора = Метаданные.Роли.АдминистраторСистемы;
		ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ПользовательИБ Из ПользователиИБ Цикл
			Если ПользовательИБ.Роли.Содержит(РольАдминистратора) Тогда
				Пользователь = Справочники.Пользователи.НайтиПоРеквизиту(
					"ИдентификаторПользователяИБ",
					ПользовательИБ.УникальныйИдентификатор);
				Если Пользователь = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если УпрощенныйИнтерфейс Тогда
					// В упрощенном интерфейсе каждый администратор включаются в отдельную группу.
					УправлениеДоступом.ВключитьПрофильПользователю(Пользователь, СвойстваПрофиля.Ссылка);
				Иначе
					// В расширенном интерфейсе администраторы включаются в одну группу, связанную с предопределенным профилем.
					Если ГруппаДоступаОбъект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не УпрощенныйИнтерфейс И ГруппаДоступаОбъект.Модифицированность() Тогда
			ГруппаДоступаОбъект.Записать();
		КонецЕсли;
	Иначе
		// Удаление роли из всех профилей, за исключением предопределенного.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиГруппДоступаРоли.Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Роль = &Роль
		|	И ПрофилиГруппДоступаРоли.Ссылка <> &ИсключаемыйПрофиль";
		Запрос.УстановитьПараметр("Роль", ИдентификаторРоли);
		Запрос.УстановитьПараметр("ИсключаемыйПрофиль", СвойстваПрофиля.Ссылка);
		МассивПрофилей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Профиль Из МассивПрофилей Цикл
			ПрофильОбъект = Профиль.ПолучитьОбъект();
			Найденные = ПрофильОбъект.Роли.НайтиСтроки(Новый Структура("Роль", ИдентификаторРоли));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ПрофильОбъект.Роли.Удалить(СтрокаТаблицы);
			КонецЦикла;
			ПрофильОбъект.Записать();
		КонецЦикла;
		
		// Очистка состава групп доступа, связанных с предопределенным профилем.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступа.Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Профиль = &Профиль";
		Запрос.УстановитьПараметр("Профиль", СвойстваПрофиля.Ссылка);
		МассивГрупп = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого ГруппаДоступа Из МассивГрупп Цикл
			ГруппаДоступаОбъект = ГруппаДоступа.ПолучитьОбъект();
			ГруппаДоступаОбъект.Пользователи.Очистить();
			ГруппаДоступаОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область УниверсальноеОграничение

Функция ОграничиватьДоступНаУровнеЗаписейУниверсально() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ОграничениеДоступаНаУровнеЗаписейУниверсально;
	
КонецФункции

// Возвращает ошибки текстов ограничений доступа объектов без учета зависимостей между объектами.
// Тексты проверяются в режиме максимальных ограничений (как будто включены все виды ограничений).
// Функция должна вызываться перед функцией НастройкиВнедрения, чтобы собрать весь пакет ошибок.
//
// Возвращаемое значение:
//  Массив - со значениями:
//   * Структура - со свойствами:
//      * ПолноеИмя   - Строка - полное имя объекта метаданных.
//      * ТекстОшибки - Строка - текст ошибки в ограничении доступа.
//
Функция ОшибкиОграниченийДоступа() Экспорт
	
	Ошибки = Новый Массив;
	ТекстыОшибок = Новый Соответствие;
	
	ОбщийКонтекст = ОбщийКонтекстРасчетаПараметровОграничения(Истина);
	ОбщийКонтекст.Вставить("ОписанияОграничений", Новый Соответствие);
	
	Для Каждого ОписаниеСписка Из ОбщийКонтекст.СпискиСОграничением Цикл
		ПолноеИмя = ОписаниеСписка.Ключ;
		Попытка
			ТекстОшибки = ОшибкаОграниченияДоступа(ОбщийКонтекст, ПолноеИмя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		Если ЗначениеЗаполнено(ТекстОшибки) И ТекстыОшибок.Получить(ТекстОшибки) = Неопределено Тогда
			ТекстыОшибок.Вставить(ТекстОшибки, Истина);
			Ошибки.Добавить(Новый Структура("ПолноеИмя, ТекстОшибки", ПолноеИмя, ТекстОшибки));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

// Возвращает настройки внедрения для инструментов разработчика.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ОграниченияВРолях - Структура - со свойствами:
//       * ДляПользователей        - Соответствие - со свойствами, как для внешних пользователей (ниже).
//       * ДляВнешнихПользователей - Соответствие - со свойствами:
//           * Ключ     - Строка - полное имя объекта метаданных (списка). Имя коллекции на английском.
//                                 В форме объекта должна вставка ПриЧтенииНаСервере.
//           * Значение - Структура - со свойствами:
//               * ШаблонДляОбъекта - Булево - если Истина, тогда используется шаблон #ДляОбъекта,
//                                             если Ложь,   тогда используется шаблон #ДляРегистра.
//               * Параметры - Массив - параметры шаблона (для объекта 1, для регистра 6).
//                   * Значение - Строка - например, имя поля "Владелец" или
//                                      опорного поля регистра "Организация".
//
//    * ПредопределенныеИдентификаторы - Соответствие - со свойствами:
//        * Ключ     - Строка - имя требуемого предопределенного элемента справочника
//                              ИдентификаторыОбъектовМетаданных или ИдентификаторыОбъектовРасширений
//                              в формате "<ИмяСправочника>.<ИмяПредопределенного>".
//        * Значение - Строка - полное имя соответствующего объекта метаданных.
//
//    * ВладельцыЗначенийКлючейДоступа - Структура - для группы определяемых типов:
//        * Ссылки    - Массив - полные имена типов ссылки  (имя коллекции на английском).
//        * Документы - Массив - полные имена типов объекта (имя коллекции на английском).
//        * Объекты                      - Массив - то же, что в предыдущем пункте.
//        * НаборыЗаписей                - Массив - то же, что в предыдущем пункте.
//        * НаборыЗаписейРегистраРасчета - Массив - то же, что в предыдущем пункте.
//
//    * ЗначенияДоступа - Массив - полные имена типов ссылки (имя коллекции на английском).
//                                 Для дополнения определяемого типа ЗначениеДоступа.
//
//    * ТипыИзмеренийРегистровКлючей - Соответствие - для изменений с именем Поле*
//                          регистра КлючиДоступаКРегистрам и регистров КлючиДоступаКРегистру*.
//           * Ключ     - Строка - полное имя регистра (имя коллекции на английском).
//           * Значение - Массив - со значениями:
//               * Значение - Строка - для регистра сведений КлючиДоступаКРегистрам
//                                     полное имя типа ссылки (имя коллекции на английском).
//               * Значение - Структура - для регистров сведений КлючиДоступаКРегистру* со свойствам:
//                    * Тип  - ОписаниеТипов - типы исходного поля регистра с добавленным обязательным
//                                             типом ПеречислениеСсылка.ДополнительныеЗначенияДоступа.
//                    * Регистр - Строка - полное имя регистра, который ограничивается.
//                    * Поле    - Строка - имя поля регистра, который ограничивается,
//                                         поля соответствуют служебным полям по порядку (Поле1, Поле2, ...).
//
Функция НастройкиВнедрения() Экспорт
	
	ОграниченияВРолях = Новый Структура;
	ОграниченияВРолях.Вставить("ДляПользователей",        Новый Соответствие);
	ОграниченияВРолях.Вставить("ДляВнешнихПользователей", Новый Соответствие);
	
	ВладельцыЗначенийКлючейДоступа = Новый Структура;
	ВладельцыЗначенийКлючейДоступа.Вставить("Ссылки",        Новый Массив);
	ВладельцыЗначенийКлючейДоступа.Вставить("Документы",     Новый Массив);
	ВладельцыЗначенийКлючейДоступа.Вставить("Объекты",       Новый Массив);
	ВладельцыЗначенийКлючейДоступа.Вставить("НаборыЗаписей", Новый Массив);
	ВладельцыЗначенийКлючейДоступа.Вставить("НаборыЗаписейРегистраРасчета", Новый Массив);
	
	ПредопределенныеИдентификаторы = Новый Соответствие;
	ЗначенияДоступа = Новый Массив;
	ТипыИзмеренийРегистровКлючей = Новый Соответствие;
	
	ТипыТаблицПоИменам = СинтаксисЯзыка().ТипыТаблиц.ПоИменам;
	ЗначенияДоступа.Добавить(ИмяТипаСсылкиXML(Метаданные.Справочники.КлючиДоступа.ПолноеИмя(), ТипыТаблицПоИменам));
	
	ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов();
	Для Каждого ОписаниеВозможныхПрав Из ВозможныеПрава.ПоПолнымИменам Цикл
		ЗначенияДоступа.Добавить(ИмяТипаСсылкиXML(ОписаниеВозможныхПрав.Ключ, ТипыТаблицПоИменам));
	КонецЦикла;
	
	ИдентификаторТранзакции = Новый УникальныйИдентификатор;
	ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции,, Истина);
	
	Для Каждого ОписаниеВерсии Из ДействующиеПараметры.ВерсииОграниченийСписков Цикл
		ПолноеИмя = ОписаниеВерсии.Ключ;
		ПолноеИмяXML = ПолноеИмяXML(ПолноеИмя, ТипыТаблицПоИменам);
		ИмяТипаСсылкиXML  = ИмяТипаСсылкиXML(ПолноеИмя, ТипыТаблицПоИменам);
		ИмяТипаОбъектаXML = ИмяТипаОбъектаИлиНабораЗаписейXML(ПолноеИмя, ТипыТаблицПоИменам);
		
		Если ЗначениеЗаполнено(ИмяТипаСсылкиXML) Тогда
			ВладельцыЗначенийКлючейДоступа.Ссылки.Добавить(ИмяТипаСсылкиXML);
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИмяТипаОбъектаXML, "DocumentObject.") Тогда
			ВладельцыЗначенийКлючейДоступа.Документы.Добавить(ИмяТипаОбъектаXML);
			
		ИначеЕсли СтрНачинаетсяС(ИмяТипаОбъектаXML, "CalculationRegisterRecordSet.") Тогда
			ВладельцыЗначенийКлючейДоступа.НаборыЗаписейРегистраРасчета.Добавить(ИмяТипаОбъектаXML);
			
		ИначеЕсли СтрНайти(ИмяТипаОбъектаXML, "RecordSet.") > 0 Тогда
			ВладельцыЗначенийКлючейДоступа.НаборыЗаписей.Добавить(ИмяТипаОбъектаXML);
			
		ИначеЕсли СтрНайти(ИмяТипаОбъектаXML, "Object.") > 0 Тогда
			ВладельцыЗначенийКлючейДоступа.Объекты.Добавить(ИмяТипаОбъектаXML);
		КонецЕсли;
		
		Если ОписаниеВерсии.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОграниченияВРолях(ПолноеИмяXML,
			ПолноеИмя,
			ОграниченияВРолях.ДляПользователей,
			ДействующиеПараметры.ДополнительныйКонтекст.ДляПользователей.СвойстваОграниченияСписков,
			ТипыИзмеренийРегистровКлючей,
			ТипыТаблицПоИменам,
			ПредопределенныеИдентификаторы);
		
		ДобавитьОграниченияВРолях(ПолноеИмяXML,
			ПолноеИмя,
			ОграниченияВРолях.ДляВнешнихПользователей,
			ДействующиеПараметры.ДополнительныйКонтекст.ДляВнешнихПользователей.СвойстваОграниченияСписков,
			ТипыИзмеренийРегистровКлючей,
			ТипыТаблицПоИменам,
			ПредопределенныеИдентификаторы);
	КонецЦикла;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОграниченияВРолях",              ОграниченияВРолях);
	Настройки.Вставить("ПредопределенныеИдентификаторы", ПредопределенныеИдентификаторы);
	Настройки.Вставить("ВладельцыЗначенийКлючейДоступа", ВладельцыЗначенийКлючейДоступа);
	Настройки.Вставить("ЗначенияДоступа",                ЗначенияДоступа);
	Настройки.Вставить("ТипыИзмеренийРегистровКлючей",   ТипыИзмеренийРегистровКлючей);
	
	Возврат Настройки;
	
КонецФункции

// Возвращает структуру указанного текста ограничения для объекта метаданных.
//
// Параметры:
//  ПолноеИмя        - Строка - полное имя объекта метаданных.
//  ТекстОграничения - Строка - текст ограничения, который будет разобран.
//
// Возвращаемое значение:
//  Структура - возвращаемое значение см. УправлениеДоступом.СтруктураОграничения.
//
Функция СтруктураОграниченияИзОписания(ПолноеИмя, ТекстОграничения) Экспорт
	
	Возврат РассчитаннаяСтруктураОграничения(ПолноеИмя, ТекстОграничения, , , Истина);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	Объекты.Вставить(Метаданные.Справочники.ГруппыДоступа.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
	Объекты.Вставить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя(), "РеквизитыНеРедактируемыеВГрупповойОбработке");
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ОграничениеДоступаНаУровнеЗаписейВключено",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ВидыДоступа*",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ВсеВидыДоступаКромеСпециальных",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ТаблицыСОтдельнымиНастройкамиПрав",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ТипыЗначенийДоступаСГруппами",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ТипыВладельцевНастроекПрав",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ИдентификаторыТаблицСОтдельнымиНастройкамиПрав",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	#Область УниверсальноеОграничение
	
	Обработчики.Вставить("ОграничениеДоступаНаУровнеЗаписейУниверсально",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ВерсииШаблоновОграниченияДоступа",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ГруппыДоступаАвторизованногоПользователя",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("СпискиСОграничениемЧерезКлючиДоступа*",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("СпискиСОтключеннымОграничением*",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("СпискиССокращеннымНаборомПолейВРегистрахКлючей",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	Обработчики.Вставить("ПараметрыОграниченияДоступа",
		"УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	
	#КонецОбласти
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Зависимости) Экспорт
	
	Зависимость = Зависимости.Добавить();
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ОграничиватьДоступНаУровнеЗаписей;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.ЗависимостьПоИ = Истина;
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ОграничиватьДоступНаУровнеЗаписейУниверсально;
	
	Зависимость = Зависимости.Добавить();
	Зависимость.ЗависимостьПоИ = Истина;
	Зависимость.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей;
	Зависимость.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ОграничиватьДоступНаУровнеЗаписей;
	
КонецПроцедуры

// Обновляет вспомогательные данные, которые зависят только от конфигурации.
// Записывает изменения этих данных по версиям конфигурации(если изменения есть),
// чтобы использовать эти изменения при обновлении остальных вспомогательных данных,
// например, в обработчике ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации.
//
Процедура ОбновитьПараметрыОграниченияДоступа(ЕстьИзменения = Неопределено) Экспорт
	
	РегистрыСведений.ПраваРолей.ОбновитьДанныеРегистра(ЕстьИзменения);
	
	РегистрыСведений.ЗависимостиПравДоступа.ОбновитьДанныеРегистра(ЕстьИзменения);
	
	ОбновитьОписаниеСвойствВидовДоступа(ЕстьИзменения);
	
	Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения);
	
	Справочники.ПрофилиГруппДоступа.ОбновитьСоставПредопределенныхПрофилей(ЕстьИзменения);
	
	РегистрыСведений.НастройкиПравОбъектов.ОбновитьВозможныеПраваДляНастройкиПравОбъектов(ЕстьИзменения);
	
КонецПроцедуры

// Обновляет описание свойств видов доступа в параметрах работы программы.
// 
// Параметры:
//  ЕстьИзменения - Булево - (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьОписаниеСвойствВидовДоступа(ЕстьИзменения = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваВидовДоступа = СвойстваВидовДоступа();
	
	НачатьТранзакцию();
	Попытка
		ЕстьТекущиеИзменения = Ложь;
		СтароеЗначение = Неопределено;
		
		СтандартныеПодсистемыСервер.ОбновитьПараметрРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.СвойстваВидовДоступа",
			СвойстваВидовДоступа, ЕстьТекущиеИзменения, СтароеЗначение);
		
		ЕстьИзмененияТиповГруппИЗначенийДоступа = ЕстьТекущиеИзменения
			И ЕстьИзмененияТиповГруппИЗначенийДоступа(СвойстваВидовДоступа, СтароеЗначение);
		
		СтандартныеПодсистемыСервер.ДобавитьИзмененияПараметраРаботыПрограммы(
			"СтандартныеПодсистемы.УправлениеДоступом.ТипыГруппИЗначенийДоступа",
			?(ЕстьИзмененияТиповГруппИЗначенийДоступа,
			  Новый ФиксированнаяСтруктура("ЕстьИзменения", Истина),
			  Новый ФиксированнаяСтруктура()) );
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЕстьТекущиеИзменения Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики обновления неразделенных данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.Приоритет = 1;
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаполнитьОбработчикиРазделенныхДанных";
	
	// Обработчики обновления разделенных данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.8";
	Обработчик.Процедура = "РегистрыСведений.УдалитьПраваПоЗначениямДоступа.ПереместитьДанныеВНовыйРегистр";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.8";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ПреобразоватьИменаРолейВИдентификаторы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.8";
	Обработчик.Процедура = "РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.16";
	Обработчик.Процедура = "РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.16";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьРолиПользователей";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.5";
	Обработчик.Процедура = "РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.4.15";
	Обработчик.Процедура = "Справочники.ПрофилиГруппДоступа.ЗаполнитьИдентификаторыПоставляемыхДанных";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	// Должен выполнятся после обработчика ЗаполнитьИдентификаторыПоставляемыхДанных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.1";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "Справочники.ГруппыДоступа.ЗаполнитьПрофильГруппыДоступаАдминистраторы";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "Справочники.ПрофилиГруппДоступа.ПреобразоватьИдентификаторыВидовДоступа";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РегистрыСведений.УдалитьГруппыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РегистрыСведений.НаследованиеНастроекПравОбъектов.ОбновитьДанныеРегистра";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПравОбъектов.ОбновитьВспомогательныеДанныеРегистра";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.15";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ВключитьЗаполнениеДанныхДляОграниченияДоступа";
	Обработчик.РежимВыполнения = "Монопольно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.1.35";
	Обработчик.Процедура = "РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппыПустыхЗначенийДоступа";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.3.27";
	Обработчик.Процедура = "РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.4";
	Обработчик.Процедура = "РегистрыСведений.УдалитьГруппыЗначенийДоступа.ОчиститьРегистр";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.2.5.7";
	Обработчик.Процедура = "УправлениеДоступом.ОбновитьРолиПользователей";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.61";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаполнитьНазначениеПрофилейГруппДоступа";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.1.55";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ЗаменитьУдаленныеРолиВПрофиляхГруппДоступа";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.3.2.23";
	Обработчик.Процедура = "РегистрыСведений.ЗначенияГруппДоступа.ОбновитьДанныеРегистра";
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.1.1";
	Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьДанныеПрофиляОткрытиеВнешнихОтчетовИОбработок";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 1;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.4.4.15";
	Обработчик.Процедура = "Справочники.ГруппыДоступа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Устраняет некорректное скрытие данных в некоторых списках при включенном ограничении на уровне записей.'");
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b73c2481-f789-4b2d-b705-8219aea0e75d");
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена";
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ГруппыДоступа.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЧитаемыеОбъекты = "Справочник.ГруппыДоступа";
	Обработчик.ИзменяемыеОбъекты = "РегистрСведений.ТаблицыГруппДоступа,РегистрСведений.ЗначенияГруппДоступа,РегистрСведений.ЗначенияГруппДоступаПоУмолчанию";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке();
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("УпрощенныйИнтерфейсНастройкиПравДоступа",
		УпрощенныйИнтерфейсНастройкиПравДоступа());
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок.
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.ЗависимостиПравДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступаПоУмолчанию);
	Массив.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваРолей);
	Массив.Добавить(Метаданные.РегистрыСведений.НаследованиеНастроекПравОбъектов);
	Массив.Добавить(Метаданные.РегистрыСведений.НастройкиПравОбъектов);
	Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа);
	
	ПриДобавленииИсключенийПоискаСсылокДопускающихУдаление(Массив);
	
КонецПроцедуры

// Объекты с отложенным удалением.
Процедура ПриДобавленииИсключенийПоискаСсылокДопускающихУдаление(Массив) Экспорт
	
	Массив.Добавить(Метаданные.Справочники.КлючиДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.КлючиДоступаВнешнихПользователей);
	Массив.Добавить(Метаданные.РегистрыСведений.КлючиДоступаГруппДоступа);
	Массив.Добавить(Метаданные.РегистрыСведений.КлючиДоступаКОбъектам);
	Массив.Добавить(Метаданные.РегистрыСведений.КлючиДоступаКРегистрам);
	Массив.Добавить(Метаданные.РегистрыСведений.КлючиДоступаПользователей);
	Массив.Добавить(Метаданные.РегистрыСведений.ОбновлениеКлючейДоступаКДанным);
	Массив.Добавить(Метаданные.РегистрыСведений.ОбновлениеКлючейДоступаПользователей);
	Массив.Добавить(Метаданные.РегистрыСведений.ПараметрыОграниченияДоступа);
	
	Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл 
		Если СтрНачинаетсяС(ВРег(РегистрСведений.Имя), ВРег("КлючиДоступаКРегистру")) Тогда 
			Массив.Добавить(РегистрСведений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при загрузке ссылок предопределенных элементов в процессе загрузки важных данных.
// Позволяет выполнить действия по исправлению или регистрации сведений о не уникальности
// предопределенных элементов, а также позволяет отказаться от продолжения, если это недопустимо.
//
// Параметры:
//   Объект          - СправочникОбъект, ПланВидовХарактеристикОбъект, ПланСчетовОбъект, ПланВидовРасчетаОбъект -
//                     объект предопределенного элемента после записи которого обнаружено наличие не уникальности.
//   ЗаписатьВЖурнал - Булево - возвращаемое значение. Если указать Ложь, тогда сведения о не уникальности не будут
//                     добавлены в журнал регистрации в общем сообщении.
//                     Нужно установить Ложь, если не уникальность была устранена автоматически.
//   Отказ           - Булево - возвращаемое значение. Если указать Истина, будет вызвано общее исключение,
//                     содержащее все причины отказа.
//   ОписаниеОтказа  - Строка - возвращаемое значение. Если Отказ установлен в Истина, то описание будет добавлено
//                     в список причин невозможности продолжения.
//
Процедура ПриОбнаруженииНеУникальностиПредопределенного(Объект, ЗаписатьВЖурнал, Отказ, ОписаниеОтказа) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ПрофилиГруппДоступа")
	   И Объект.ИмяПредопределенныхДанных = "Администратор" Тогда
		
		ЗаписатьВЖурнал = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "Администратор");
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|ГДЕ
		|	ПрофилиГруппДоступа.Ссылка <> &Ссылка
		|	И ПрофилиГруппДоступа.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ИмяПредопределенныхДанных = "";
			ТекущийОбъект.ИдентификаторПоставляемыхДанных = "";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГруппыДоступа")
	        И Объект.ИмяПредопределенныхДанных = "Администраторы" Тогда
		
		ЗаписатьВЖурнал = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", "Администраторы");
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
		ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
		Записать = Ложь;
		Для каждого Пользователь Из ВсеПользователи Цикл
			Если Объект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
				Объект.Пользователи.Добавить().Пользователь = Пользователь;
				Записать = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Ссылка <> &Ссылка
		|	И ГруппыДоступа.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ТекущийОбъект.ИмяПредопределенныхДанных = "";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменДаннымиПереопределяемый.ПриНастройкеПодчиненногоУзлаРИБ.
Процедура ПриНастройкеПодчиненногоУзлаРИБ() Экспорт
	
	// Роли расширений назначаются независимо во всех РИБ-узлах.
	Справочники.ПрофилиГруппДоступа.УдалитьРолиРасширенийВоВсехПрофиляхГруппДоступа();
	
	// Администраторы назначаются независимо во всех РИБ-узлах.
	Справочники.ГруппыДоступа.УдалитьУчастниковГруппыДоступаАдминистраторыБезПользователяИБ();
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофилиПоИзменениямКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхГлавному.
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	Если ОбъектПодсистемыУправлениеДоступомТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	 Или ИмяОбъектаПодсистемыУправлениеДоступомНачинаетсяСУдалить(ЭлементДанных) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
	// Профиль и группа доступа открытия внешних отчетов и обработок
	// недоступны в сервисе, но доступны в автономном рабочем месте.
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
	   И (    ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ПрофилиГруппДоступа")
	        И ЭтоПрофильОткрытиеВнешнихОтчетовИОбработок(ЭлементДанных)
	      Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыДоступа")
	        И Не ЭлементДанных.ЭтоГруппа
	        И ЭтоПрофильОткрытиеВнешнихОтчетовИОбработок(ЭлементДанных.Профиль) ) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;
	
	// Роли расширений назначаются независимо во всех РИБ-узлах.
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		Справочники.ПрофилиГруппДоступа.УдалитьРолиРасширений(ЭлементДанных);
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхПодчиненному.
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	// Роли расширений назначаются независимо во всех РИБ-узлах.
	// Частичное изменение объектов при создании начального образа не поддерживается,
	// удаление ролей расширений см. в процедуре ПриНастройкеПодчиненногоУзлаРИБ.
	
	// Администраторы назначаются независимо во всех РИБ-узлах.
	// Частичное изменение объектов при создании начального образа не поддерживается,
	// очистку состава администраторов см. в процедуре ПриНастройкеПодчиненногоУзлаРИБ.
	
	Если СозданиеНачальногоОбраза Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектПодсистемыУправлениеДоступомТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	 Или ИмяОбъектаПодсистемыУправлениеДоступомНачинаетсяСУдалить(ЭлементДанных) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	// Стандартная обработка не переопределяется.
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектПодсистемыУправлениеДоступомТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	 Или ИмяОбъектаПодсистемыУправлениеДоступомНачинаетсяСУдалить(ЭлементДанных) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
	ПриПолученииДанныхОтГлавногоИлиОтПодчиненного(ЭлементДанных);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	// Стандартная обработка не переопределяется.
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектПодсистемыУправлениеДоступомТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	 Или ИмяОбъектаПодсистемыУправлениеДоступомНачинаетсяСУдалить(ЭлементДанных) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПриПолученииДанныхОтГлавногоИлиОтПодчиненного(ЭлементДанных);
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("КонстантаМенеджерЗначения.ОграничиватьДоступНаУровнеЗаписей")
	      Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыДоступа")
	      Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ПрофилиГруппДоступа")
	      Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа")
	      Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа")
	      Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.НаследованиеНастроекПравОбъектов")
	      Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.НастройкиПравОбъектов") Тогда
		
		// Получение данных из автономного рабочего места пропускается, а для соответствия
		// данных в узлах, текущие данные отправляются обратно в автономное рабочее место.
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		ОтправкаНазад = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПослеПолученияДанных.
Процедура ПослеПолученияДанных(Отправитель, Отказ, ПолучениеИзГлавногоУзла) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке();
	
КонецПроцедуры

// См. описание в процедуре ЗаполнитьВсеПараметрыРаботыРасширений
// модуля менеджера регистра сведений ПараметрыРаботыВерсийРасширений.
//
Процедура ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	
	ОбновитьТаблицыГруппДоступаДляПодключенныхРасширений();
	
КонецПроцедуры

// Обработчики событий подсистемы Пользователи.

// См. ПользователиПереопределяемый.ПриОпределенииНастроек.
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	// Роли устанавливаются автоматически по данным групп доступа
	// через связь: ПользователиГруппыДоступа -> Профиль -> РолиПрофиля.
	Настройки.РедактированиеРолей = Ложь;
	
КонецПроцедуры

// См. ПользователиПереопределяемый.ПриОпределенииДействийВФорме.
Процедура ПриОпределенииДействийВФорме(Ссылка, ДействияВФорме) Экспорт
	
	ДействияВФорме.Роли = "";
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПослеЗаписиАдминистратораПриАвторизации.
Процедура ПослеЗаписиАдминистратораПриАвторизации(Комментарий) Экспорт
	
	Комментарий =
		НСтр("ru = 'Выполнен запуск от имени пользователя с ролью ""Полные права"",
		           |который не зарегистрирован в списке пользователей.
		           |Выполнена автоматическая регистрация в списке пользователей.
		           |Пользователь добавлен в группу доступа Администраторы.
		           |
		           |Для ведения списка и настройки прав пользователей предназначен список Пользователи,
		           |режим конфигурирования 1С:Предприятия для этого использовать не следует.'");
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПослеУстановкиПользователяИБ.
Процедура ПослеУстановкиПользователяИБ(Ссылка, ПарольПользователяСервиса) Экспорт
	
	УправлениеДоступом.ОбновитьРолиПользователей(Ссылка, ПарольПользователяСервиса);
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора.
Процедура ПриОпределенииТекстаВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса) Экспорт
	
	ТекстВопроса =
		НСтр("ru = 'В список пользователей программы добавляется первый пользователь,
		           |поэтому он будет автоматически включен в группу доступа Администраторы. 
		           |Продолжить?'")
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПриСозданииАдминистратора.
Процедура ПриСозданииАдминистратора(Администратор, Уточнение) Экспорт
	
	Если ТипЗнч(Администратор) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Администратор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы)
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийДляЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пользователь ""%1"" добавлен в группу доступа Администраторы по причине:
		           |%2'"),
		Администратор,
		Уточнение);
	
	Объект = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
	
	НачатьТранзакцию();
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, Объект.ВерсияДанных);
		Если Объект.Пользователи.Найти(Администратор, "Пользователь") = Неопределено Тогда
			Объект.Пользователи.Добавить().Пользователь = Администратор;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Управление доступом.Автоматическое изменение группы доступа Администраторы'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.Пользователи,
				Администратор,
				КомментарийДляЖурнала,
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(Объект.Ссылка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы.
Процедура ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый) Экспорт
	
	Если ЭтоНовый Тогда
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			Параметры = Новый Структура;
			Параметры.Вставить("ГруппыПользователей", Ссылка);
			РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей(Параметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПослеОбновленияСоставовГруппПользователей.
Процедура ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Пользователи",        УчастникиИзменений);
	Параметры.Вставить("ГруппыПользователей", ИзмененныеГруппы);
	
	РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей(Параметры);
	
	УправлениеДоступом.ОбновитьРолиПользователей(УчастникиИзменений);
	
КонецПроцедуры

// См. ИнтеграцияПодсистемБСП.ПослеИзмененияОбъектаАвторизацииВнешнегоПользователя.
Процедура ПослеИзмененияОбъектаАвторизацииВнешнегоПользователя(ВнешнийПользователь,
                                                               СтарыйОбъектАвторизации,
                                                               НовыйОбъектАвторизации) Экспорт
	
	ОбъектыАвторизации = Новый Массив;
	Если СтарыйОбъектАвторизации <> NULL Тогда
		ОбъектыАвторизации.Добавить(СтарыйОбъектАвторизации);
	КонецЕсли;
	ОбъектыАвторизации.Добавить(НовыйОбъектАвторизации);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектыАвторизации", ОбъектыАвторизации);
	
	РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей(Параметры);
	
КонецПроцедуры

// Выполняет копировании прав от одного пользователя другому.
Процедура ПриКопированииПравНовомуПользователю(Источник, Приемник) Экспорт
	
	УпрощенныйИнтерфейс = УпрощенныйИнтерфейсНастройкиПравДоступа();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Источник);
	
	Если УпрощенныйИнтерфейс Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	(ГруппыДоступаПользователи.Пользователь = &Пользователь
		|			ИЛИ ГруппыДоступаПользователи.Пользователь В
		|				(ВЫБРАТЬ
		|					СоставыГруппПользователей.ГруппаПользователей
		|				ИЗ
		|					РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|				ГДЕ
		|					СоставыГруппПользователей.Пользователь = &Пользователь))";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	(ГруппыДоступаПользователи.Пользователь = &Пользователь
		|			ИЛИ ГруппыДоступаПользователи.Пользователь В
		|				(ВЫБРАТЬ
		|					СоставыГруппПользователей.ГруппаПользователей
		|				ИЗ
		|					РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|				ГДЕ
		|					СоставыГруппПользователей.Пользователь = &Пользователь))";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не УпрощенныйИнтерфейс Тогда
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если УпрощенныйИнтерфейс Тогда
			Пока Выборка.Следующий() Цикл
				УправлениеДоступом.ВключитьПрофильПользователю(Приемник, Выборка.Профиль);
			КонецЦикла;
		Иначе
			Блокировка.Заблокировать();
			Пока Выборка.Следующий() Цикл
				ГруппаДоступаОбъект = Выборка.ГруппаДоступа.ПолучитьОбъект();
				Если ГруппаДоступаОбъект.Пользователи.Найти(Приемник, "Пользователь") = Неопределено Тогда
					Строка = ГруппаДоступаОбъект.Пользователи.Добавить();
					Строка.Пользователь = Приемник;
					ГруппаДоступаОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчики событий подсистемы ВариантыОтчетов.

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
Процедура ПриНастройкеВариантовОтчетов(Настройки) Экспорт
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	МодульВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ПраваДоступа);
КонецПроцедуры

// Обработчики событий подсистемы УправлениеДоступом.

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.ПрофилиГруппДоступа, Истина);
	Списки.Вставить(Метаданные.Справочники.ГруппыДоступа, Истина);
	
КонецПроцедуры

// Обработчики событий библиотеки ТехнологияСервиса.

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке.
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// В разделенных данных используются ссылки только на предопределенные элементы
	// плана видов характеристик УдалитьВидыДоступа.
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.УдалитьВидыДоступа);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.ПланыВидовХарактеристик.УдалитьВидыДоступа);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.
Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт
	МодульВыгрузкаЗагрузкаДанныхСлужебныйСобытия = ОбщегоНазначения.ОбщийМодуль("ВыгрузкаЗагрузкаДанныхСлужебныйСобытия");
	
	Обработчик = ТаблицаОбработчиков.Добавить();
	Обработчик.ОбъектМетаданных = Метаданные.Справочники.ПрофилиГруппДоступа;
	Обработчик.Обработчик = Справочники.ПрофилиГруппДоступа;
	Обработчик.ПередВыгрузкойОбъекта = Истина;
	Обработчик.Версия = МодульВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
	
	Обработчик = ТаблицаОбработчиков.Добавить();
	Обработчик.ОбъектМетаданных = Метаданные.Справочники.ГруппыДоступа;
	Обработчик.Обработчик = Справочники.ГруппыДоступа;
	Обработчик.ПередВыгрузкойОбъекта = Истина;
	Обработчик.Версия = МодульВыгрузкаЗагрузкаДанныхСлужебныйСобытия.ВерсияОбработчиков1_0_0_1();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.
Процедура ПередВыгрузкойОбъекта(Контейнер, МенеджерВыгрузкиОбъекта, Сериализатор, Объект, Артефакты, Отказ) Экспорт
	
	// Роли расширений назначаются независимо в коробке и в сервисе.
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		Справочники.ПрофилиГруппДоступа.УдалитьРолиРасширений(Объект);
	КонецЕсли;
	
	// В модели сервиса право открытия внешних отчетов и обработок не используется для пользователей областей данных,
	// поэтому проверка применяется только при переходе Коробка -> Сервис.
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		Профиль = Объект;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ГруппыДоступа") И Не Объект.ЭтоГруппа Тогда
		Профиль = Объект.Профиль;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтоПрофильОткрытиеВнешнихОтчетовИОбработок(Профиль) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	#Область УниверсальноеОграничение
	Если ИмяПараметра = "ПараметрыОграниченияДоступа" Тогда
		ПараметрыСеанса.ПараметрыОграниченияДоступа = Новый ФиксированнаяСтруктура(Новый Структура);
		УстановленныеПараметры.Добавить("ПараметрыОграниченияДоступа");
		Возврат;
	КонецЕсли;
	
	УниверсальноеОграничение = Константы.ОграничиватьДоступНаУровнеЗаписейУниверсально.Получить();
	
	ПараметрыСеанса.ОграничениеДоступаНаУровнеЗаписейУниверсально = УниверсальноеОграничение;
	УстановленныеПараметры.Добавить("ОграничениеДоступаНаУровнеЗаписейУниверсально");
	Если ИмяПараметра = "ОграничениеДоступаНаУровнеЗаписейУниверсально" Тогда
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	// Для корректной работы препроцессора в ограничениях доступа, требуется инициализации всех
	// параметров сеанса, которые могут быть востребованы в работе препроцессора.
	ОграничиватьДоступНаУровнеЗаписей = Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	
	ИнформационнаяБазаЗаблокированаДляОбновления = ЗначениеЗаполнено(
		ОбновлениеИнформационнойБазыСлужебный.ИнформационнаяБазаЗаблокированаДляОбновления(Ложь));
	
	#Область УниверсальноеОграничение
	Если Не ОграничиватьДоступНаУровнеЗаписей
	 Или Не УниверсальноеОграничение
	 Или ИнформационнаяБазаЗаблокированаДляОбновления Тогда
		
		ПараметрыСеанса.СпискиСОтключеннымОграничениемЧтения =
			?(ИнформационнаяБазаЗаблокированаДляОбновления
				Или Не УниверсальноеОграничение, "Неопределено", "Все");
		
		ПараметрыСеанса.ВерсииШаблоновОграниченияДоступа = ВерсииШаблоновОграниченияДоступа();
		ПараметрыСеанса.ГруппыДоступаАвторизованногоПользователя = Новый ФиксированныйМассив(Новый Массив);
		ПараметрыСеанса.СпискиСОграничениемЧерезКлючиДоступаГруппДоступа = "";
		ПараметрыСеанса.СпискиСОграничениемЧерезКлючиДоступаПользователей = "";
		ПараметрыСеанса.СпискиСОграничениемЧерезКлючиДоступаПользователейИГруппДоступа = "";
		ПараметрыСеанса.СпискиСОтключеннымОграничениемПоПолям = "";
		ПараметрыСеанса.СпискиССокращеннымНаборомПолейВРегистрахКлючей = "";
		
		УстановленныеПараметры.Добавить("СпискиСОтключеннымОграничениемЧтения");
		УстановленныеПараметры.Добавить("ВерсииШаблоновОграниченияДоступа");
		УстановленныеПараметры.Добавить("ГруппыДоступаАвторизованногоПользователя");
		УстановленныеПараметры.Добавить("СпискиСОграничениемЧерезКлючиДоступаГруппДоступа");
		УстановленныеПараметры.Добавить("СпискиСОграничениемЧерезКлючиДоступаПользователей");
		УстановленныеПараметры.Добавить("СпискиСОграничениемЧерезКлючиДоступаПользователейИГруппДоступа");
		УстановленныеПараметры.Добавить("СпискиСОтключеннымОграничениемПоПолям");
		УстановленныеПараметры.Добавить("СпискиССокращеннымНаборомПолейВРегистрахКлючей");
	КонецЕсли;
	#КонецОбласти
	
	Если Не ОграничиватьДоступНаУровнеЗаписей
	 Или УниверсальноеОграничение
	 Или ИнформационнаяБазаЗаблокированаДляОбновления Тогда
		
		ПараметрыСеанса.ОграничениеДоступаНаУровнеЗаписейВключено =
			?(ИнформационнаяБазаЗаблокированаДляОбновления
				Или УниверсальноеОграничение, "", Ложь);
		
		ПараметрыСеанса.ВсеВидыДоступаКромеСпециальных             = "";
		ПараметрыСеанса.ВидыДоступаСОтключеннымИспользованием      = "";
		ПараметрыСеанса.ВидыДоступаБезГруппДляЗначенияДоступа      = "";
		ПараметрыСеанса.ВидыДоступаСОднойГруппойДляЗначенияДоступа = "";
		
		ПараметрыСеанса.ТипыЗначенийДоступаСГруппами
			= Новый ФиксированныйМассив(Новый Массив);
		
		ПараметрыСеанса.ТаблицыСОтдельнымиНастройкамиПрав          = "";
		
		ПараметрыСеанса.ИдентификаторыТаблицСОтдельнымиНастройкамиПрав
			= Новый ФиксированныйМассив(Новый Массив);
		
		ПараметрыСеанса.ТипыВладельцевНастроекПрав
			= Новый ФиксированныйМассив(Новый Массив);
		
		УстановленныеПараметры.Добавить("ОграничениеДоступаНаУровнеЗаписейВключено");
		УстановленныеПараметры.Добавить("ВсеВидыДоступаКромеСпециальных");
		УстановленныеПараметры.Добавить("ВидыДоступаСОтключеннымИспользованием");
		УстановленныеПараметры.Добавить("ВидыДоступаБезГруппДляЗначенияДоступа");
		УстановленныеПараметры.Добавить("ВидыДоступаСОднойГруппойДляЗначенияДоступа");
		УстановленныеПараметры.Добавить("ТипыЗначенийДоступаСГруппами");
		УстановленныеПараметры.Добавить("ТаблицыСОтдельнымиНастройкамиПрав");
		УстановленныеПараметры.Добавить("ИдентификаторыТаблицСОтдельнымиНастройкамиПрав");
		УстановленныеПараметры.Добавить("ТипыВладельцевНастроекПрав");
	КонецЕсли;
	
	Если Не ОграничиватьДоступНаУровнеЗаписей
	 Или ИнформационнаяБазаЗаблокированаДляОбновления Тогда
		Возврат;
	КонецЕсли;
	
	#Область УниверсальноеОграничение
	Если УниверсальноеОграничение Тогда
		ДействующиеПараметрыОграниченияДоступа(Неопределено, Истина);
		Возврат;
	КонецЕсли;
	#КонецОбласти
	
	ПараметрыСеанса.ОграничениеДоступаНаУровнеЗаписейВключено = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоУмолчанию.ТипЗначенийДоступа КАК ТипЗначений,
	|	ЗначенияПоУмолчанию.ВсеРазрешеныБезИсключений КАК ВсеРазрешеныБезИсключений
	|ПОМЕСТИТЬ ЗначенияПоУмолчаниюДляПользователя
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|					ПО
	|						ГруппыДоступаПользователи.Ссылка = ЗначенияПоУмолчанию.ГруппаДоступа
	|							И ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
	|							И СоставыГруппПользователей.Пользователь = &ТекущийПользователь)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоУмолчанию.ТипЗначений
	|ИЗ
	|	ЗначенияПоУмолчаниюДляПользователя КАК ЗначенияПоУмолчанию
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоУмолчанию.ТипЗначений
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЗначенияПоУмолчанию.ВсеРазрешеныБезИсключений) = ИСТИНА";
	
	ТипыЗначенийВсеРазрешеныБезИсключений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипЗначений");
	
	// Установка параметров ВсеВидыДоступаКромеСпециальных, ВидыДоступаСОтключеннымИспользованием.
	ВсеВидыДоступаКромеСпециальных        = Новый Массив;
	ВидыДоступаСОтключеннымИспользованием = Новый Массив;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	Для каждого СвойстваВидаДоступа Из СвойстваВидовДоступа.Массив Цикл
		ВсеВидыДоступаКромеСпециальных.Добавить(СвойстваВидаДоступа.Имя);
		
		Если НЕ ВидДоступаИспользуется(СвойстваВидаДоступа.Ссылка)
		 ИЛИ ТипыЗначенийВсеРазрешеныБезИсключений.Найти(СвойстваВидаДоступа.Ссылка) <> Неопределено Тогда
			
			ВидыДоступаСОтключеннымИспользованием.Добавить(СвойстваВидаДоступа.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСеанса.ВсеВидыДоступаКромеСпециальных = ВсеКомбинацииВидовДоступа(ВсеВидыДоступаКромеСпециальных);
	
	УстановленныеПараметры.Добавить("ВсеВидыДоступаКромеСпециальных");
	
	ВсеВидыДоступаКромеСпециальныхОтключены = (ВсеВидыДоступаКромеСпециальных.Количество()
		= ВидыДоступаСОтключеннымИспользованием.Количество());
	
	Если ВсеВидыДоступаКромеСпециальныхОтключены Тогда
		ПараметрыСеанса.ВидыДоступаСОтключеннымИспользованием = "Все";
	Иначе
		ПараметрыСеанса.ВидыДоступаСОтключеннымИспользованием
			= ВсеКомбинацииВидовДоступа(ВидыДоступаСОтключеннымИспользованием);
	КонецЕсли;
	
	УстановленныеПараметры.Добавить("ВидыДоступаСОтключеннымИспользованием");
	
	// Установка параметров ВидыДоступаБезГруппДляЗначенияДоступа,
	// ВидыДоступаСОднойГруппойДляЗначенияДоступа, ТипыЗначенийДоступаСГруппами.
	ПараметрыСеанса.ВидыДоступаБезГруппДляЗначенияДоступа =
		ВсеКомбинацииВидовДоступа(СвойстваВидовДоступа.БезГруппДляЗначенияДоступа);
	ПараметрыСеанса.ВидыДоступаСОднойГруппойДляЗначенияДоступа =
		ВсеКомбинацииВидовДоступа(СвойстваВидовДоступа.СОднойГруппойДляЗначенияДоступа);
	
	ТипыЗначенийДоступаСГруппами = Новый Массив;
	Для каждого КлючИЗначение Из СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами Цикл
		ТипыЗначенийДоступаСГруппами.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыСеанса.ТипыЗначенийДоступаСГруппами = Новый ФиксированныйМассив(ТипыЗначенийДоступаСГруппами);
	
	УстановленныеПараметры.Добавить("ВидыДоступаБезГруппДляЗначенияДоступа");
	УстановленныеПараметры.Добавить("ВидыДоступаСОднойГруппойДляЗначенияДоступа");
	УстановленныеПараметры.Добавить("ТипыЗначенийДоступаСГруппами");
	
	// Установка параметров ТаблицыСОтдельнымиНастройкамиПрав,
	// ИдентификаторыТаблицСОтдельнымиНастройкамиПрав, ТипыВладельцевНастроекПрав.
	ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов();
	ОтдельныеТаблицы = ВозможныеПрава.ОтдельныеТаблицы;
	ТаблицыСОтдельнымиНастройкамиПрав = "";
	ИдентификаторыТаблицСОтдельнымиНастройкамиПрав = Новый Массив;
	Для каждого КлючИЗначение Из ОтдельныеТаблицы Цикл
		ТаблицыСОтдельнымиНастройкамиПрав = ТаблицыСОтдельнымиНастройкамиПрав
			+ "|" + КлючИЗначение.Значение + ";" + Символы.ПС;
		ИдентификаторыТаблицСОтдельнымиНастройкамиПрав.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ПараметрыСеанса.ТаблицыСОтдельнымиНастройкамиПрав = ТаблицыСОтдельнымиНастройкамиПрав;
	
	ПараметрыСеанса.ИдентификаторыТаблицСОтдельнымиНастройкамиПрав =
		Новый ФиксированныйМассив(ИдентификаторыТаблицСОтдельнымиНастройкамиПрав);
	
	ПараметрыСеанса.ТипыВладельцевНастроекПрав = ВозможныеПрава.ТипыВладельцев;
	
	УстановленныеПараметры.Добавить("ТаблицыСОтдельнымиНастройкамиПрав");
	УстановленныеПараметры.Добавить("ИдентификаторыТаблицСОтдельнымиНастройкамиПрав");
	УстановленныеПараметры.Добавить("ТипыВладельцевНастроекПрав");
	
КонецПроцедуры

// Обновляет список ролей пользователей информационной базы
// по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  Пользователи - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи.
//                 Массив значений указанных выше типов.
//               - Неопределено - обновить роли всех пользователей.
//               - Тип по которому будет найден объект метаданных:
//                 если будет найден Справочник.ВнешниеПользователи,
//                 то будут обновлены роли всех внешних пользователей,
//                 иначе будут обновлены роли всех пользователей.
//
//  ПарольПользователяСервиса - Строка - Пароль для авторизации в менеджере 
//                        сервиса.
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
Процедура ОбновитьРолиПользователей(Знач Пользователи1 = Неопределено,
                                    Знач ПарольПользователяСервиса = Неопределено,
                                    ЕстьИзменения = Ложь) Экспорт
	
	Если НЕ ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		// Роли устанавливаются механизмами подсистем Пользователи и ВнешниеПользователи.
		Возврат;
	КонецЕсли;
	
	Если Пользователи1 = Неопределено Тогда
		МассивПользователей = Неопределено;
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
		
	ИначеЕсли ТипЗнч(Пользователи1) = Тип("Массив") Тогда
		МассивПользователей = Пользователи1;
		Если МассивПользователей.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли МассивПользователей.Количество() = 1 Тогда
			Пользователи.НайтиНеоднозначныхПользователейИБ(МассивПользователей[0]);
		Иначе
			Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Пользователи1) = Тип("Тип") Тогда
		МассивПользователей = Пользователи1;
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
	Иначе
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователи1);
		Пользователи.НайтиНеоднозначныхПользователейИБ(Пользователи1);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеСвойстваПользователей = ТекущиеСвойстваПользователей(МассивПользователей);
	
	// Параметры проверки в цикле.
	ВсеРоли                       = ПользователиСлужебный.ВсеРоли().Соответствие;
	ИдентификаторыПользователейИБ = ТекущиеСвойстваПользователей.ИдентификаторыПользователейИБ;
	НовыеРолиПользователей        = ТекущиеСвойстваПользователей.РолиПользователей;
	Администраторы                = ТекущиеСвойстваПользователей.Администраторы;
	РазделениеВключено            = ОбщегоНазначения.РазделениеВключено();
	
	ОбязательныеРолиАдминистратора = Новый Соответствие;
	ОбязательныеРолиАдминистратора.Вставить("ПолныеПрава", Истина);
	Если Не РазделениеВключено Тогда
		ОбязательныеРолиАдминистратора.Вставить("АдминистраторСистемы", Истина);
	КонецЕсли;
	ДополнительныеРолиАдминистратора = Новый Соответствие;
	ДополнительныеРолиАдминистратора.Вставить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок", Истина);
	
	// Будущий итог после цикла.
	НовыеАдминистраторыИБ     = Новый Соответствие;
	ОбновляемыеПользователиИБ = Новый Соответствие;
	
	Для Каждого ОписаниеПользователя Из ИдентификаторыПользователейИБ Цикл
		
		ТекущийПользователь         = ОписаниеПользователя.Пользователь;
		ИдентификаторПользователяИБ = ОписаниеПользователя.ИдентификаторПользователяИБ;
		НовыйАдминистраторИБ        = Ложь;
		
		Отказ = Ложь;
		ИнтеграцияСТехнологиейСервиса.ПриОбновленииРолейПользователяИБ(ИдентификаторПользователяИБ, Отказ);
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		// Поиск пользователя ИБ.
		Если ТипЗнч(ИдентификаторПользователяИБ) = Тип("УникальныйИдентификатор") Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ИдентификаторПользователяИБ);
		Иначе
			ПользовательИБ = Неопределено;
		КонецЕсли;
		
		Если ПользовательИБ = Неопределено
		 Или Не ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Пользователь", ТекущийПользователь);
		НовыеРоли = НовыеРолиПользователей.Скопировать(
			НовыеРолиПользователей.НайтиСтроки(Отбор), "Роль, РольСсылка");
		
		НовыеРоли.Индексы.Добавить("Роль");
		
		Если Администраторы[ТекущийПользователь] <> Неопределено Тогда
			ТекущиеНовыеРоли = НовыеРоли;
			НовыеРоли = ТекущиеНовыеРоли.Скопировать(Новый Массив);
			Для Каждого КлючИЗначение Из ОбязательныеРолиАдминистратора Цикл
				НовыеРоли.Добавить().Роль = КлючИЗначение.Ключ;
			КонецЦикла;
			Для Каждого КлючИЗначение Из ДополнительныеРолиАдминистратора Цикл
				Если ТекущиеНовыеРоли.Найти(КлючИЗначение.Ключ, "Роль") = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовыеРоли.Добавить().Роль = КлючИЗначение.Ключ;
			КонецЦикла;
		КонецЕсли;
		
		// Проверка старых ролей.
		СтарыеРоли        = Новый Соответствие;
		РолиДляДобавления = Новый Соответствие;
		РолиДляУдаления   = Новый Соответствие;
		
		Для Каждого Роль Из ПользовательИБ.Роли Цикл
			ИмяРоли = Роль.Имя;
			СтарыеРоли.Вставить(ИмяРоли, Истина);
			Если НовыеРоли.Найти(ИмяРоли, "Роль") = Неопределено Тогда
				РолиДляУдаления.Вставить(ИмяРоли, Истина);
			КонецЕсли;
		КонецЦикла;
		
		НедоступныеРоли = ПользователиСлужебныйПовтИсп.НедоступныеРолиПоТипуПользователя(
			ТипЗнч(ТекущийПользователь) = Тип("СправочникСсылка.ВнешниеПользователи"));
		
		// Проверка новых ролей.
		Для Каждого Строка Из НовыеРоли Цикл
			
			Если СтарыеРоли[Строка.Роль] <> Неопределено Тогда
				Если РазделениеВключено
				   И НедоступныеРоли.Получить(Строка.Роль) <> Неопределено Тогда
					
					ЗарегистрироватьНедоступнуюРоль(Строка, ТекущийПользователь);
					РолиДляУдаления.Вставить(Строка.Роль, Истина);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ВсеРоли.Получить(Строка.Роль) = Неопределено Тогда
				ЗарегистрироватьНенайденнуюРоль(Строка, ТекущийПользователь);
				Продолжить;
			КонецЕсли;
			
			Если НедоступныеРоли.Получить(Строка.Роль) <> Неопределено Тогда
				ЗарегистрироватьНедоступнуюРоль(Строка, ТекущийПользователь);
				Продолжить;
			КонецЕсли;
			
			РолиДляДобавления.Вставить(Строка.Роль, Истина);
			
			Если Строка.Роль = "АдминистраторСистемы" Тогда
				НовыйАдминистраторИБ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Завершение обработки текущего пользователя.
		Если РолиДляДобавления.Количество() = 0
		   И РолиДляУдаления.Количество()   = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияРолей = Новый Структура;
		ИзмененияРолей.Вставить("ПользовательСсылка", ТекущийПользователь);
		ИзмененияРолей.Вставить("ПользовательИБ",     ПользовательИБ);
		ИзмененияРолей.Вставить("РолиДляДобавления",  РолиДляДобавления);
		ИзмененияРолей.Вставить("РолиДляУдаления",    РолиДляУдаления);
		
		Если НовыйАдминистраторИБ Тогда
			НовыеАдминистраторыИБ.Вставить(ТекущийПользователь, ИзмененияРолей);
		Иначе
			ОбновляемыеПользователиИБ.Вставить(ТекущийПользователь, ИзмененияРолей);
		КонецЕсли;
		
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	// Добавление новых администраторов.
	Если НовыеАдминистраторыИБ.Количество() > 0 Тогда
		ОбновитьРолиПользователейИБ(НовыеАдминистраторыИБ, ПарольПользователяСервиса);
	КонецЕсли;
	
	// Удаление старых администраторов и обновление остальных пользователей.
	Если ОбновляемыеПользователиИБ.Количество() > 0 Тогда
		ОбновитьРолиПользователейИБ(ОбновляемыеПользователиИБ, ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Проверка группы доступа Администраторы перед записью.
Процедура ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(ПользователиГруппы, ОписаниеОшибки) Экспорт
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
	
	// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
	УстановитьПривилегированныйРежим(Истина);
	НайденДействующийАдминистратор = Ложь;
	
	Для Каждого ОписаниеПользователя Из ПользователиГруппы Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
		 Или ТипЗнч(ОписаниеПользователя.Пользователь) <> Тип("СправочникСсылка.Пользователи")
		   И ТипЗнч(ОписаниеПользователя.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено
		   И Пользователи.ВходВПрограммуРазрешен(ПользовательИБ) Тогда
			
			НайденДействующийАдминистратор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденДействующийАдминистратор Тогда
		ОписаниеОшибки =
			НСтр("ru = 'В группе доступа Администраторы
			           |должен быть хотя бы один пользователь,
			           |которому разрешен вход в программу.'");
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступом.ЕстьОграничениеТаблицыПоВидуДоступа.
Функция ЕстьОграничениеТаблицыПоВидуДоступа(Таблица, ВидДоступа, ВсеВидыДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДоступаСОтключеннымИспользованием = ПараметрыСеанса.ВидыДоступаСОтключеннымИспользованием;
	Если ВидыДоступаСОтключеннымИспользованием = "Все"
	 Или СтрНайти(ВидыДоступаСОтключеннымИспользованием, "," + ВидДоступа + ",") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивВидовДоступа = СтрРазделить(ВсеВидыДоступа, ",", Ложь);
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в функции ЕстьОграничениеТаблицыПоВидуДоступа общего модуля УправлениеДоступом.'")
		+ Символы.ПС;
	
	СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ВидДоступа);
	Если СвойстваВидаДоступа = Неопределено Тогда
		ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден вид доступа ""%1"", указанный в параметре ВидДоступа.'"), ВидДоступа);
	КонецЕсли;
	ВидДоступаСсылка = СвойстваВидаДоступа.Ссылка;
	
	ВсеВидыДоступаТаблицыСОтключеннымИспользованием = Истина;
	ИспользованиеВидовДоступа = Новый Соответствие;
	ВидДоступаУказанВоВсехВидахДоступа = Ложь;
	
	Для Каждого ТекущийВидДоступа Из МассивВидовДоступа Цикл
		ТекущийВидДоступа = СокрЛП(ТекущийВидДоступа);
		СвойстваВидаДоступа = СвойстваВидовДоступа.ПоИменам.Получить(ТекущийВидДоступа);
		Если СвойстваВидаДоступа = Неопределено Тогда
			ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден вид доступа ""%1"", указанный в параметре
				           |ВсеВидыДоступа: ""%2"".'"), ТекущийВидДоступа, ВсеВидыДоступа);
		КонецЕсли;
		Если СвойстваВидаДоступа.Имя = ВидДоступа Тогда
			ВидДоступаУказанВоВсехВидахДоступа = Истина;
		КонецЕсли;
		Используется = СтрНайти(ВидыДоступаСОтключеннымИспользованием, "," + СвойстваВидаДоступа.Имя + ",") = 0;
		ИспользованиеВидовДоступа.Вставить(СвойстваВидаДоступа.Ссылка, Используется);
		Если Используется Тогда
			ВсеВидыДоступаТаблицыСОтключеннымИспользованием = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВидДоступаУказанВоВсехВидахДоступа Тогда
		ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид доступа ""%1"", указанный в параметре ВидДоступа не найден в параметре
			           |ВсеВидыДоступа: ""%2"".'"), ВидДоступа, ВсеВидыДоступа);
	КонецЕсли;
	
	Если ВсеВидыДоступаТаблицыСОтключеннымИспользованием Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОсновнойТаблицыСписка", Таблица);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	
	Запрос.Текст = ТекстЗапросаГруппДоступа();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗначенияПоУмолчанию.ГруппаДоступа КАК ГруппаДоступа,
	|	ЗначенияПоУмолчанию.ТипЗначенийДоступа КАК ВидДоступа
	|ИЗ
	|	РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	|		ПО ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	|ГДЕ
	|	НЕ ЗначенияПоУмолчанию.ВсеРазрешеныБезИсключений
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|					ПО
	|						ГруппыДоступаПользователи.Ссылка = ЗначенияПоУмолчанию.ГруппаДоступа
	|							И ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
	|							И СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь)";
	
	ДобавитьЗапросВПакет(Запрос.Текст, ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НастроенныеВидыДоступаГруппДоступа = Новый Соответствие;
	ЕстьГруппаДоступаСОграничениемПоВидуДоступа = Ложь;
	
	Пока Выборка.Следующий() Цикл
		НастроенныеВидыДоступа = НастроенныеВидыДоступаГруппДоступа.Получить(Выборка.ГруппаДоступа);
		Если НастроенныеВидыДоступа = Неопределено Тогда
			НастроенныеВидыДоступа = Новый Соответствие;
			НастроенныеВидыДоступаГруппДоступа.Вставить(Выборка.ГруппаДоступа, НастроенныеВидыДоступа);
		КонецЕсли;
		Если ИспользованиеВидовДоступа.Получить(Выборка.ВидДоступа) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НастроенныеВидыДоступа.Вставить(Выборка.ВидДоступа, Истина);
		Если Выборка.ВидДоступа = ВидДоступаСсылка Тогда
			ЕстьГруппаДоступаСОграничениемПоВидуДоступа = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьГруппаДоступаБезОграниченийПоВсемВидамДоступа = Ложь;
	
	Для Каждого ОписаниеГруппыДоступа Из НастроенныеВидыДоступаГруппДоступа Цикл
		НастроенныеВидыДоступа = ОписаниеГруппыДоступа.Значение;
		ВсеВидыДоступаТаблицыБезОграниченийВГруппеДоступа = Истина;
		Для Каждого ОписаниеИспользованияВидаДоступа Из ИспользованиеВидовДоступа Цикл
			Если Не ОписаниеИспользованияВидаДоступа.Значение Тогда
				Продолжить; // Не используется.
			КонецЕсли;
			Если НастроенныеВидыДоступа.Получить(ОписаниеИспользованияВидаДоступа.Ключ) = Неопределено Тогда
				Продолжить; // ВсеРазрешеныБезИсключений или ограничения по виду доступа нет.
			КонецЕсли;
			ВсеВидыДоступаТаблицыБезОграниченийВГруппеДоступа = Ложь;
			Прервать;
		КонецЦикла;
		Если ВсеВидыДоступаТаблицыБезОграниченийВГруппеДоступа Тогда
			ЕстьГруппаДоступаБезОграниченийПоВсемВидамДоступа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьГруппаДоступаБезОграниченийПоВсемВидамДоступа Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЕстьГруппаДоступаСОграничениемПоВидуДоступа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписки ОбновитьГруппыЗначенийДоступа на событие ПередЗаписью:
// - вызывает метод записи групп значений доступа в
//   регистр сведений ГруппыЗначенийДоступа для требуемых объектов метаданных;
//
Процедура ОбновитьГруппыЗначенийДоступа(Знач Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	ЗначенияДоступаСГруппами = СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
	
	Если ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗнч(Объект)) <> Неопределено Тогда
		РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппыЗначенийДоступа(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ОбновитьГруппыВладельцевНастроекПрав на событие ПередЗаписью:
// - вызывает метод записи иерархии владельцев настроек прав объектов в
//   регистр сведений НаследованиеНастроекПравОбъектов для требуемых объектов метаданных.
//
Процедура ОбновитьГруппыВладельцевНастроекПрав(Знач Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ВозможныеПрава = УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов();
	ВозможныеПраваПоТипам = ВозможныеПрава.ПоТипам;
	
	Если ВозможныеПраваПоТипам.Получить(ТипЗнч(Объект)) <> Неопределено Тогда
		РегистрыСведений.НаследованиеНастроекПравОбъектов.ОбновитьДанныеРегистра(Объект);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ЗаписатьНаборыЗначенийДоступа на событие ПриЗаписи
// вызывает метод записи значений доступа объекта в РегистрСведений.НаборыЗначенийДоступа.
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если наборы значений доступа не применяются.
//
Процедура ЗаписатьНаборыЗначенийДоступаПриЗаписи(Знач Объект, Отказ) Экспорт

	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНаборыЗначенийДоступа(Объект, , Объект.ДополнительныеСвойства.Свойство(
		"ЗаписьНаборовЗначенийДоступаПриОбновленииИБ"));
	
КонецПроцедуры

// Обработчик подписки ЗаписатьЗависимыеНаборыЗначенийДоступа события ПриЗаписи
// вызывает перезапись зависимых наборов значений доступа в регистре сведений НаборыЗначенийДоступа.
//
//  Возможен случай использования подсистемы "УправлениеДоступом", когда
// указанной подписки не существует, если зависимые наборы значений доступа не применяются.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступаПриЗаписи(Знач Объект, Отказ) Экспорт
	
	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьЗависимыеНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗависимыеНаборыЗначенийДоступа(Объект, Объект.ДополнительныеСвойства.Свойство(
		"ЗаписьНаборовЗначенийДоступаПриОбновленииИБ"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики регламентных заданий.

// Обработчик регламентного задания ЗаполнениеДанныхДляОграниченияДоступа.
Процедура ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа);
	
	ЗаполнениеДанныхДляОграниченияДоступа();
	
КонецПроцедуры

// Выполняет последовательное заполнение и обновление данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей.
// 
//  При включенном режиме ограничения доступа на уровне записей заполняет наборы
// значений доступа. Заполнение выполняется частями при каждом запуске, пока все
// наборы значений доступа не будут заполнены.
//  При отключении режима ограничения доступа на уровне записей наборы значений доступа
// (заполненные ранее) удаляются при перезаписи объектов, а не все сразу.
//  Независимо от режима ограничения доступа на уровне записей обновляет кэш-реквизиты.
//  После завершения всех обновлений и заполнений отключает использование регламентного задания.
//
//  Сведения о состоянии работы записываются в журнал регистрации.
//
//  Возможно вызывать программно, например, при обновлении информационной базы.
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы.
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0, ТолькоКэшРеквизиты = Ложь, ЕстьИзменения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	ЗначенияДоступаСГруппами = СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() И НЕ ТолькоКэшРеквизиты Тогда
		
		// Заполнение групп значений доступа в регистре сведений ГруппыЗначенийДоступа.
		Для каждого ИмяТаблицы Из ЗначенияДоступаСГруппами.ИменаТаблиц Цикл
			
			Если КоличествоДанных < 10000 Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 10000
				|	ТекущаяТаблица.Ссылка КАК Ссылка
				|ИЗ
				|	&ТекущаяТаблица КАК ТекущаяТаблица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
				|		ПО ТекущаяТаблица.Ссылка = ГруппыЗначенийДоступа.ЗначениеДоступа
				|			И (ГруппыЗначенийДоступа.ГруппаДанных = 0)
				|ГДЕ
				|	ГруппыЗначенийДоступа.ЗначениеДоступа ЕСТЬ NULL ";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", ИмяТаблицы);
				Значения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
				РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппыЗначенийДоступа(Значения, ЕстьИзменения);
				
				КоличествоДанных = КоличествоДанных + Значения.Количество();
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоДанных < 10000
		   И НЕ РегистрыСведений.УдалитьНаборыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр() Тогда
			// Перед заполнением наборов значений доступа выполняется перенос
			// наборов значений доступа из старого регистра.
			Возврат;
			
		ИначеЕсли КоличествоДанных < 10000 Тогда
			
			// Заполнение регистра сведений НаборыЗначенийДоступа.
			ТипыОбъектов = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
				"ЗаписатьНаборыЗначенийДоступа");
			
			Для каждого ОписаниеТипа Из ТипыОбъектов Цикл
				Тип = ОписаниеТипа.Ключ;
				
				Если КоличествоДанных < 10000 И Тип <> Тип("Строка") Тогда
				
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 10000
					|	ТекущаяТаблица.Ссылка КАК Ссылка
					|ИЗ
					|	&ТекущаяТаблица КАК ТекущаяТаблица
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаборыЗначенийДоступа КАК РегистрСведенийНаборыЗначенийДоступа
					|		ПО ТекущаяТаблица.Ссылка = РегистрСведенийНаборыЗначенийДоступа.Объект
					|ГДЕ
					|	РегистрСведенийНаборыЗначенийДоступа.Объект ЕСТЬ NULL ";
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", Метаданные.НайтиПоТипу(Тип).ПолноеИмя());
					Выборка = Запрос.Выполнить().Выбрать();
					КоличествоДанных = КоличествоДанных + Выборка.Количество();
					
					Пока Выборка.Следующий() Цикл
						ОбновитьНаборыЗначенийДоступа(Выборка.Ссылка, ЕстьИзменения);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		РегистрыСведений.УдалитьНаборыЗначенийДоступа.ПереместитьДанныеВНовыйРегистр();
	КонецЕсли;
	
	// Обновление кэш-реквизитов в наборах значений доступа.
	Если КоличествоДанных < 10000 Тогда
		
		ТипыЗначенийДоступа          = СвойстваВидовДоступа.ПоТипамЗначений;
		ТипыЗначенийДоступаСГруппами = СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами;
		
		ТаблицаТиповЗначений = Новый ТаблицаЗначений;
		ТаблицаТиповЗначений.Колонки.Добавить("ТипЗначений", Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		Для каждого КлючИЗначение Из ТипыЗначенийДоступа Цикл
			ТаблицаТиповЗначений.Добавить().ТипЗначений = ПустаяСсылкаОбъектаМетаданных(КлючИЗначение.Ключ);
		КонецЦикла;
		
		ТаблицаТиповЗначенийСГруппами = Новый ТаблицаЗначений;
		ТаблицаТиповЗначенийСГруппами.Колонки.Добавить("ТипЗначений", Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
		Для каждого КлючИЗначение Из ТипыЗначенийДоступаСГруппами Цикл
			ТаблицаТиповЗначенийСГруппами.Добавить().ТипЗначений = ПустаяСсылкаОбъектаМетаданных(КлючИЗначение.Ключ);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаТиповЗначений", ТаблицаТиповЗначений);
		Запрос.УстановитьПараметр("ТаблицаТиповЗначенийСГруппами", ТаблицаТиповЗначенийСГруппами);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаТипов.ТипЗначений
		|ПОМЕСТИТЬ ТаблицаТиповЗначений
		|ИЗ
		|	&ТаблицаТиповЗначений КАК ТаблицаТипов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаТипов.ТипЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТипов.ТипЗначений
		|ПОМЕСТИТЬ ТаблицаТиповЗначенийСГруппами
		|ИЗ
		|	&ТаблицаТиповЗначенийСГруппами КАК ТаблицаТипов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТаблицаТипов.ТипЗначений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 10000
		|	НаборыЗначенийДоступа.Объект,
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	НаборыЗначенийДоступа.Уточнение,
		|	НаборыЗначенийДоступа.Чтение,
		|	НаборыЗначенийДоступа.Изменение
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НаборыЗначенийДоступа.СтандартноеЗначение <> ИСТИНА В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						ИСТИНА
		|					ИЗ
		|						ТаблицаТиповЗначений КАК ТаблицаТиповЗначений
		|					ГДЕ
		|						ТИПЗНАЧЕНИЯ(ТаблицаТиповЗначений.ТипЗначений) = ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа))
		|				ТОГДА ИСТИНА
		|			КОГДА НаборыЗначенийДоступа.СтандартноеЗначение = ИСТИНА
		|				ТОГДА НаборыЗначенийДоступа.ЗначениеБезГрупп = ИСТИНА В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ИСТИНА
		|						ИЗ
		|							ТаблицаТиповЗначенийСГруппами КАК ТаблицаТиповЗначенийСГруппами
		|						ГДЕ
		|							ТИПЗНАЧЕНИЯ(ТаблицаТиповЗначенийСГруппами.ТипЗначений) = ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа))
		|			ИНАЧЕ НаборыЗначенийДоступа.ЗначениеБезГрупп = ИСТИНА
		|		КОНЕЦ";
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоДанных = КоличествоДанных + Выборка.Количество();
		
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.НаборыЗначенийДоступа.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			
			ТипЗначенияДоступа = ТипЗнч(Выборка.ЗначениеДоступа);
			
			Если ТипыЗначенийДоступа.Получить(ТипЗначенияДоступа) <> Неопределено Тогда
				МенеджерЗаписи.СтандартноеЗначение = Истина;
				Если ТипыЗначенийДоступаСГруппами.Получить(ТипЗначенияДоступа) = Неопределено Тогда
					МенеджерЗаписи.ЗначениеБезГрупп = Истина;
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			ЕстьИзменения = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоДанных < 10000 Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'",
				 ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Завершено заполнение данных для ограничения доступа.'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		УстановитьЗаполнениеДанныхДляОграниченияДоступа(Ложь);
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'",
				 ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Выполнена запись части данных для ограничения доступа.'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает использование регламентного задания заполнения данных управления доступом.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьЗаполнениеДанныхДляОграниченияДоступа(Знач Использование) Экспорт
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа, Использование);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с видами доступа.

// Возвращает Истина, если вид доступа включен по функциональным опциям для всех сеансов.
//
// Параметры:
//  ВидДоступа - Ссылка - пустая ссылка основного типа.
//             - Строка - имя вида доступа.
//
// Возвращаемое значение:
//  Булево.
//
Функция ВидДоступаИспользуется(Знач ВидДоступа) Экспорт
	
	Используется = Ложь;
	
	СвойстваВидаДоступа = СвойстваВидаДоступа(ВидДоступа);
	Если СвойстваВидаДоступа = Неопределено Тогда
		Возврат Используется;
	КонецЕсли;
	
	Если СвойстваВидаДоступа.Имя = "ВнешниеПользователи"
	 Или СвойстваВидаДоступа.Имя = "Пользователи" Тогда
		// Эти виды доступа не могут быть отключены по функциональным опциям.
		Возврат Истина;
	КонецЕсли;
	
	Используется = Истина;
	
	ИнтеграцияПодсистемБСП.ПриЗаполненииИспользованияВидаДоступа(СвойстваВидаДоступа.Имя, Используется);
	УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа(СвойстваВидаДоступа.Имя, Используется);
	
	Возврат Используется;
	
КонецФункции

// Возвращает свойства вида доступа или всех видов доступа.
//
// Параметры:
//  ВидДоступа - Ссылка - пустая ссылка основного типа;
//             - Строка - имя вида доступа;
//             - Неопределено - вернуть массив свойств всех видов доступа.
//
// Возвращаемое значение:
//  Неопределено - когда для вида доступа свойств не найдено.
//  Структура    - свойства найденного вида доступа, описание которых см. в
//                 комментарии к функции СвойстваВидовДоступа этого модуля.
//  Массив       - со значениями:
//    * Структура - со свойствами, как у структуры, указанной выше.
//
Функция СвойстваВидаДоступа(Знач ВидДоступа = Неопределено) Экспорт
	
	Свойства = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	Если ВидДоступа = Неопределено Тогда
		Возврат Свойства.Массив;
	КонецЕсли;
	
	СвойстваВидаДоступа = Свойства.ПоИменам.Получить(ВидДоступа);
	
	Если СвойстваВидаДоступа = Неопределено Тогда
		СвойстваВидаДоступа = Свойства.ПоСсылкам.Получить(ВидДоступа);
	КонецЕсли;
	
	Возврат СвойстваВидаДоступа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа.

// Возвращает новые наборы для заполнения табличной части.
Функция ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект) Экспорт
	
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	Если Объект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверные параметры.
			           |У объекта типа ""%1""
			           |не найдена табличная часть ""Наборы значений доступа"".'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	Таблица = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат Таблица;
	КонецЕсли;
	
	УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Объект, Таблица);
	
	УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(
		Таблица, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
	
	Возврат Таблица;
	
КонецФункции

// Выполняет обновление наборов значений доступа объекта, если они изменились.
// Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаИлиОбъект - СправочникСсылка, ДокументСсылка и другие типы ссылок или объектов - ссылка или объект,
//                    для которого заполняются наборы значений доступа.
//
//  ОбновлениеИБ    - Булево - если Истина, то необходимо выполнять запись данных,
//                            не выполняя лишних, избыточных действий с данными.
//                            См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаИлиОбъект, ЕстьИзменения = Неопределено, ОбновлениеИБ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = ?(СсылкаИлиОбъект = СсылкаИлиОбъект.Ссылка, СсылкаИлиОбъект.ПолучитьОбъект(), СсылкаИлиОбъект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	НаборыЗаписываются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ НаборыЗаписываются Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверные параметры.
			           |Тип объекта ""%1""
			           |не найден в подписке на события
			           |""Записать наборы значений доступа"".'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи наборов значений доступа:
			           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
			           |не задан тип %1'"),
			СсылкаНаОбъект.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	Если СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") <> Неопределено Тогда
		// Обновление объекта требуется.
		Таблица = ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
		
		Если НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаОбъект, Таблица) Тогда
			ПодготовитьНаборыЗначенийДоступаКЗаписи(Неопределено, Таблица, Ложь);
			
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
			Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
			Если ОбновлениеИБ Тогда
				Объект.ДополнительныеСвойства.Вставить("ЗаписьНаборовЗначенийДоступаПриОбновленииИБ");
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Иначе
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			КонецЕсли;
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление объекта не требуется или объект уже обновлен.
	ЗаписатьНаборыЗначенийДоступа(Объект, ЕстьИзменения, ОбновлениеИБ);
	
КонецПроцедуры

// Заполняет вспомогательные данные, ускоряющие работу шаблонов ограничений доступа.
//  Выполняется перед записью в регистр НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.*, ДокументСсылка.*, ...
//  Таблица        - ТаблицаЗначений.
//
Процедура ПодготовитьНаборыЗначенийДоступаКЗаписи(СсылкаНаОбъект, Таблица, ДобавитьКэшРеквизиты = Ложь) Экспорт
	
	Если ДобавитьКэшРеквизиты Тогда
		
		Таблица.Колонки.Добавить("Объект", Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип);
		Таблица.Колонки.Добавить("СтандартноеЗначение", Новый ОписаниеТипов("Булево"));
		Таблица.Колонки.Добавить("ЗначениеБезГрупп", Новый ОписаниеТипов("Булево"));
		
		СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
		
		ТипыЗначенийДоступаСГруппами = СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами;
		ТипыЗначенийДоступа          = СвойстваВидовДоступа.ПоТипамЗначений;
	КонецЕсли;
	
	// Нормализация ресурсов Чтение, Изменение.
	НомерНабора = -1;
	Для каждого Строка Из Таблица Цикл
		
		Если ДобавитьКэшРеквизиты Тогда
			// Установка значения измерения Объект.
			Строка.Объект = СсылкаНаОбъект;
			
			ТипЗначенияДоступа = ТипЗнч(Строка.ЗначениеДоступа);
			
			Если ТипыЗначенийДоступа.Получить(ТипЗначенияДоступа) <> Неопределено Тогда
				Строка.СтандартноеЗначение = Истина;
				Если ТипыЗначенийДоступаСГруппами.Получить(ТипЗначенияДоступа) = Неопределено Тогда
					Строка.ЗначениеБезГрупп = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Очистка флажков прав и соответствующих им вторичных данных
		// для всех строк каждого набора, кроме первой строки.
		Если НомерНабора = Строка.НомерНабора Тогда
			Строка.Чтение    = Ложь;
			Строка.Изменение = Ложь;
		Иначе
			НомерНабора = Строка.НомерНабора;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для действий при изменений настроек подсистемы.

// Если необходимо, включает заполнение данных для ограничения доступа и
// обновляет некоторые данные сразу.
//
// Вызывается из обработчика ПриЗаписи константы ОграничиватьДоступаНаУровнеЗаписей.
//
Процедура ПриИзмененииОграниченияДоступаНаУровнеЗаписей(ОграничениеДоступаНаУровнеЗаписейВключено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОграничениеДоступаНаУровнеЗаписейВключено Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Управление доступом.Заполнение данных для ограничения доступа'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Начато заполнение данных для ограничения доступа.'"),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		УстановитьЗаполнениеДанныхДляОграниченияДоступа(Истина);
	КонецЕсли;
	
	// Обновление параметров сеанса.
	// Требуется для того, чтобы администратор не выполнял перезапуск.
	УстановленныеПараметры = Новый Массив;
	УстановкаПараметровСеанса("", УстановленныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание таблиц ВидыДоступа и ЗначенияДоступа в формах редактирования.

// Заполняет вспомогательные данные, требуемые для работы формы,
// которые не зависят от содержания объекта или заполняются для нового объекта.
//
// Форма должна содержать реквизиты, указанные ниже.
// Реквизиты отмеченные символом * заполняются автоматически, но их нужно создать в форме.
// Реквизиты отмеченные символом # должны быть созданы в форме, если
// в форме будет создан реквизит ТекущаяГруппаДоступа (см. ниже).
// Реквизиты отмеченные символом @ будут созданы автоматически.
//
//  ТекущаяГруппаДоступа - необязательный реквизит,
//                         если не создан в форме, тогда не используется.
//
//  ВидыДоступа - Таблица с полями:
//    #ГруппаДоступа              - СправочникСсылка.ГруппыДоступа,
//    ВидДоступа                  - ОпределяемыйТип.ЗначениеДоступа,
//    Предустановленный           - Булево (только для профиля),
//    ВсеРазрешены                - Булево,
//    *ВидДоступаПредставление    - Строка - представление настройки,
//    *ВсеРазрешеныПредставление  - Строка - представление настройки,
//    @Используется               - Булево.
//
//  ЗначенияДоступа - Таблица с полями:
//    #ГруппаДоступа     - СправочникСсылка.ГруппыДоступа,
//    *ВидДоступа        - ОпределяемыйТип.ЗначениеДоступа,
//    ЗначениеДоступа    - ОпределяемыйТип.ЗначениеДоступа,
//    *НомерСтрокиПоВиду - Число.
//
//  *ИспользоватьВнешнихПользователей     - Булево - реквизит будет создан, если нет в форме.
//  *НадписьВидДоступа                    - Строка - представление текущего вида доступа в форме.
//  @ЭтоПрофильГруппДоступа               - Булево.
//  @ТекущийВидДоступа                    - ОпределяемыйТип.ЗначениеДоступа.
//  @ТекущиеТипыВыбираемыхЗначений        - СписокЗначений.
//  @ТекущийТипВыбираемыхЗначений         - ОпределяемыйТип.ЗначениеДоступа.
//  @ИмяРеквизитаХранилищаТаблиц          - Строка.
//  @ВидДоступаПользователи               - ОпределяемыйТип.ЗначениеДоступа.
//  @ВидДоступаВнешниеПользователи        - ОпределяемыйТип.ЗначениеДоступа.
//  
//  @ВсеВидыДоступа - Таблица с полями:
//    @Ссылка        - ОпределяемыйТип.ЗначениеДоступа,
//    @Представление - Строка,
//    @Используется  - Булево.
//
//  @ПредставленияВсеРазрешены - Таблица с полями:
//    @Имя           - Строка,
//    @Представление - Строка.
//
//  @ВсеТипыВыбираемыхЗначений - Таблица с полями:
//    @ВидДоступа        - ОпределяемыйТип.ЗначениеДоступа,
//    @ТипЗначений       - ОпределяемыйТип.ЗначениеДоступа,
//    @ПредставлениеТипа - Строка,
//    @ИмяТаблицы        - Строка.
//
// Параметры:
//  Форма      - УправляемаяФорма, которую требуется настроить для
//               редактирования разрешенных значений.
//
//  ЭтоПрофиль - Булево - указывает, что возможна настройка видов доступа
//               в том числе представление настройки содержит 4 значения, а не 2.
//
//  ИмяРеквизитаХранилищаТаблиц - Строка, содержащая, например, строку "Объект", которая
//               содержит таблицы ВидыДоступа и ЗначенияДоступа (см. ниже).
//               Если указана пустая строка, тогда считается,
//               что таблицы хранятся в реквизитах формы.
//
Процедура ПриСозданииНаСервереФормыРедактированияРазрешенныхЗначений(Форма, ЭтоПрофиль = Ложь, ИмяРеквизитаХранилищаТаблиц = "Объект") Экспорт
	
	ДобавитьРеквизитыВспомогательныхДанныхВФорму(Форма, ИмяРеквизитаХранилищаТаблиц);
	
	Форма.ИмяРеквизитаХранилищаТаблиц = ИмяРеквизитаХранилищаТаблиц;
	Форма.ЭтоПрофильГруппДоступа = ЭтоПрофиль;
	
	// Заполнение типов значений доступа всех видов доступа.
	Для каждого СвойстваВидаДоступа Из СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ТипыВыбираемыхЗначений Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта),
					МетаданныеТипа.ПредставлениеОбъекта,
					МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = Форма.ВсеТипыВыбираемыхЗначений.Добавить();
			НоваяСтрока.ВидДоступа        = СвойстваВидаДоступа.Ссылка;
			НоваяСтрока.ТипЗначений       = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа = ПредставлениеТипа;
			НоваяСтрока.ИмяТаблицы        = МетаданныеТипа.ПолноеИмя();
		КонецЦикла;
	КонецЦикла;
	
	Форма.ВидДоступаПользователи           = Справочники.Пользователи.ПустаяСсылка();
	Форма.ВидДоступаВнешниеПользователи    = Справочники.ВнешниеПользователи.ПустаяСсылка();
	Форма.ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	ЗаполнитьТаблицуВсеВидыДоступаВФорме(Форма);
	
	ЗаполнитьТаблицуПредставленияВсеРазрешеныВФорме(Форма, ЭтоПрофиль);
	
	ОформитьТаблицуВидыДоступаВФорме(Форма);
	
	УдалитьНесуществующиеВидыИЗначенияДоступа(Форма);
	УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(Форма);
	
	ОбновитьОтображениеНеиспользуемыхВидовДоступа(Форма, Истина);
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(
		Форма, "ЗначенияДоступаПоВидуДоступа");
	
	// Настройка параметров выбора значения доступа.
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ЭтоВыборЗначенияДоступа", Истина));
	Форма.Элементы.ЗначенияДоступаЗначениеДоступа.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

// При повторном чтении заполняет или обновляет вспомогательные данные,
// требуемые для работы формы, которые зависят от содержания объекта.
//
Процедура ПриПовторномЧтенииНаСервереФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект) Экспорт
	
	УдалитьНесуществующиеВидыИЗначенияДоступа(Форма, ТекущийОбъект);
	УдалитьНесуществующиеВидыИЗначенияДоступа(Форма);
	
	УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(Форма);
	
	УправлениеДоступомСлужебныйКлиентСервер.ПриИзмененииТекущегоВидаДоступа(Форма, Ложь);
	
КонецПроцедуры

// Удаляет лишние значения доступа перед записью.
// Лишние значения доступа могут появиться, если заменить или удалить вид доступа,
// для которого введены значения доступа.
//
Процедура ПередЗаписьюНаСервереФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект) Экспорт
	
	УдалитьЛишниеЗначенияДоступа(Форма, ТекущийОбъект);
	УдалитьЛишниеЗначенияДоступа(Форма);
	
КонецПроцедуры

// Обновляет свойства видов доступа.
Процедура ПослеЗаписиНаСервереФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(Форма);
	
КонецПроцедуры

// Скрывает или показывает неиспользуемые виды доступа.
Процедура ОбновитьОтображениеНеиспользуемыхВидовДоступа(Форма, ПриСозданииНаСервере = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Не ПриСозданииНаСервере Тогда
		Элементы.ПоказыватьНеИспользуемыеВидыДоступа.Пометка =
			НЕ Элементы.ПоказыватьНеИспользуемыеВидыДоступа.Пометка;
	КонецЕсли;
	
	Отбор = УправлениеДоступомСлужебныйКлиентСервер.ОтборВТаблицахФормыРедактированияРазрешенныхЗначений(
		Форма);
	
	Если Не Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка Тогда
		Отбор.Вставить("Используется", Истина);
	КонецЕсли;
	
	Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	
	Элементы.ВидыДоступаВидДоступаПредставление.СписокВыбора.Очистить();
	
	Для каждого Строка Из Форма.ВсеВидыДоступа Цикл
		
		Если Не Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка
		   И Не Строка.Используется Тогда
			
			Продолжить;
		КонецЕсли;
		
		Элементы.ВидыДоступаВидДоступаПредставление.СписокВыбора.Добавить(Строка.Представление);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции.

// Только для внутреннего использования.
Процедура УстановитьУсловиеОтбораВЗапросе(Знач Запрос, Знач Значения, Знач ИмяПараметраЗначений, Знач ИмяПараметраУсловияОтбораИмяПоля) Экспорт
	
	Если Значения = Неопределено Тогда
		
	ИначеЕсли ТипЗнч(Значения) <> Тип("Массив")
	        И ТипЗнч(Значения) <> Тип("ФиксированныйМассив") Тогда
		
		Запрос.УстановитьПараметр(ИмяПараметраЗначений, Значения);
		
	ИначеЕсли Значения.Количество() = 1 Тогда
		Запрос.УстановитьПараметр(ИмяПараметраЗначений, Значения[0]);
	Иначе
		Запрос.УстановитьПараметр(ИмяПараметраЗначений, Значения);
	КонецЕсли;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ИмяПараметраУсловияОтбораИмяПоля) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ИмяПараметраУсловияОтбораИмяПоля, НомерСтроки);
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;
		ИндексРазделителя = СтрНайти(ТекущаяСтрока, ":");
		Если ИндексРазделителя = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при выполнении процедуры УправлениеДоступом.УстановитьУсловиеОтбораВЗапросе().
				           |
				           |В параметре ИмяПараметраУсловияОтбораИмяПоля не найден разделитель (двоеточие)
				           |в следующей строке формата ""<Имя параметра условия>:<Имя поля>""
				           |""%1"".'"),
				ТекущаяСтрока);
		КонецЕсли;
		ИмяПараметраУсловияОтбора = Лев(ТекущаяСтрока, ИндексРазделителя-1);
		ИмяПоля = Сред(ТекущаяСтрока, ИндексРазделителя+1);
		Если Значения = Неопределено Тогда
			УсловиеОтбора = "Истина";
			
		ИначеЕсли ТипЗнч(Значения) <> Тип("Массив")
		        И ТипЗнч(Значения) <> Тип("ФиксированныйМассив") Тогда
			
			УсловиеОтбора = ИмяПоля + " = &" + ИмяПараметраЗначений;
			
		ИначеЕсли Значения.Количество() = 1 Тогда
			УсловиеОтбора = ИмяПоля + " = &" + ИмяПараметраЗначений;
		Иначе
			УсловиеОтбора = ИмяПоля + " В (&" + ИмяПараметраЗначений + ")";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ИмяПараметраУсловияОтбора, УсловиеОтбора);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет набор записей в базе данных,
// если записи набора отличаются от записей в базе данных.
//
// Параметры:
//  Данные - Структура - со свойствами:
//    * НаборЗаписей           - НаборЗаписей пустой или прочитанный с заданным отбором или без отбора.
//                              Менеджер регистра для создания набора записей.
//
//    * НовыеЗаписи            - ТаблицаЗначений в формате регистра.
//
//    * ПоляСравнения          - Строка - содержит список полей по значениям которых требуется вычислять
//                               отличие записей набора. Например, "Измерение1, Измерение2, Ресурс1",
//                               а реквизит ДатаИзмерения не входит в список.
//
//    * ПолеОтбора             - Неопределено - записывается весь регистр или
//                                              отбор уже задан в наборе записей.
//                               Строка       - имя поля по которому нужно установить отбор.
//
//    * ЗначениеОтбора         - значение, которое будет установлено в качестве отбора по полю отбора,
//                               если поле отбора задано.
//
//    * НаборЗаписейПрочитан   - Булево, если Истина, тогда не заданный набор записей уже содержит
//                               прочитанные записи блокировка данных этих записей установлена и
//                               транзакция открыта.
//
//    * ТолькоПроверка         - Булево - если Истина, тогда не выполнять запись,
//                               а лишь выявить необходимость записи и установить
//                               свойство ЕстьИзменения.
//
//    * ДополнительныеСвойства - Неопределено, Структура. Если Структура, тогда в
//                               объекты <Регистр*>НаборЗаписей в свойство ДополнительныеСвойства
//                               будут вставлены все параметры структуры.
//
//    * ОбновлениеИБ           - Булево - если Истина, то необходимо выполнять запись данных, 
//                               не выполняя лишних, избыточных действий с данными.
//                               См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//                               Если свойство не вставлено, то значение вычисляется по "Или" с помощью функций
//                               ВыполняетсяОбновлениеИнформационнойБазы и ЭтоВызовИзОбработчикаОбновления
//                               общего модуля ОбновлениеИнформационнойБазы.
//
//  ЕстьИзменения         - Булево (возвращаемое значение) - если производилась запись,
//                          устанавливается Истина, иначе не изменяется.
//
//  ИзмененныеЗаписи      - Неопределено - никаких действий, иначе
//                          возвращает таблицу значений в формате регистра с полем ВидИзмененияСтроки
//                          типа Число (-1 запись удалена, 1 запись добавлена).
//
Процедура ОбновитьНаборЗаписей(Знач Данные, ЕстьИзменения = Неопределено, ИзмененныеЗаписи = Неопределено) Экспорт
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("НаборЗаписей");
	ВсеПараметры.Вставить("НовыеЗаписи");
	ВсеПараметры.Вставить("ПоляСравнения");
	ВсеПараметры.Вставить("ПолеОтбора");
	ВсеПараметры.Вставить("ЗначениеОтбора");
	ВсеПараметры.Вставить("НаборЗаписейПрочитан", Ложь);
	ВсеПараметры.Вставить("БезПерезаписи", Ложь);
	ВсеПараметры.Вставить("ТолькоПроверка", Ложь);
	ВсеПараметры.Вставить("ДополнительныеСвойства");
	ВсеПараметры.Вставить("ОбновлениеИБ",
		    ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		Или ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления());
	
	ЗаполнитьПараметры(Данные, ВсеПараметры, "НаборЗаписей, НовыеЗаписи");
	
	ПолноеИмяРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Данные.НаборЗаписей)).ПолноеИмя();
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
	Если Данные.НаборЗаписей = МенеджерРегистра Тогда
		Данные.НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ПолеОтбора) Тогда
		УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ПолеОтбора], Данные.ЗначениеОтбора);
	КонецЕсли;
	
	Если НЕ Данные.НаборЗаписейПрочитан Тогда
		ЗаблокироватьОбластьНабораЗаписей(Данные.НаборЗаписей, ПолноеИмяРегистра);
		Данные.НаборЗаписей.Прочитать();
	КонецЕсли;
	
	Данные.ПоляСравнения = ?(Данные.ПоляСравнения = Неопределено,
		ПоляНабораЗаписей(Данные.НаборЗаписей), Данные.ПоляСравнения);
	
	Если Данные.БезПерезаписи Тогда
		НаборЗаписи = МенеджерРегистра.СоздатьНаборЗаписей();
		ОписаниеКлючаЗаписи = УправлениеДоступомСлужебныйПовтИсп.ОписаниеКлючаЗаписи(ПолноеИмяРегистра);
		ОтборЗаписи = Новый Структура(ОписаниеКлючаЗаписи.СтрокаПолей);
		ПоляОстальныхИзмерений = Новый Массив;
		Для каждого Поле Из ОписаниеКлючаЗаписи.МассивПолей Цикл
			Если Поле <> Данные.ПолеОтбора Тогда
				ПоляОстальныхИзмерений.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
		УдаляемыеЗаписи = Новый ТаблицаЗначений;
		Для каждого Поле Из ПоляОстальныхИзмерений Цикл
			УдаляемыеЗаписи.Колонки.Добавить(Поле);
		КонецЦикла;
		Данные.НовыеЗаписи = Данные.НовыеЗаписи.Скопировать();
	КонецЕсли;
	
	ЕстьТекущиеИзменения = Ложь;
	Если ИзмененныеЗаписи = Неопределено Тогда
		Если Данные.НаборЗаписей.Количество() = Данные.НовыеЗаписи.Количество() ИЛИ Данные.БезПерезаписи Тогда
			Отбор = Новый Структура(Данные.ПоляСравнения);
			Данные.НовыеЗаписи.Индексы.Добавить(Данные.ПоляСравнения);
			Для каждого Запись Из Данные.НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(Отбор, Запись);
				НайденныеСтроки = Данные.НовыеЗаписи.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьТекущиеИзменения = Истина;
					ЕстьИзменения = Истина;
					Если Данные.БезПерезаписи Тогда
						ЗаполнитьЗначенияСвойств(ОтборЗаписи, Запись);
						Если Данные.НовыеЗаписи.НайтиСтроки(ОтборЗаписи).Количество() = 0 Тогда
							ЗаполнитьЗначенияСвойств(УдаляемыеЗаписи.Добавить(), ОтборЗаписи);
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				ИначеЕсли Данные.БезПерезаписи Тогда
					Данные.НовыеЗаписи.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			КонецЦикла;
			Если Данные.БезПерезаписи И Данные.НовыеЗаписи.Количество() > 0 Тогда
				ЕстьТекущиеИзменения = Истина;
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			ЕстьТекущиеИзменения = Истина;
			ЕстьИзменения = Истина;
		КонецЕсли;
	Иначе
		Если Данные.НаборЗаписей.Количество() <> Данные.НовыеЗаписи.Количество() Тогда
			ЕстьТекущиеИзменения = Истина;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если Данные.НаборЗаписей.Количество() > Данные.НовыеЗаписи.Количество() Тогда
			ИзмененныеЗаписи = Данные.НаборЗаписей.Выгрузить();
			ИскомыеЗаписи   = Данные.НовыеЗаписи;
			ВидИзмененияСтроки = -1;
		Иначе
			ИзмененныеЗаписи = Данные.НовыеЗаписи.Скопировать();
			ИскомыеЗаписи   = Данные.НаборЗаписей.Выгрузить();
			ВидИзмененияСтроки = 1;
		КонецЕсли;
		ИзмененныеЗаписи.Колонки.Добавить("ВидИзмененияСтроки", Новый ОписаниеТипов("Число"));
		ИзмененныеЗаписи.ЗаполнитьЗначения(ВидИзмененияСтроки, "ВидИзмененияСтроки");
		ВидИзмененияСтроки = ?(ВидИзмененияСтроки = 1, -1, 1);
		Отбор = Новый Структура(Данные.ПоляСравнения);
		
		Для каждого Строка Из ИскомыеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(Отбор, Строка);
			Строки = ИзмененныеЗаписи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока = ИзмененныеЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Отбор);
				НоваяСтрока.ВидИзмененияСтроки = ВидИзмененияСтроки;
				ЕстьТекущиеИзменения = Истина;
				ЕстьИзменения = Истина;
			Иначе
				ИзмененныеЗаписи.Удалить(Строки[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьТекущиеИзменения Тогда
		Если Данные.ТолькоПроверка Тогда
			Возврат;
		КонецЕсли;
		Если Данные.БезПерезаписи Тогда
			УстановитьДополнительныеСвойства(НаборЗаписи, Данные.ДополнительныеСвойства);
			Для каждого Строка Из УдаляемыеЗаписи Цикл
				Если ЗначениеЗаполнено(Данные.ПолеОтбора) Тогда
					УстановитьОтбор(НаборЗаписи.Отбор[Данные.ПолеОтбора], Данные.ЗначениеОтбора);
				КонецЕсли;
				Для каждого Поле Из ПоляОстальныхИзмерений Цикл
					УстановитьОтбор(НаборЗаписи.Отбор[Поле], Строка[Поле]);
				КонецЦикла;
				ЗаписатьОбъектИлиНаборЗаписей(Данные, НаборЗаписи);
			КонецЦикла;
			НаборЗаписи.Добавить();
			Для каждого Строка Из Данные.НовыеЗаписи Цикл
				Если ЗначениеЗаполнено(Данные.ПолеОтбора) Тогда
					УстановитьОтбор(НаборЗаписи.Отбор[Данные.ПолеОтбора], Данные.ЗначениеОтбора);
				КонецЕсли;
				Для каждого Поле Из ПоляОстальныхИзмерений Цикл
					УстановитьОтбор(НаборЗаписи.Отбор[Поле], Строка[Поле]);
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(НаборЗаписи[0], Строка);
				ЗаписатьОбъектИлиНаборЗаписей(Данные, НаборЗаписи);
			КонецЦикла;
		Иначе
			УстановитьДополнительныеСвойства(Данные.НаборЗаписей, Данные.ДополнительныеСвойства);
			Данные.НаборЗаписей.Загрузить(Данные.НовыеЗаписи);
			ЗаписатьОбъектИлиНаборЗаписей(Данные, Данные.НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет строки регистра с отбором по нескольким значениям для одного или
// для двух измерений регистра, выполняется проверка наличия изменений,
// если изменений нет, перезапись не производится.
//
// Параметры:
//  Данные - Структура - со свойствами:
//    * МенеджерРегистра          - Менеджер регистра для создания типа <Регистр*>НаборЗаписей.
//
//    * НовыеЗаписи               - ТаблицаЗначений в формате регистра.
//
//    * ПоляСравнения             - Строка - содержит список полей по значениям которых требуется
//                                  вычислять отличие записей набора, например, "Измерение1, Измерение2,
//                                  Ресурс1", а реквизит ДатаИзменения не входит в список.
//
//    * ИмяПервогоИзмерения       - Неопределено - нет отбора по измерению.
//                                  Строка       - содержит имя первого измерения, для которого задано
//                                                 несколько значений.
//
//    * ЗначенияПервогоИзмерения  - Неопределено - нет отбора по измерению, аналогично,
//                                                 ИмяПервогоИзмерения = Неопределено.
//                                  ЛюбаяСсылка  - содержит одно значение отбора регистра для
//                                                 обновляемых записей.
//                                  Массив       - содержит массив значений отбора регистра для
//                                                 обновляемых записей, пустой массив - значит
//                                                 действий не требуется.
//
//    * ИмяВторогоИзмерения       - аналогично ИмяПервогоИзмерения.
//    * ЗначенияВторогоИзмерения  - аналогично ЗначенияПервогоИзмерения.
//    * ИмяТретьегоИзмерения      - аналогично ИмяПервогоИзмерения.
//    * ЗначенияТретьегоИзмерения - аналогично ЗначенияПервогоИзмерения.
//
//    * ТолькоПроверка            - Булево - если Истина, тогда не выполнять запись,
//                                  а лишь выявить необходимость записи и установить
//                                  свойство ЕстьИзменения.
//
//    * ДополнительныеСвойства    - Неопределено, Структура. Если Структура, тогда в
//                                  объекты <Регистр*>НаборЗаписей в свойство
//                                  ДополнительныеСвойства будут вставлены все параметры структуры.
//
//    * ОбновлениеИБ              - Булево - если Истина, то необходимо выполнять запись данных, 
//                                  не выполняя лишних, избыточных действий с данными.
//                                  См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//                                  Если свойство не вставлено, то значение вычисляется по "Или" с помощью функций
//                                  ВыполняетсяОбновлениеИнформационнойБазы и ЭтоВызовИзОбработчикаОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
//
//  ЕстьИзменения             - Булево (возвращаемое значение) - если производилась запись,
//                              устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьНаборыЗаписей(Знач Данные, ЕстьИзменения) Экспорт
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("МенеджерРегистра");
	ВсеПараметры.Вставить("НовыеЗаписи");
	ВсеПараметры.Вставить("ПоляСравнения");
	ВсеПараметры.Вставить("ИмяПервогоИзмерения");
	ВсеПараметры.Вставить("ЗначенияПервогоИзмерения");
	ВсеПараметры.Вставить("ИмяВторогоИзмерения");
	ВсеПараметры.Вставить("ЗначенияВторогоИзмерения");
	ВсеПараметры.Вставить("ИмяТретьегоИзмерения");
	ВсеПараметры.Вставить("ЗначенияТретьегоИзмерения");
	ВсеПараметры.Вставить("НовыеЗаписиСодержатТолькоРазличия", Ложь);
	ВсеПараметры.Вставить("ФиксированныйОтбор");
	ВсеПараметры.Вставить("ТолькоПроверка", Ложь);
	ВсеПараметры.Вставить("ДополнительныеСвойства");
	ВсеПараметры.Вставить("ОбновлениеИБ",
		    ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		Или ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления());
	
	ЗаполнитьПараметры(Данные, ВсеПараметры, "МенеджерРегистра, НовыеЗаписи");
	
	// Предварительная обработка параметров.
	
	Если НЕ ГруппаПараметровИзмеренияОбработана(Данные.ИмяПервогоИзмерения, Данные.ЗначенияПервогоИзмерения) Тогда
		ЕстьИзменения = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ГруппаПараметровИзмеренияОбработана(Данные.ИмяВторогоИзмерения, Данные.ЗначенияВторогоИзмерения) Тогда
		ЕстьИзменения = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ГруппаПараметровИзмеренияОбработана(Данные.ИмяТретьегоИзмерения, Данные.ЗначенияТретьегоИзмерения) Тогда
		ЕстьИзменения = Истина;
		Возврат;
	КонецЕсли;
	
	УпорядочитьГруппыПараметровИзмерений(Данные);
	
	// Проверка и обновление данных.
	Данные.Вставить("НаборЗаписей",       Данные.МенеджерРегистра.СоздатьНаборЗаписей());
	Данные.Вставить("МетаданныеРегистра", Метаданные.НайтиПоТипу(ТипЗнч(Данные.НаборЗаписей)));
	Данные.Вставить("ПолноеИмяРегистра",  Данные.МетаданныеРегистра.ПолноеИмя());
	
	Если Данные.НовыеЗаписиСодержатТолькоРазличия Тогда
		Данные.Вставить("НаборДляОднойЗаписи", Данные.МенеджерРегистра.СоздатьНаборЗаписей());
	КонецЕсли;
	
	Если Данные.ФиксированныйОтбор <> Неопределено Тогда
		Для каждого КлючИЗначение Из Данные.ФиксированныйОтбор Цикл
			УстановитьОтбор(Данные.НаборЗаписей.Отбор[КлючИЗначение.Ключ], КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.НовыеЗаписиСодержатТолькоРазличия Тогда
		
		Если Данные.ИмяПервогоИзмерения = Неопределено Тогда
			ВызватьИсключение
				НСтр("ru = 'Некорректные параметры в процедуре ОбновитьНаборыЗаписей.'");
		Иначе
			Если Данные.ИмяВторогоИзмерения = Неопределено Тогда
				ЗаписьНесколькимиНаборами = Ложь;
			Иначе
				ЗаписьНесколькимиНаборами = ЗаписьНесколькимиНаборами(
					Данные, Новый Структура, Данные.ИмяПервогоИзмерения, Данные.ЗначенияПервогоИзмерения);
			КонецЕсли;
			
			Если ЗаписьНесколькимиНаборами Тогда
				СписокПолей = Данные.ИмяПервогоИзмерения + ", " + Данные.ИмяВторогоИзмерения;
				Данные.НовыеЗаписи.Индексы.Добавить(СписокПолей);
				
				КоличествоПоЗначениямПервогоИзмерения = Данные.КоличествоПоЗначениям;
				
				Для каждого ПервоеЗначение Из Данные.ЗначенияПервогоИзмерения Цикл
					Отбор = Новый Структура(Данные.ИмяПервогоИзмерения, ПервоеЗначение);
					УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяПервогоИзмерения], ПервоеЗначение);
					
					Если Данные.ИмяТретьегоИзмерения = Неопределено Тогда
						ЗаписьНесколькимиНаборами = Ложь;
					Иначе
						ЗаписьНесколькимиНаборами = ЗаписьНесколькимиНаборами(
							Данные, Отбор, Данные.ИмяВторогоИзмерения, Данные.ЗначенияВторогоИзмерения);
					КонецЕсли;
					
					Если ЗаписьНесколькимиНаборами Тогда
						Для каждого ВтороеЗначение Из Данные.ЗначенияВторогоИзмерения Цикл
							Отбор.Вставить(Данные.ИмяВторогоИзмерения, ВтороеЗначение);
							УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяВторогоИзмерения], ВтороеЗначение);
							
							// Обновление по трем измерениям.
							ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям(Данные, Отбор, ЕстьИзменения);
						КонецЦикла;
						Данные.НаборЗаписей.Отбор[Данные.ИмяВторогоИзмерения].Использование = Ложь;
					Иначе
						// Обновление по двум измерениям.
						Данные.Вставить("КоличествоПоЗначениям", КоличествоПоЗначениямПервогоИзмерения);
						ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям(Данные, Отбор, ЕстьИзменения);
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Обновление по одному измерению.
				ПрочитатьКоличествоДляЧтения(Данные);
				ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям(Данные, Новый Структура, ЕстьИзменения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Данные.ИмяПервогоИзмерения = Неопределено Тогда
			// Обновление всех записей.
			
			ТекущиеДанные = Новый Структура("НаборЗаписей, НовыеЗаписи, ПоляСравнения,
				|ТолькоПроверка, ДополнительныеСвойства, ОбновлениеИБ");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Данные);
			ОбновитьНаборЗаписей(ТекущиеДанные, ЕстьИзменения);
			
		ИначеЕсли Данные.ИмяВторогоИзмерения = Неопределено Тогда
			// Обновление по одному измерению.
			Отбор = Новый Структура(Данные.ИмяПервогоИзмерения);
			Для каждого Значение Из Данные.ЗначенияПервогоИзмерения Цикл
				
				УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяПервогоИзмерения], Значение);
				Отбор[Данные.ИмяПервогоИзмерения] = Значение;
				
				Если Данные.ЗначенияПервогоИзмерения.Количество() <> 1 Тогда
					НовыеЗаписиНабора = Данные.НовыеЗаписи;
				Иначе
					НовыеЗаписиНабора = Данные.НовыеЗаписи.Скопировать(Отбор);
				КонецЕсли;
				
				ТекущиеДанные = Новый Структура("НаборЗаписей, ПоляСравнения,
					|ТолькоПроверка, ДополнительныеСвойства, ОбновлениеИБ");
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Данные);
				ТекущиеДанные.Вставить("НовыеЗаписи", НовыеЗаписиНабора);
				
				ОбновитьНаборЗаписей(ТекущиеДанные, ЕстьИзменения);
			КонецЦикла;
			
		ИначеЕсли Данные.ИмяТретьегоИзмерения = Неопределено Тогда
			// Обновление по двум измерениям.
			СписокПолей = Данные.ИмяПервогоИзмерения + ", " + Данные.ИмяВторогоИзмерения;
			Данные.НовыеЗаписи.Индексы.Добавить(СписокПолей);
			Отбор = Новый Структура(СписокПолей);
			
			Для каждого ПервоеЗначение Из Данные.ЗначенияПервогоИзмерения Цикл
				УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяПервогоИзмерения], ПервоеЗначение);
				Отбор[Данные.ИмяПервогоИзмерения] = ПервоеЗначение;
				
				ОбновитьНовыеЗаписиНабораПоВсемНовымЗаписям(
					Данные,
					Отбор,
					СписокПолей,
					Данные.ИмяВторогоИзмерения,
					Данные.ЗначенияВторогоИзмерения,
					ЕстьИзменения);
			КонецЦикла;
		Иначе
			// Обновление по трем измерениям.
			СписокПолей = Данные.ИмяПервогоИзмерения + ", " + Данные.ИмяВторогоИзмерения + ", " + Данные.ИмяТретьегоИзмерения;
			Данные.НовыеЗаписи.Индексы.Добавить(СписокПолей);
			Отбор = Новый Структура(СписокПолей);
			
			Для каждого ПервоеЗначение Из Данные.ЗначенияПервогоИзмерения Цикл
				УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяПервогоИзмерения], ПервоеЗначение);
				Отбор[Данные.ИмяПервогоИзмерения] = ПервоеЗначение;
				
				Для каждого ВтороеЗначение Из Данные.ЗначенияВторогоИзмерения Цикл
					УстановитьОтбор(Данные.НаборЗаписей.Отбор[Данные.ИмяВторогоИзмерения], ВтороеЗначение);
					Отбор[Данные.ИмяВторогоИзмерения] = ВтороеЗначение;
					
					ОбновитьНовыеЗаписиНабораПоВсемНовымЗаписям(
						Данные,
						Отбор,
						СписокПолей,
						Данные.ИмяВторогоИзмерения,
						Данные.ЗначенияВторогоИзмерения,
						ЕстьИзменения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет регистр сведений по данным в таблице значений ИзмененияСтрок.
//
// Параметры:
//  Данные - Структура - со свойствами:
//
//  * МенеджерРегистра       - Менеджер регистра для создания типа <Регистр*>НаборЗаписей.
//
//  * ИзмененияСоставаСтрок  - ТаблицаЗначений, содержащей поля регистра и
//                             поле ВидИзмененияСтроки (Число):
//                                1 - значит, что строку нужно добавить,
//                               -1 - значит, что строку нужно удалить.
//
//  * ФиксированныйОтбор     - Структура, содержащая имя измерения в ключе и значение
//                             отбора в значении. Может быть указана, когда измерений
//                             более 3-х и заранее известно, что по измерениям сверх 3-х
//                             будет единственное значение. Измерения указанные в
//                             фиксированном отборе не используются при формировании
//                             наборов записей для выполнения обновления.
//
//  * ИзмеренияОтбора        - Строка измерений перечисленных через запятую, которые
//                             нужно использовать при формировании наборов записей
//                             для выполнения обновления (не более 3-х). Не указанные
//                             измерения будут превращены в фиксированный отбор,
//                             если по ним все значения совпадают.
//
//  * ТолькоПроверка         - Булево - если Истина, тогда не выполнять запись,
//                             а лишь выявить необходимость записи и установить
//                             свойство ЕстьИзменения.
//
//  * ДополнительныеСвойства - Неопределено, Структура. Если Структура, тогда в
//                             объекты <Регистр*>НаборЗаписей в свойство
//                             ДополнительныеСвойства будут вставлены все параметры структуры.
//
//  * ОбновлениеИБ           - Булево - если Истина, то необходимо выполнять запись данных, 
//                             не выполняя лишних, избыточных действий с данными.
//                             См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//                             Если свойство не вставлено, то значение вычисляется по "Или" с помощью функций
//                             ВыполняетсяОбновлениеИнформационнойБазы и ЭтоВызовИзОбработчикаОбновления
//                             общего модуля ОбновлениеИнформационнойБазы.
//
//  ЕстьИзменения         - Булево (возвращаемое значение) - если производилась запись,
//                          устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьРегистрСведений(Знач Данные, ЕстьИзменения = Неопределено) Экспорт
	
	Если Данные.ИзмененияСоставаСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсеПараметры = Новый Структура;
	ВсеПараметры.Вставить("МенеджерРегистра");
	ВсеПараметры.Вставить("ИзмененияСоставаСтрок");
	ВсеПараметры.Вставить("ФиксированныйОтбор", Новый Структура);
	ВсеПараметры.Вставить("ИзмеренияОтбора");
	ВсеПараметры.Вставить("ТолькоПроверка", Ложь);
	ВсеПараметры.Вставить("ДополнительныеСвойства");
	ВсеПараметры.Вставить("ОбновлениеИБ",
		    ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы()
		Или ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления());
	
	ЗаполнитьПараметры(Данные, ВсеПараметры, "МенеджерРегистра, ИзмененияСоставаСтрок");
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Данные.МенеджерРегистра.ПустойКлюч()));
	ОписаниеКлючаЗаписи = УправлениеДоступомСлужебныйПовтИсп.ОписаниеКлючаЗаписи(МетаданныеРегистра.ПолноеИмя());
	
	Если Данные.ИзмеренияОтбора <> Неопределено Тогда
		Данные.ИзмеренияОтбора = Новый Структура(Данные.ИзмеренияОтбора);
	КонецЕсли;
	
	МассивИзмеренийОтбора   = Новый Массив;
	ЗначенияИзмеренийОтбора = Новый Структура;
	ИзмерениеБезФиксированногоОтбора = Новый Структура;
	
	Для Каждого Поле Из ОписаниеКлючаЗаписи.МассивПолей Цикл
		Если Не Данные.ФиксированныйОтбор.Свойство(Поле) Тогда
			Значения = ЗначенияКолонкиТаблицы(Данные.ИзмененияСоставаСтрок, Поле);
			
			Если Значения.Количество() = 1 Тогда
				Данные.ФиксированныйОтбор.Вставить(Поле, Значения[0]);
				Продолжить;
			КонецЕсли;
			
			Если Данные.ИзмеренияОтбора = Неопределено
			 Или Данные.ИзмеренияОтбора.Свойство(Поле) Тогда
				
				МассивИзмеренийОтбора.Добавить(Поле);
				ЗначенияИзмеренийОтбора.Вставить(Поле, Значения);
				
			ИначеЕсли Не ЗначениеЗаполнено(ИзмерениеБезФиксированногоОтбора) Тогда
				ИзмерениеБезФиксированногоОтбора.Вставить("Поле",     Поле);
				ИзмерениеБезФиксированногоОтбора.Вставить("Значения", Значения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивИзмеренийОтбора.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ИзмерениеБезФиксированногоОтбора) Тогда
			Поле     = ИзмерениеБезФиксированногоОтбора.Поле;
			Значения = ИзмерениеБезФиксированногоОтбора.Значения;
		КонецЕсли;
		МассивИзмеренийОтбора.Добавить(Поле);
		ЗначенияИзмеренийОтбора.Вставить(Поле, Значения);
	КонецЕсли;
	
	Данные.Вставить("ИмяПервогоИзмерения", МассивИзмеренийОтбора[0]);
	Данные.Вставить("ЗначенияПервогоИзмерения", ЗначенияИзмеренийОтбора[Данные.ИмяПервогоИзмерения]);
	
	Если МассивИзмеренийОтбора.Количество() > 1 Тогда
		Данные.Вставить("ИмяВторогоИзмерения", МассивИзмеренийОтбора[1]);
		Данные.Вставить("ЗначенияВторогоИзмерения", ЗначенияИзмеренийОтбора[Данные.ИмяВторогоИзмерения]);
	Иначе
		Данные.Вставить("ИмяВторогоИзмерения", Неопределено);
		Данные.Вставить("ЗначенияВторогоИзмерения", Неопределено);
	КонецЕсли;
	
	Если МассивИзмеренийОтбора.Количество() > 2 Тогда
		Данные.Вставить("ИмяТретьегоИзмерения", МассивИзмеренийОтбора[2]);
		Данные.Вставить("ЗначенияТретьегоИзмерения", ЗначенияИзмеренийОтбора[Данные.ИмяТретьегоИзмерения]);
	Иначе
		Данные.Вставить("ИмяТретьегоИзмерения", Неопределено);
		Данные.Вставить("ЗначенияТретьегоИзмерения", Неопределено);
	КонецЕсли;
	
	Данные.Вставить("ПоляСравнения", ОписаниеКлючаЗаписи.СтрокаПолей);
	Данные.Вставить("НовыеЗаписиСодержатТолькоРазличия", Истина);
	Данные.Вставить("НовыеЗаписи", Данные.ИзмененияСоставаСтрок);
	Данные.Удалить("ИзмененияСоставаСтрок");
	Данные.Удалить("ИзмеренияОтбора");
	
	ОбновитьНаборыЗаписей(Данные, ЕстьИзменения);
	
КонецПроцедуры

// Возвращает пустую ссылку объекта метаданных ссылочного типа.
//
// Параметры:
//  ОписаниеОбъектаМетаданных - ОбъектМетаданных,
//                            - Тип, по которому можно найти объект метаданных,
//                            - Строка - полное имя объекта метаданных.
// Возвращаемое значение:
//  Ссылка.
//
Функция ПустаяСсылкаОбъектаМетаданных(ОписаниеОбъектаМетаданных) Экспорт
	
	Если ТипЗнч(ОписаниеОбъектаМетаданных) = Тип("ОбъектМетаданных") Тогда
		ОбъектМетаданных = ОписаниеОбъектаМетаданных;
		
	ИначеЕсли ТипЗнч(ОписаниеОбъектаМетаданных) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеОбъектаМетаданных);
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеОбъектаМетаданных);
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		ВызватьИсключение
			НСтр("ru = 'Ошибка в функции ПустаяСсылкаОбъектаМетаданных
			           |общего модуля УправлениеДоступомСлужебный.
			           |
			           |Неверный параметр ОписаниеОбъектаМетаданных.'");
	КонецЕсли;
	
	ПустаяСсылка = Неопределено;
	Попытка
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
		ПустаяСсылка = МенеджерОбъекта.ПустаяСсылка();
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в функции ПустаяСсылкаОбъектаМетаданных
			           |общего модуля УправлениеДоступомСлужебный.
			           |
			           |Не удалось получить пустую ссылка для объекта метаданных
			           |""%1"".'"),
			ОбъектМетаданных.ПолноеИмя());
	КонецПопытки;
	
	Возврат ПустаяСсылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Создает запрос выбора различий между строками регистра в заданной области данных
// (на основе отборов в параметре ПоляИОтбор).
//
// Параметры:
//  ТекстЗапросаВыбораНовых - Строка.
//
//  ПоляИОтбор   - Массив элементов типа Структура("ИмяПоля", ИмяПараметраУсловияОтбора).
//
//  ПолноеИмяРегистра
//               - Строка       - запрос старых формируется автоматически.
//                 Неопределено - запрос старых берется из следующего параметра.
//
//  ТекстЗапросаВыбораСтарых
//               - Строка       - запрос старых, с учетом нестандартных отборов.
//               - Неопределено - когда полное имя регистра определено.
//
// Возвращаемое значение:
//  Строка - текст запрос с учетом оптимизации для СУБД PostgreSQL.
//
Функция ТекстЗапросаВыбораИзменений(ТекстЗапросаВыбораНовых,
                                    ПоляИОтбор,
                                    ПолноеИмяРегистра            = Неопределено,
                                    ТекстЗапросовВременныхТаблиц = Неопределено,
                                    ТекстЗапросаВыбораСтарых     = Неопределено) Экспорт
	
	// Подготовка текста запроса старых данных.
	Если ПолноеИмяРегистра <> Неопределено Тогда
		ТекстЗапросаВыбораСтарых =
		"ВЫБРАТЬ
		|	&ВыбираемыеПоля,
		|	&ПодстановкаПоляВидИзмененияСтроки
		|ИЗ
		|	ПолноеИмяРегистра КАК СтарыеДанные
		|ГДЕ
		|	&УсловияОтбора";
	КонецЕсли;
	
	ВыбираемыеПоля = "";
	УсловияОтбора = "Истина";
	Для каждого ОписаниеПоля Из ПоляИОтбор Цикл
		// Сборка выбираемых полей.
		ВыбираемыеПоля = ВыбираемыеПоля + СтрЗаменить(
			"
			|	СтарыеДанные.Поле,",
			"Поле",
			КлючИЗначение(ОписаниеПоля).Ключ);
			
		// Сборка условий отбора.
		Если ЗначениеЗаполнено(КлючИЗначение(ОписаниеПоля).Значение) Тогда
			УсловияОтбора = УсловияОтбора + СтрЗаменить(
				"
				|	И &ИмяПараметраУсловияОтбора", "&ИмяПараметраУсловияОтбора",
				КлючИЗначение(ОписаниеПоля).Значение);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапросаВыбораСтарых =
		СтрЗаменить(ТекстЗапросаВыбораСтарых, "&ВыбираемыеПоля,",  ВыбираемыеПоля);
	
	ТекстЗапросаВыбораСтарых =
		СтрЗаменить(ТекстЗапросаВыбораСтарых, "&УсловияОтбора",    УсловияОтбора);
	
	ТекстЗапросаВыбораСтарых =
		СтрЗаменить(ТекстЗапросаВыбораСтарых, "ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	Если СтрНайти(ТекстЗапросаВыбораНовых, "&ПодстановкаПоляВидИзмененияСтроки") = 0 Тогда
		ВызватьИсключение
			НСтр("ru = 'Ошибка в значении параметра ТекстЗапросаВыбораСтарых
			           |процедуры ТекстЗапросаВыбораИзменений модуля УправлениеДоступомСлужебный.
			           |
			           |В тексте запроса не найдена строка ""&ПодстановкаПоляВидИзмененияСтроки"".'");
	КонецЕсли;
	
	ТекстЗапросаВыбораСтарых = СтрЗаменить(
		ТекстЗапросаВыбораСтарых, "&ПодстановкаПоляВидИзмененияСтроки", "-1 КАК ВидИзмененияСтроки");
	
	Если СтрНайти(ТекстЗапросаВыбораНовых, "&ПодстановкаПоляВидИзмененияСтроки") = 0 Тогда
		ВызватьИсключение
			НСтр("ru = 'Ошибка в значении параметра ТекстЗапросаВыбораНовых
			           |процедуры ТекстЗапросаВыбораИзменений модуля УправлениеДоступомСлужебный.
			           |
			           |В тексте запроса не найдена строка ""&ПодстановкаПоляВидИзмененияСтроки"".'");
	КонецЕсли;
	
	ТекстЗапросаВыбораНовых = СтрЗаменить(
		ТекстЗапросаВыбораНовых,  "&ПодстановкаПоляВидИзмененияСтроки", "1 КАК ВидИзмененияСтроки");
	
	// Подготовка текста запроса выбора изменений.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ВыбираемыеПоля,
	|	СУММА(ВсеСтроки.ВидИзмененияСтроки) КАК ВидИзмененияСтроки
	|ИЗ
	|	(ТекстЗапросаВыбораНовых
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ТекстЗапросаВыбораСтарых) КАК ВсеСтроки
	|	
	|СГРУППИРОВАТЬ ПО
	|	&ПоляГруппировки
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ВсеСтроки.ВидИзмененияСтроки) <> 0";
	
	ВыбираемыеПоля = "";
	ПоляГруппировки = "";
	Для каждого ОписаниеПоля Из ПоляИОтбор Цикл
		// Сборка выбираемых полей.
		ВыбираемыеПоля = ВыбираемыеПоля + СтрЗаменить(
			"
			|	ВсеСтроки.Поле,",
			"Поле",
			КлючИЗначение(ОписаниеПоля).Ключ);
		
		// Сборка полей соединения.
		ПоляГруппировки = ПоляГруппировки + СтрЗаменить(
			"
			|	ВсеСтроки.Поле,",
			"Поле",
			КлючИЗначение(ОписаниеПоля).Ключ);
	КонецЦикла;
	ПоляГруппировки = Лев(ПоляГруппировки, СтрДлина(ПоляГруппировки)-1);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыбираемыеПоля,",  ВыбираемыеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляГруппировки", ПоляГруппировки);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, "ТекстЗапросаВыбораНовых",  ТекстЗапросаВыбораНовых);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, "ТекстЗапросаВыбораСтарых", ТекстЗапросаВыбораСтарых);
	
	Если ЗначениеЗаполнено(ТекстЗапросовВременныхТаблиц) Тогда
		ТекстЗапроса = ТекстЗапросовВременныхТаблиц
		+ "
		  |;
		  |" + ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Обработчики - ТаблицаЗначений, Неопределено - см. описание
//    функции НоваяТаблицаОбработчиковОбновления общего модуля
//    ОбновлениеИнформационнойБазы.
//    В случае прямого вызова (не через механизм обновления
//    версии ИБ) передается Неопределено.
// 
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И ЕстьИзмененияПараметровОграниченияДоступа() Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "УправлениеДоступомСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации";
	КонецЕсли;
	
КонецПроцедуры

// Обновляет вспомогательные данные, которые зависят от конфигурации частично.
//
// Обновляется при наличии изменений конфигурации, записанных в параметры
// ограничения доступа при обновлении базы данных на текущую версию конфигурации.
//
Процедура ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации(Параметры = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ТаблицыГруппДоступа");
	Блокировка.Добавить("РегистрСведений.НастройкиПравОбъектов");
	Блокировка.Добавить("Справочник.ПрофилиГруппДоступа");
	Блокировка.Добавить("Справочник.ГруппыДоступа");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистраПоИзменениямКонфигурации();
		РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьВспомогательныеДанныеРегистраПоИзменениямКонфигурации();
		РегистрыСведений.НастройкиПравОбъектов.ОбновитьВспомогательныеДанныеРегистраПоИзменениямКонфигурации();
		Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофилиПоИзменениямКонфигурации();
		Справочники.ГруппыДоступа.ПометитьНаУдалениеГруппыДоступаПомеченныхПрофилей();
		РегистрыСведений.НаборыЗначенийДоступа.ОбновитьВспомогательныеДанныеРегистраПоИзменениямКонфигурации();
		РегистрыСведений.ПараметрыОграниченияДоступа.ОбновитьДанныеРегистра();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Преобразует реквизит УдалитьРоль в реквизит Роль в табличной части Роли
// справочника Профили групп доступа.
//
Процедура ПреобразоватьИменаРолейВИдентификаторы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Роли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|ГДЕ
	|	НЕ(Роли.Роль <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
	|				И Роли.УдалитьРоль = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Индекс = Объект.Роли.Количество()-1;
		Пока Индекс >= 0 Цикл
			Строка = Объект.Роли[Индекс];
			Если ЗначениеЗаполнено(Строка.Роль) Тогда
				Строка.УдалитьРоль = "";
			ИначеЕсли ЗначениеЗаполнено(Строка.УдалитьРоль) Тогда
				МетаданныеРоли = Метаданные.Роли.Найти(Строка.УдалитьРоль);
				Если МетаданныеРоли <> Неопределено Тогда
					Строка.УдалитьРоль = "";
					Строка.Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
						МетаданныеРоли);
				Иначе
					Объект.Роли.Удалить(Индекс);
				КонецЕсли;
			Иначе
				Объект.Роли.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс-1;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет настройки и включает регламентное задание.
Процедура ВключитьЗаполнениеДанныхДляОграниченияДоступа() Экспорт
	
	Использование = Константы.ОграничиватьДоступНаУровнеЗаписей.Получить();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		УстановитьЗаполнениеДанныхДляОграниченияДоступа(Использование);
	Иначе
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ПериодНедель = 1;
		Расписание.ПериодПовтораДней = 1;
		Расписание.ПериодПовтораВТечениеДня = 300;
		Расписание.ПаузаПовтора = 90;
		
		ЗаданиеМетаданные = Метаданные.РегламентныеЗадания.ЗаполнениеДанныхДляОграниченияДоступа;
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(ЗаданиеМетаданные);
		
		Задание.Использование = Использование;
		Задание.Расписание = Расписание;
		
		Задание.ИнтервалПовтораПриАварийномЗавершении
			= ЗаданиеМетаданные.ИнтервалПовтораПриАварийномЗавершении;
		
		Задание.КоличествоПовторовПриАварийномЗавершении
			= ЗаданиеМетаданные.КоличествоПовторовПриАварийномЗавершении;
		
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет назначение профилей групп доступа.
Процедура ЗаполнитьНазначениеПрофилейГруппДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	НЕ(ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных <> &ПустойУникальныйИдентификатор
	|				И НЕ ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен)
	|	И НЕ ПрофилиГруппДоступа.ЭтоГруппа
	|	И НЕ ПрофилиГруппДоступа.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПрофилиГруппДоступаНазначение.Ссылка
	|				ИЗ
	|					Справочник.ПрофилиГруппДоступа.Назначение КАК ПрофилиГруппДоступаНазначение)";
	
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПрофильОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоваяСтрока = ПрофильОбъект.Назначение.Добавить();
		НоваяСтрока.ТипПользователей = Справочники.Пользователи.ПустаяСсылка();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПрофильОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Заменят удаленные роли на новые.
Процедура ЗаменитьУдаленныеРолиВПрофиляхГруппДоступа() Экспорт
	
	// Заполнение списка удаленных ролей и соответствующих новых ролей.
	СоответствиеРолей = Новый Соответствие;
	
	// ДобавлениеИзменениеБазовойНСИ
	ИмяРоли = "? ДобавлениеИзменениеБазовойНСИ";
	
	МассивРолей = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеКурсовВалют");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрафикиРаботы") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеГрафиковРаботы");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	КонецЕсли;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ДобавлениеИзменениеОбщейБазовойНСИ
	ИмяРоли = "? ДобавлениеИзменениеОбщейБазовойНСИ";
	
	МассивРолей = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеАдресныхСведений");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Банки") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеБанков");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КалендарныеГрафики") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеКалендарныхГрафиков");
	КонецЕсли;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ИзменениеТекущегоПользователя
	ИмяРоли = "? ИзменениеТекущегоПользователя";
	
	МассивРолей = Новый Массив;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ИзменениеТекущегоВнешнегоПользователя
	ИмяРоли = "? ИзменениеТекущегоВнешнегоПользователя";
	
	МассивРолей = Новый Массив;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ЧтениеБазовойНСИ
	ИмяРоли = "? ЧтениеБазовойНСИ";
	
	МассивРолей = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрафикиРаботы") Тогда
		МассивРолей.Добавить("ЧтениеГрафиковРаботы");
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		МассивРолей.Добавить("ЧтениеКурсовВалют");
	КонецЕсли;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ЧтениеОбщейБазовойНСИ
	ИмяРоли = "? ЧтениеОбщейБазовойНСИ";
	
	МассивРолей = Новый Массив;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	// ДобавлениеИзменениеСтранМира
	ИмяРоли = "? ДобавлениеИзменениеСтранМира";
	
	МассивРолей = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеВидовКонтактнойИнформации");
	КонецЕсли;
	СоответствиеРолей.Вставить(ИмяРоли, МассивРолей);
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(СоответствиеРолей);
	
КонецПроцедуры

// Обновляет данные профиля "ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок".
Процедура ОбновитьДанныеПрофиляОткрытиеВнешнихОтчетовИОбработок() Экспорт
	
	УникальныйИдентификаторПрофиля = Новый УникальныйИдентификатор(
		ИдентификаторПрофиляОткрытиеВнешнихОтчетовИОбработок());
	
	Ссылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(УникальныйИдентификаторПрофиля);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СсылкаПометитьНаУдаление = Ложь;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СсылкаПометитьНаУдаление = Истина;
	Иначе
		ОписаниеПрофиля = ОписаниеПрофиляОткрытиеВнешнихОтчетовИОбработок();
		ПоставляемыйПрофильСсылка = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
			ОписаниеПрофиля.Имя);
		
		Если Ссылка <> ПоставляемыйПрофильСсылка Тогда
			Если ПоставляемыйПрофильСсылка <> Неопределено Тогда
				СсылкаПометитьНаУдаление = Истина;
			Иначе
				// Установка идентификатора поставляемых данных.
				ПрофильОбъект = Ссылка.ПолучитьОбъект();
				ПрофильОбъект.ИдентификаторПоставляемыхДанных = УникальныйИдентификаторПрофиля;
				ПрофильОбъект.Комментарий = "";
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СсылкаПометитьНаУдаление Тогда
		ПрофильОбъект = Ссылка.ПолучитьОбъект();
		ПрофильОбъект.ПометкаУдаления = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПрофильОбъект, Ложь);
		
		ГруппыПрофиля = ГруппыПрофиля(Ссылка, Ложь);
		Для Каждого СсылкаГруппы Из ГруппыПрофиля Цикл
			ГруппаОбъект = СсылкаГруппы.ПолучитьОбъект();
			ГруппаОбъект.ПометкаУдаления = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ГруппаОбъект, Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Функция ПраваРолейРасширений() Экспорт
	
	ПраваРолейРасширений = Неопределено;
	
	ОбновитьТаблицыГруппДоступаДляПодключенныхРасширений(ПраваРолейРасширений);
	
	Возврат ПраваРолейРасширений;
	
КонецФункции

Процедура ОбновитьТаблицыГруппДоступаДляПодключенныхРасширений(ПраваРолейРасширений = Неопределено)
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		Если МодульОбменДаннымиСервер.НастройкаПодчиненногоУзлаРИБ() Тогда
			ПраваРолейРасширений = РегистрыСведений.ПраваРолей.ТаблицаПравРолей(Истина, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяВерсияРасширений = ПараметрыСеанса.ПодключенныеРасширения;
	
	// Заполнение прав ролей расширений, которые состоят
	// из изменений прав на объекты конфигурации и прав на объекты расширений.
	УстановитьНовыеПраваРолейРасширений = Ложь;
	Если ЗначениеЗаполнено(ТекущаяВерсияРасширений) Тогда
		ПраваРолейРасширений = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(
			"УправлениеДоступом.ПраваРолей");
		
		Если ПраваРолейРасширений = Неопределено Тогда
			Запрос = РегистрыСведений.ПраваРолей.ЗапросИзменений(Истина);
			ПраваРолейРасширений = Запрос.Выполнить().Выгрузить();
			УстановитьНовыеПраваРолейРасширений = Истина;
		Иначе
			ПраваРолейРасширений = ПраваРолейРасширений.Получить();
		КонецЕсли;
	Иначе
		ПраваРолейРасширений = РегистрыСведений.ПраваРолей.ТаблицаПравРолей(Истина, Истина);
	КонецЕсли;
	
	// Проверка необходимости обновления регистра ТаблицыГруппДоступа.
	ПараметрыОбновления = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(
		"УправлениеДоступом.ПараметрыОбновленияТаблицГруппДоступа", Истина);
	
	Если ТипЗнч(ПараметрыОбновления) <> Тип("Структура")
	 Или Не ПараметрыОбновления.Свойство("ПоследняяВерсияРасширений")
	 Или Не ПараметрыОбновления.Свойство("ПоследниеОбъектыСИзменениемПрав")
	 Или ТипЗнч(ПараметрыОбновления.ПоследниеОбъектыСИзменениемПрав) <> Тип("ФиксированныйМассив") Тогда
		
		ТребуетсяОбновление = Истина;
		ПоследниеОбъектыСИзменениемПрав = Неопределено;
	Иначе
		ПоследниеОбъектыСИзменениемПрав = ПараметрыОбновления.ПоследниеОбъектыСИзменениемПрав;
		ТребуетсяОбновление = ПараметрыОбновления.ПоследняяВерсияРасширений <> ТекущаяВерсияРасширений;
	КонецЕсли;
	
	Если Не ТребуетсяОбновление Тогда
		Если УстановитьНовыеПраваРолейРасширений Тогда;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(
				"УправлениеДоступом.ПраваРолей", Новый ХранилищеЗначения(ПраваРолейРасширений));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ТекущиеОбъектыСИзменениемПрав = РегистрыСведений.ПраваРолей.ИзмененныеОбъектыМетаданных(
		ПраваРолейРасширений.Скопировать());
	
	Если ПоследниеОбъектыСИзменениемПрав = Неопределено Тогда
		// Так как последние изменения недоступны, требуется обновить весь регистр.
		ОбъектыСИзменениемПравДляОбновления = Неопределено;
	Иначе
		ОбъектыСИзменениемПравДляОбновления = Новый Массив(ТекущиеОбъектыСИзменениемПрав);
		Для Каждого Идентификатор Из ПоследниеОбъектыСИзменениемПрав Цикл
			ОбъектыСИзменениемПравДляОбновления.Добавить(Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ПоследняяВерсияРасширений",       ТекущаяВерсияРасширений);
	ПараметрыОбновления.Вставить("ПоследниеОбъектыСИзменениемПрав", ТекущиеОбъектыСИзменениемПрав);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.ТаблицыГруппДоступа");
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Если УстановитьНовыеПраваРолейРасширений Тогда;
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(
				"УправлениеДоступом.ПраваРолей", Новый ХранилищеЗначения(ПраваРолейРасширений));
		КонецЕсли;
		СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(
			"УправлениеДоступом.ПараметрыОбновленияТаблицГруппДоступа", ПараметрыОбновления, Истина);
		РегистрыСведений.ТаблицыГруппДоступа.ОбновитьДанныеРегистра(, ОбъектыСИзменениемПравДляОбновления);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриИзмененииНаборовЗначенийДоступа(Знач СсылкаНаОбъект, ОбновлениеИБ = Ложь)
	
	СсылкиНаЗависимыеОбъекты = Новый Массив;
	
	УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(
		СсылкаНаОбъект, СсылкиНаЗависимыеОбъекты);
	
	Для каждого СсылкаНаЗависимыйОбъект Из СсылкиНаЗависимыеОбъекты Цикл
		
		Если СсылкаНаЗависимыйОбъект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			// Изменение объекта не требуется.
			ЗаписатьНаборыЗначенийДоступа(СсылкаНаЗависимыйОбъект, , ОбновлениеИБ);
		Иначе
			// Изменение объекта требуется.
			Объект = СсылкаНаЗависимыйОбъект.ПолучитьОбъект();
			Таблица = ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
			Если НЕ НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаЗависимыйОбъект, Таблица) Тогда
				Продолжить;
			КонецЕсли;
			ПодготовитьНаборыЗначенийДоступаКЗаписи(Неопределено, Таблица, Ложь);
			Попытка
				ЗаблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект, Объект.ВерсияДанных);
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
				Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
				Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
				Если ОбновлениеИБ Тогда
					Объект.ДополнительныеСвойства.Вставить("ЗаписьНаборовЗначенийДоступаПриОбновленииИБ");
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
				Иначе
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();
				КонецЕсли;
				РазблокироватьДанныеДляРедактирования(СсылкаНаЗависимыйОбъект);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обновлении зависимого набора значений доступа объекта
					           |""%1"" возникла ошибка:
					           |
					           |%2'"),
					Строка(СсылкаНаЗависимыйОбъект),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторПрофиляОткрытиеВнешнихОтчетовИОбработок()
	
	Возврат "1b3472f6-4d87-11e6-8264-5404a6a6895d";
	
КонецФункции

Функция ЭтоПрофильОткрытиеВнешнихОтчетовИОбработок(Профиль) Экспорт
	
	Если ТипЗнч(Профиль) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		ИдентификаторПрофиля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Профиль, "ИдентификаторПоставляемыхДанных");
		
	ИначеЕсли Не Профиль.ЭтоГруппа Тогда
		ИдентификаторПрофиля = Профиль.ИдентификаторПоставляемыхДанных;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВРег(Строка(ИдентификаторПрофиля)) = ВРег(ИдентификаторПрофиляОткрытиеВнешнихОтчетовИОбработок());
	
КонецФункции

Функция ОписаниеПрофиляОткрытиеВнешнихОтчетовИОбработок() Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "ОткрытиеВнешнихОтчетовИОбработок";
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляОткрытиеВнешнихОтчетовИОбработок();
	
	ОписаниеПрофиля.Наименование =
		НСтр("ru = 'Открытие внешних отчетов и обработок'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ОписаниеПрофиля.Описание =
		НСтр("ru = 'Предоставляет право открытия внешних отчетов и обработок из меню ""Файл - Открыть"".
		           |Состав ролей профиля не рекомендуется изменять.'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ОписаниеПрофиля.Роли.Добавить("ИнтерактивноеОткрытиеВнешнихОтчетовИОбработок");
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ГруппаДоступаОткрытиеВнешнихОтчетовИОбработок(СвойстваПрофиля)
	
	// Поиск по идентификатору.
	УникальныйИдентификатор = Новый УникальныйИдентификатор("f6929bcb-532f-11e6-a20f-5404a6a6895d");
	Ссылка = Справочники.ГруппыДоступа.ПолучитьСсылку(УникальныйИдентификатор);
	СсылкаСуществует = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Ссылка") <> Неопределено);
	Если СсылкаСуществует Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Поиск по профилю.
	ГруппыПрофиля = ГруппыПрофиля(СвойстваПрофиля.Ссылка, Неопределено);
	Если ГруппыПрофиля.Количество() > 0 Тогда
		Возврат ГруппыПрофиля[0];
	КонецЕсли;
	
	// Создание группы.
	ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
	ГруппаДоступаОбъект.УстановитьСсылкуНового(Ссылка);
	ГруппаДоступаОбъект.Наименование = СвойстваПрофиля.Наименование;
	ГруппаДоступаОбъект.Профиль      = СвойстваПрофиля.Ссылка;
	ГруппаДоступаОбъект.Комментарий  =
		НСтр("ru = 'Предоставляет право открытия внешних отчетов и обработок из меню ""Файл - Открыть"".'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ГруппаДоступаОбъект.Записать(); // Важно, чтобы созданная группа "уехала" в подчиненный узел.
	
	Возврат ГруппаДоступаОбъект.Ссылка;
	
КонецФункции

Функция ГруппыПрофиля(СсылкаПрофиля, ПометкаУдаления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Профиль = &Профиль
	|	И ГруппыДоступа.ПометкаУдаления = &ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппыДоступа.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Профиль", СсылкаПрофиля);
	
	Если ПометкаУдаления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ГруппыДоступа.ПометкаУдаления = &ПометкаУдаления", "");
	Иначе
		Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Для функция РазрешенныеЗначенияДляДинамическогоСписка, ЕстьОграничениеПоВидуДоступа.
Функция ТекстЗапросаГруппДоступа()
	
	Возврат
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК СвойстваТекущейТаблицы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО (СвойстваТекущейТаблицы.ПолноеИмя = &ИмяОсновнойТаблицыСписка)
	|			И (ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|				ГДЕ
	|					ТаблицыГруппДоступа.Таблица = СвойстваТекущейТаблицы.Ссылка
	|					И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка))
	|			И (ГруппыДоступа.Ссылка В
	|				(ВЫБРАТЬ
	|					ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|				ИЗ
	|					Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|						ПО
	|							СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь
	|								И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь))";
	
КонецФункции

// Для процедур ОбновитьНаборЗаписей, ОбновитьНаборыЗаписей, ОбновитьРегистрСведений.
Процедура ЗаполнитьПараметры(ВходныеПараметры, Знач ВсеПараметры, Знач ОбязательныеПараметры = "")
	
	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") Тогда
		Параметры = ВходныеПараметры;
	ИначеЕсли ВходныеПараметры = Неопределено Тогда
		Параметры = Новый Структура;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректный тип набора свойств ""%1"".
			           |Допустимые типы: Структура, Неопределено.'"),
			ТипЗнч(ВходныеПараметры));
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Параметры Цикл
		Если Не ВсеПараметры.Свойство(КлючИЗначение.Ключ) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан несуществующий параметр %1'"),
				КлючИЗначение.Ключ);
		КонецЕсли;
		ВсеПараметры[КлючИЗначение.Ключ] = Параметры[КлючИЗначение.Ключ];
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбязательныеПараметры) Тогда
		ОбязательныеПараметры = Новый Структура(ОбязательныеПараметры);
		
		Для каждого КлючИЗначение Из ОбязательныеПараметры Цикл
			Если Не Параметры.Свойство(КлючИЗначение.Ключ) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не указан обязательный параметр %1'"),
					КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВходныеПараметры = ВсеПараметры;
	
КонецПроцедуры

// Для процедур ПриОтправкеДанныхГлавному, ПриОтправкеДанныхПодчиненному,
// ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного.
//
Функция ИмяОбъектаПодсистемыУправлениеДоступомНачинаетсяСУдалить(ЭлементДанных)
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("ПланВидовХарактеристикОбъект.УдалитьВидыДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.УдалитьГруппыЗначенийДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.УдалитьНаборыЗначенийДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.УдалитьПраваПоЗначениямДоступа");
	
КонецФункции

// Для процедур ПриОтправкеДанныхГлавному, ПриОтправкеДанныхПодчиненному,
// ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного.
//
Функция ОбъектПодсистемыУправлениеДоступомТолькоДляСозданияНачальногоОбраза(ЭлементДанных)
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ПраваРолей")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЗависимостиПравДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ТаблицыГруппДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЗначенияГруппДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ЗначенияГруппДоступаПоУмолчанию")
	    Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.КлючиДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.КлючиДоступаВнешнихПользователей")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.КлючиДоступаГруппДоступа")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.КлючиДоступаКОбъектам")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.КлючиДоступаКРегистрам")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.КлючиДоступаПользователей")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ОбновлениеКлючейДоступаКДанным")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ОбновлениеКлючейДоступаПользователей")
	    Или ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ПараметрыОграниченияДоступа");
	
КонецФункции

// Для процедур ПриПолученииДанныхОтГлавного, ПриПолученииДанныхОтПодчиненного
Процедура ПриПолученииДанныхОтГлавногоИлиОтПодчиненного(ЭлементДанных)
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		// Роли расширений назначаются независимо во всех РИБ-узлах.
		Справочники.ПрофилиГруппДоступа.ВосстановитьСоставРолейРасширений(ЭлементДанных);
		// Регистрация измененного профиля для обновления вспомогательных данных.
		Справочники.ПрофилиГруппДоступа.ЗарегистрироватьПрофильИзмененныйПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыДоступа") Тогда
		// Администраторы назначаются независимо во всех РИБ-узлах.
		Справочники.ГруппыДоступа.ВосстановитьСоставУчастниковГруппыДоступаАдминистраторы(ЭлементДанных);
		// Регистрация измененной группы доступа для обновления вспомогательных данных.
		Справочники.ГруппыДоступа.ЗарегистрироватьГруппуДоступаИзмененнуюПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	// Регистрация пользователей, измененных в группе пользователей, для обновления ролей после получения данных.
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыПользователей")
	 Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ГруппыВнешнихПользователей") Тогда
		Справочники.ГруппыДоступа.ЗарегистрироватьПользователейГруппыПользователейИзмененнойПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	// Регистрация пользователя, измененного при загрузке для обновления ролей после загрузки.
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Пользователи")
	 Или ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		Справочники.ГруппыДоступа.ЗарегистрироватьПользователяИзмененногоПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация измененного профиля для обновления вспомогательных данных после загрузки.
	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Справочники.ПрофилиГруппДоступа.ЗарегистрироватьПрофильИзмененныйПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	// Регистрация измененной группы доступа для обновления вспомогательных данных после загрузки.
	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ГруппыДоступа") Тогда
		Справочники.ГруппыДоступа.ЗарегистрироватьГруппуДоступаИзмененнуюПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	// Регистрация пользователей, измененных в группе пользователей, для обновления ролей после загрузки.
	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ГруппыПользователей")
	 Или ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		Справочники.ГруппыДоступа.ЗарегистрироватьПользователейГруппыПользователейИзмененнойПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
	// Регистрация пользователя, измененного при загрузке для обновления ролей после загрузки.
	Если ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.Пользователи")
	 Или ТипЗнч(ЭлементДанных.Ссылка) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Справочники.ГруппыДоступа.ЗарегистрироватьПользователяИзмененногоПриЗагрузке(ЭлементДанных);
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПослеПолученияДанных, ПослеОбновленияИнформационнойБазы.
Процедура ОбновитьВспомогательныеДанныеЭлементовИзмененныхПриЗагрузке()
	
	Справочники.ПрофилиГруппДоступа.ОбновитьВспомогательныеДанныеПрофилейИзмененныхПриЗагрузке();
	Справочники.ГруппыДоступа.ОбновитьВспомогательныеДанныеГруппДоступаИзмененныхПриЗагрузке();
	Справочники.ГруппыДоступа.ОбновитьРолиПользователейИзмененныхПриЗагрузке();
	
КонецПроцедуры

// Для процедур ВключитьПользователяВГруппуДоступа, ИсключитьПользователяИзГруппыДоступа
// и функции НайтиПользователяВГруппеДоступа.

Функция ОбработатьСвязьПользователяСГруппойДоступа(Пользователь, ПоставляемыйПрофиль, Включить = Неопределено)
	
	Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи")
	   И ТипЗнч(Пользователь) <> Тип("СправочникСсылка.ГруппыПользователей")
	   И ТипЗнч(Пользователь) <> Тип("СправочникСсылка.ВнешниеПользователи")
	   И ТипЗнч(Пользователь) <> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторПоставляемогоПрофиля = Неопределено;
	
	Если ТипЗнч(ПоставляемыйПрофиль) = Тип("Строка") Тогда
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ПоставляемыйПрофиль) Тогда
			
			ИдентификаторПоставляемогоПрофиля = ПоставляемыйПрофиль;
			
			ПоставляемыйПрофиль = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
				ИдентификаторПоставляемогоПрофиля);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПоставляемыйПрофиль) <> Тип("СправочникСсылка.ПрофилиГруппДоступа") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИдентификаторПоставляемогоПрофиля = Неопределено Тогда
		ИдентификаторПоставляемогоПрофиля =
			Справочники.ПрофилиГруппДоступа.ИдентификаторПоставляемогоПрофиля(ПоставляемыйПрофиль);
	КонецЕсли;
	
	Если ИдентификаторПоставляемогоПрофиля = Справочники.ПрофилиГруппДоступа.ИдентификаторПрофиляАдминистратор() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоставляемыеПрофили = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей();
	СвойстваПрофиля = ПоставляемыеПрофили.ОписанияПрофилей.Получить(ИдентификаторПоставляемогоПрофиля);
	
	Если СвойстваПрофиля = Неопределено
	 ИЛИ СвойстваПрофиля.ВидыДоступа.Количество() <> 0 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ГруппаДоступа = Неопределено;
	
	Если УпрощенныйИнтерфейсНастройкиПравДоступа() Тогда
		
		Если ТипЗнч(Пользователь) <> Тип("СправочникСсылка.Пользователи")
		   И ТипЗнч(Пользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Профиль", ПоставляемыйПрофиль);
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Профиль = &Профиль
		|	И ГруппыДоступа.Пользователь = &Пользователь";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГруппаДоступа = Выборка.Ссылка;
		КонецЕсли;
		
		Если ГруппаДоступа = Неопределено Тогда
			Если Включить <> Истина Тогда
				Возврат Ложь;
			Иначе
				ГруппаДоступа = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступа.Наименование = СвойстваПрофиля.Наименование;
				ГруппаДоступа.Профиль      = ПоставляемыйПрофиль;
				ГруппаДоступа.Пользователь = Пользователь;
				ГруппаДоступа.Пользователи.Добавить().Пользователь = Пользователь;
				ГруппаДоступа.Записать();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПоставляемыйПрофиль", ПоставляемыйПрофиль);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ГруппыДоступа.Ссылка КАК Ссылка,
		|	ГруппыДоступа.ОсновнаяГруппаДоступаПоставляемогоПрофиля
		|ИЗ
		|	Справочник.ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ГруппыДоступа.Профиль = &ПоставляемыйПрофиль
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппыДоступа.ОсновнаяГруппаДоступаПоставляемогоПрофиля УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГруппаДоступа = Выборка.Ссылка;
		КонецЕсли;
		
		Если ГруппаДоступа = Неопределено Тогда
			Если Включить <> Истина Тогда
				Возврат Ложь;
			Иначе
				ГруппаДоступа = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступа.ОсновнаяГруппаДоступаПоставляемогоПрофиля = Истина;
				ГруппаДоступа.Наименование = СвойстваПрофиля.Наименование;
				ГруппаДоступа.Профиль = ПоставляемыйПрофиль;
				ГруппаДоступа.Пользователи.Добавить().Пользователь = Пользователь;
				ГруппаДоступа.Записать();
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ГруппаДоступа);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК УчастникиГруппы
	|ГДЕ
	|	УчастникиГруппы.Ссылка = &Ссылка
	|	И УчастникиГруппы.Пользователь = &Пользователь";
	ПользовательНайден = НЕ Запрос.Выполнить().Пустой();
	
	Если Включить = Неопределено Тогда
		Возврат ПользовательНайден;
	КонецЕсли;
	
	Если Включить И ПользовательНайден Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Включить И НЕ ПользовательНайден Тогда
		Возврат Истина;
	КонецЕсли;
	
	ГруппаДоступа = ГруппаДоступа.ПолучитьОбъект();
	
	Если НЕ УпрощенныйИнтерфейсНастройкиПравДоступа()
	   И НЕ ГруппаДоступа.ОсновнаяГруппаДоступаПоставляемогоПрофиля Тогда
		
		ГруппаДоступа.ОсновнаяГруппаДоступаПоставляемогоПрофиля = Истина;
	КонецЕсли;
	
	Если Включить Тогда
		ГруппаДоступа.Пользователи.Добавить().Пользователь = Пользователь;
	Иначе
		Отбор = Новый Структура("Пользователь", Пользователь);
		Строки = ГруппаДоступа.Пользователи.НайтиСтроки(Отбор);
		Для каждого Строка Из Строки Цикл
			ГруппаДоступа.Пользователи.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	ГруппаДоступа.Записать();
	
	Возврат Истина;
	
КонецФункции

// Для процедуры ЗаписатьНаборыЗначенийДоступаПриЗаписи.

// Перезаписывает наборы значений доступа проверяемого объекта
// в РегистрСведений.НаборыЗначенийДоступа, используя процедуру
// УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа().
//
// Процедура вызывается из УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// но может быть вызвана из любого места, например,
// при включении ограничения доступа на уровне записей.
//
// Вызывает процедуру прикладного разработчика
// УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(),
// которая используется для перезаписи зависимых наборов значений доступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//  ОбновлениеИБ - Булево - если Истина, то необходимо выполнять запись данных, 
//                 не выполняя лишних, избыточных действий с данными.
//                 См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//
Процедура ЗаписатьНаборыЗначенийДоступа(Знач Объект, ЕстьИзменения = Неопределено, ОбновлениеИБ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	НаборыЗаписываются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ НаборыЗаписываются Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверные параметры.
			           |Тип объекта ""%1""
			           |не найден в подписках на события
			           |""Записать наборы значений доступа"".'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	ВозможныеТипыОбъектов = УправлениеДоступомСлужебныйПовтИсп.ТипыПоляТаблицы(
		"РегистрСведений.НаборыЗначенийДоступа.Измерение.Объект");
	
	Если ВозможныеТипыОбъектов.Получить(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при записи наборов значений доступа:
			           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
			           |не задан тип ""%1"".'"),
			СсылкаНаОбъект.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
	   И Не ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		
		Если Метаданные.НайтиПоТипу(ТипЗначенияОбъект).ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
			
			Таблица = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
			УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа(Объект, Таблица);
			
			УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(
				Таблица, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
		Иначе
			ТабличнаяЧастьЗаполняется = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
				"ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей").Получить(ТипЗначенияОбъект) <> Неопределено;
			
			Если НЕ ТабличнаяЧастьЗаполняется Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверные параметры.
					           |Тип объекта ""%1""
					           |не найден в подписках на события
					           |""Заполнить наборы значений доступа табличных частей"".'"),
					ТипЗначенияОбъект);
			КонецЕсли;
			// Записан объект с уже заполненной табличной частью НаборыЗначенийДоступа.
			Таблица = Объект.НаборыЗначенийДоступа.Выгрузить();
		КонецЕсли;
		
		ПодготовитьНаборыЗначенийДоступаКЗаписи(СсылкаНаОбъект, Таблица, Истина);
		
		Данные = Новый Структура;
		Данные.Вставить("МенеджерРегистра",   РегистрыСведений.НаборыЗначенийДоступа);
		Данные.Вставить("ФиксированныйОтбор", Новый Структура("Объект", СсылкаНаОбъект));
		Данные.Вставить("НовыеЗаписи",        Таблица);
		Данные.Вставить("ОбновлениеИБ",       ОбновлениеИБ);
		
		НачатьТранзакцию();
		Попытка
			ОбновитьНаборыЗаписей(Данные, ЕстьИзменения);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЕстьИзменения = Истина Тогда
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект, ОбновлениеИБ);
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	РегистрСведений.НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|ГДЕ
		|	НаборыЗначенийДоступа.Объект = &СсылкаНаОбъект");
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			// Очистка устаревшего набора.
			// Запись нового набора будет выполнена регламентным заданием,
			// после включения ограничения на уровне записей.
			НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Записать();
			ЕстьИзменения = Истина;
			
			// Очистка устаревших зависимых наборов.
			ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект, ОбновлениеИБ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ЗаписатьЗависимыеНаборыЗначенийДоступаПриЗаписи.

// Перезаписывает наборы значений доступа зависимых объектов.
//
//  Процедура вызывается из УправлениеДоступомСлужебный.ЗаписатьЗависимыеНаборыЗначенийДоступа(),
// состав типов подписки дополняет (без пересечения) состав типов подписки ЗаписатьНаборыЗначенийДоступа,
// теми типами, для которых выполнять запись наборов в регистр сведений НаборыЗначенийДоступа
// не требуется, но сами наборы входят в состав других наборов, например, наборы некоторых файлов
// из справочника "Файлы" могут входить в состав некоторых бизнес-процессов "Задание", созданных
// на основании файлов, при этом наборы файлов записывать в регистр не требуется.
//
// Вызывает процедуру прикладного разработчика
// УправлениеДоступомПереопределяемый.ПриИзмененииНаборовЗначенийДоступа(),
// которая используется для перезаписи зависимых наборов значений доступа,
// то есть организуется рекурсия.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 В случае вызова с клиента можно передать только ссылку, а нужен объект.
//                 Если получена ссылка, то по ней будет получен объект.
//
//  ОбновлениеИБ - Булево - если Истина, то необходимо выполнять запись данных, 
//                 не выполняя лишних, избыточных действий с данными.
//                 См. ОбновлениеИнформационнойБазы.ЗаписатьДанные.
//
Процедура ЗаписатьЗависимыеНаборыЗначенийДоступа(Знач Объект, ОбновлениеИБ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	ЭтоВедущийОбъект = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ ЭтоВедущийОбъект Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверные параметры.
			           |Тип объекта ""%1""
			           |не найден в подписке на события
			           |""Записать зависимые наборы значений доступа"".'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	ПриИзмененииНаборовЗначенийДоступа(СсылкаНаОбъект, ОбновлениеИБ);
	
КонецПроцедуры

// Для процедур ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации и
// ЗаполнитьОбработчикиРазделенныхДанных.

// Проверяет были ли изменения неразделенных данных для какой-нибудь области данных.
Функция ЕстьИзмененияПараметровОграниченияДоступа()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = Новый Массив;
	Параметры.Добавить("СтандартныеПодсистемы.УправлениеДоступом.ОбъектыМетаданныхПравРолей");
	Параметры.Добавить("СтандартныеПодсистемы.УправлениеДоступом.ВозможныеПраваДляНастройкиПравОбъектов");
	Параметры.Добавить("СтандартныеПодсистемы.УправлениеДоступом.ОписаниеПоставляемыхПрофилей");
	Параметры.Добавить("СтандартныеПодсистемы.УправлениеДоступом.ПредопределенныеПрофилиГруппДоступа");
	Параметры.Добавить("СтандартныеПодсистемы.УправлениеДоступом.ТипыГруппИЗначенийДоступа");
	
	Для Каждого Параметр Из Параметры Цикл
		
		ПоследниеИзменения = СтандартныеПодсистемыСервер.ИзмененияПараметраРаботыПрограммы(Параметр);
		
		Если ПоследниеИзменения = Неопределено
		 ИЛИ ПоследниеИзменения.Количество() > 0 Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ОбновитьРолиПользователей.

Функция ТекущиеСвойстваПользователей(МассивПользователей)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если МассивПользователей = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ ПроверяемыеПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Служебный = ЛОЖЬ
		|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		
	ИначеЕсли ТипЗнч(МассивПользователей) = Тип("Тип") Тогда
		Если Метаданные.НайтиПоТипу(МассивПользователей) = Метаданные.Справочники.ВнешниеПользователи Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВнешниеПользователи.Ссылка КАК Пользователь,
			|	ВнешниеПользователи.ИдентификаторПользователяИБ
			|ПОМЕСТИТЬ ПроверяемыеПользователи
			|ИЗ
			|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
			|ГДЕ
			|	ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Пользователь,
			|	Пользователи.ИдентификаторПользователяИБ
			|ПОМЕСТИТЬ ПроверяемыеПользователи
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.Служебный = ЛОЖЬ
			|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор";
		КонецЕсли;
	Иначе
		ИсходныеПользователи = Новый ТаблицаЗначений;
		ИсходныеПользователи.Колонки.Добавить("Пользователь", Новый ОписаниеТипов(
			"СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи"));
		
		Для каждого Пользователь Из МассивПользователей Цикл
			ИсходныеПользователи.Добавить().Пользователь = Пользователь;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ИсходныеПользователи", ИсходныеПользователи);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсходныеПользователи.Пользователь
		|ПОМЕСТИТЬ ИсходныеПользователи
		|ИЗ
		|	&ИсходныеПользователи КАК ИсходныеПользователи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	Пользователи.ИдентификаторПользователяИБ
		|ПОМЕСТИТЬ ПроверяемыеПользователи
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеПользователи КАК ИсходныеПользователи
		|		ПО Пользователи.Ссылка = ИсходныеПользователи.Пользователь
		|			И (Пользователи.Служебный = ЛОЖЬ)
		|			И (Пользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка,
		|	ВнешниеПользователи.ИдентификаторПользователяИБ
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходныеПользователи КАК ИсходныеПользователи
		|		ПО ВнешниеПользователи.Ссылка = ИсходныеПользователи.Пользователь
		|			И (ВнешниеПользователи.ИдентификаторПользователяИБ <> &ПустойИдентификатор)";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ГруппыДоступаПользователи.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыДоступа.Администраторы))
	|			И ГруппыДоступаПользователи.Пользователь = Пользователи.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеПользователи.Пользователь,
	|	ПроверяемыеПользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	ПроверяемыеПользователи КАК ПроверяемыеПользователи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемыеПользователи.Пользователь КАК Пользователь,
	|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
	|ПОМЕСТИТЬ ПрофилиПользователей
	|ИЗ
	|	ПроверяемыеПользователи КАК ПроверяемыеПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО ПроверяемыеПользователи.Пользователь = СоставыГруппПользователей.Пользователь
	|			И (СоставыГруппПользователей.Используется)
	|			И (&ИсключитьВнешнихПользователей)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.Профиль.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиПользователей.Пользователь,
	|	Роли.Роль КАК РольСсылка,
	|	Роли.Роль.Имя КАК Роль
	|ИЗ
	|	ПрофилиПользователей КАК ПрофилиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ПО (Роли.Ссылка = ПрофилиПользователей.Профиль)
	|ГДЕ
	|	Роли.Роль <> НЕОПРЕДЕЛЕНО";
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|" + ТекстЗапроса;
	
	Если Константы.ИспользоватьВнешнихПользователей.Получить() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключитьВнешнихПользователей", "Истина");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключитьВнешнихПользователей",
			"ТИПЗНАЧЕНИЯ(ПроверяемыеПользователи.Пользователь) = ТИП(Справочник.Пользователи)");
	КонецЕсли;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ПоследнийРезультат = РезультатыЗапросов.Количество()-1;
	Итог = Новый Структура;
	
	Итог.Вставить("Администраторы", Новый Соответствие);
	
	Для каждого Строка Из РезультатыЗапросов[ПоследнийРезультат-3].Выгрузить() Цикл
		Итог.Администраторы.Вставить(Строка.Ссылка, Истина);
	КонецЦикла;
	
	Итог.Вставить("ИдентификаторыПользователейИБ", РезультатыЗапросов[ПоследнийРезультат-2].Выгрузить());
	Итог.ИдентификаторыПользователейИБ.Индексы.Добавить("Пользователь");
	
	Итог.Вставить("РолиПользователей", РезультатыЗапросов[ПоследнийРезультат].Выгрузить());
	Итог.РолиПользователей.Индексы.Добавить("Пользователь");
	
	ИдентификаторыРолей = Итог.РолиПользователей.ВыгрузитьКолонку("РольСсылка");
	МетаданныеРолей = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(
		ИдентификаторыРолей, Истина);
	
	Для Каждого Строка Из Итог.РолиПользователей Цикл
		МетаданныеРоли = МетаданныеРолей.Получить(Строка.РольСсылка);
		Если ТипЗнч(МетаданныеРоли) = Тип("ОбъектМетаданных") Тогда
			Строка.Роль = МетаданныеРоли.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции

Процедура ЗарегистрироватьНедоступнуюРоль(ОписаниеРоли, Пользователь)
	
	// Недоступные роли в профилях.
	Профили = ПрофилиПользователяСРолью(Пользователь, ОписаниеРоли.РольСсылка);
	
	Для Каждого Профиль Из Профили Цикл
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Управление доступом.Роль не доступна пользователю'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПрофилиГруппДоступа,
			Профиль,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При обновлении ролей пользователя ""%1""
				          |роль ""%2""
				          |профиля групп доступа ""%3""
				          |недоступна пользователю.'"),
				Строка(Пользователь),
				ОписаниеРоли.Роль,
				Строка(Профиль)),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьНенайденнуюРоль(ОписаниеРоли, Пользователь)
	
	// Новые роли не найденные в метаданных.
	Профили = ПрофилиПользователяСРолью(Пользователь, ОписаниеРоли.РольСсылка);
	
	Для Каждого Профиль Из Профили Цикл
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Управление доступом.Роль не найдена в метаданных'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ПрофилиГруппДоступа,
			Профиль,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При обновлении ролей пользователя ""%1""
				          |роль ""%2""
				          |профиля групп доступа ""%3""
				          |не найдена в метаданных.'"),
				Строка(Пользователь),
				ОписаниеРоли.Роль,
				Строка(Профиль)),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьРолиПользователейИБ(ОбновляемыеПользователиИБ, ПарольПользователяСервиса)
	
	СтандартныеПодсистемыСервер.ПроверитьДинамическоеОбновлениеВерсииПрограммы();
	
	Для Каждого КлючИЗначение Из ОбновляемыеПользователиИБ Цикл
		РолиДляДобавления  = КлючИЗначение.Значение.РолиДляДобавления;
		РолиДляУдаления    = КлючИЗначение.Значение.РолиДляУдаления;
		ПользовательИБ     = КлючИЗначение.Значение.ПользовательИБ;
		ПользовательСсылка = КлючИЗначение.Значение.ПользовательСсылка;
		
		БылиПолныеПрава = ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		
		Для каждого КлючИЗначение Из РолиДляДобавления Цикл
			ПользовательИБ.Роли.Добавить(Метаданные.Роли[КлючИЗначение.Ключ]);
		КонецЦикла;
		
		Для каждого КлючИЗначение Из РолиДляУдаления Цикл
			ПользовательИБ.Роли.Удалить(Метаданные.Роли[КлючИЗначение.Ключ]);
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			ЗаписатьПользователяПриОбновленииРолей(ПользовательСсылка,
				ПользовательИБ, БылиПолныеПрава, ПарольПользователяСервиса);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Для процедур ЗарегистрироватьНедоступнуюРоль, ЗарегистрироватьНенайденнуюРоль.
Функция ПрофилиПользователяСРолью(Пользователь, Роль)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Роли.Ссылка КАК Профиль
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (СоставыГруппПользователей.Пользователь = &ТекущийПользователь)
	|			И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь
	|			И (СоставыГруппПользователей.Используется)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК Роли
	|		ПО (Роли.Ссылка = ГруппыДоступаПользователи.Ссылка.Профиль)
	|			И (НЕ Роли.Ссылка.ПометкаУдаления)
	|			И (Роли.Роль = &Роль)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Профиль");
	
КонецФункции

// Для процедуры ОбновитьРолиПользователейИБ.
Процедура ЗаписатьПользователяПриОбновленииРолей(ПользовательСсылка, ПользовательИБ, БылиПолныеПрава, ПарольПользователяСервиса)
	
	ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ, 
		ТипЗнч(ПользовательСсылка) = Тип("СправочникСсылка.ВнешниеПользователи"));
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПолныеПрава = ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	Если ЕстьПолныеПрава = БылиПолныеПрава Тогда
		Возврат;
	КонецЕсли;
	
	Если ПарольПользователяСервиса = Неопределено Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		Иначе
			СеансЗапущенБезРазделителей = Истина;
		КонецЕсли;
		Если СеансЗапущенБезРазделителей Тогда
			Возврат;
		КонецЕсли;
		
		ВызватьИсключение
			НСтр("ru = 'Для изменения административного доступа
			           |требуется пароль пользователя сервиса.
			           |
			           |Операция может быть выполнена только интерактивно.'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		МодульПользователиСлужебныйВМоделиСервиса.ЗаписатьПользователяСервиса(ПользовательСсылка, Ложь, ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ТекстЗапросаВыбораИзменений.

Функция КлючИЗначение(Структура)
	
	Для каждого КлючИЗначение Из Структура Цикл
		Возврат КлючИЗначение;
	КонецЦикла;
	
КонецФункции

// Для процедур ОбновитьНаборЗаписей, ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям.

Процедура ЗаписатьОбъектИлиНаборЗаписей(Данные, ОбъектИлиНаборЗаписей)
	
	Если Данные.ОбновлениеИБ Тогда
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектИлиНаборЗаписей);
	Иначе
		ОбъектИлиНаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ОбновитьНаборЗаписей и ОбновитьНаборыЗаписей.

Функция ГруппаПараметровИзмеренияОбработана(ИмяИзмерения, ЗначенияИзмерения)
	
	Если ИмяИзмерения = Неопределено Тогда
		ЗначенияИзмерения = Неопределено;
		
	ИначеЕсли ЗначенияИзмерения = Неопределено Тогда
		ИмяИзмерения = Неопределено;
		
	ИначеЕсли ТипЗнч(ЗначенияИзмерения) <> Тип("Массив")
	        И ТипЗнч(ЗначенияИзмерения) <> Тип("ФиксированныйМассив") Тогда
		
		ЗначениеИзмерения = ЗначенияИзмерения;
		ЗначенияИзмерения = Новый Массив;
		ЗначенияИзмерения.Добавить(ЗначениеИзмерения);
		
	ИначеЕсли ЗначенияИзмерения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УпорядочитьГруппыПараметровИзмерений(Данные)
	
	Если Данные.ИмяВторогоИзмерения = Неопределено Тогда
		Данные.ИмяВторогоИзмерения       = Данные.ИмяТретьегоИзмерения;
		Данные.ЗначенияВторогоИзмерения  = Данные.ЗначенияТретьегоИзмерения;
		Данные.ИмяТретьегоИзмерения      = Неопределено;
		Данные.ЗначенияТретьегоИзмерения = Неопределено;
	КонецЕсли;
	
	Если Данные.ИмяПервогоИзмерения = Неопределено Тогда
		Данные.ИмяПервогоИзмерения       = Данные.ИмяВторогоИзмерения;
		Данные.ЗначенияПервогоИзмерения  = Данные.ЗначенияВторогоИзмерения;
		Данные.ИмяВторогоИзмерения       = Данные.ИмяТретьегоИзмерения;
		Данные.ЗначенияВторогоИзмерения  = Данные.ЗначенияТретьегоИзмерения;
		Данные.ИмяТретьегоИзмерения      = Неопределено;
		Данные.ЗначенияТретьегоИзмерения = Неопределено;
	КонецЕсли;
	
	Если Данные.ЗначенияВторогоИзмерения  <> Неопределено
	   И Данные.ЗначенияТретьегоИзмерения <> Неопределено
	   И Данные.ЗначенияВторогоИзмерения.Количество()
	   > Данные.ЗначенияТретьегоИзмерения.Количество() Тогда
		
		ИмяИзмерения      = Данные.ИмяВторогоИзмерения;
		ЗначенияИзмерения = Данные.ЗначенияВторогоИзмерения;
		
		Данные.ИмяВторогоИзмерения       = Данные.ИмяТретьегоИзмерения;
		Данные.ЗначенияВторогоИзмерения  = Данные.ЗначенияТретьегоИзмерения;
		Данные.ИмяТретьегоИзмерения      = ИмяИзмерения;
		Данные.ЗначенияТретьегоИзмерения = ЗначенияИзмерения;
	КонецЕсли;
	
	Если Данные.ЗначенияПервогоИзмерения <> Неопределено
	   И Данные.ЗначенияВторогоИзмерения <> Неопределено
	   И Данные.ЗначенияПервогоИзмерения.Количество()
	   > Данные.ЗначенияВторогоИзмерения.Количество() Тогда
		
		ИмяИзмерения      = Данные.ИмяПервогоИзмерения;
		ЗначенияИзмерения = Данные.ЗначенияПервогоИзмерения;
		
		Данные.ИмяПервогоИзмерения      = Данные.ИмяВторогоИзмерения;
		Данные.ЗначенияПервогоИзмерения = Данные.ЗначенияВторогоИзмерения;
		Данные.ИмяВторогоИзмерения      = ИмяИзмерения;
		Данные.ЗначенияВторогоИзмерения = ЗначенияИзмерения;
	КонецЕсли;
	
КонецПроцедуры

Функция ПоляНабораЗаписей(НаборЗаписей)
	
	ПоляСравнения = "";
	Таблица = НаборЗаписей.Выгрузить(Новый Массив);
	Для каждого Колонка Из Таблица.Колонки Цикл
		ПоляСравнения = ПоляСравнения + "," + Колонка.Имя;
	КонецЦикла;
	ПоляСравнения = Сред(ПоляСравнения, 2);
	
	Возврат ПоляСравнения;
	
КонецФункции

Процедура ОбновитьНовыеЗаписиНабораПоВсемНовымЗаписям(Знач Данные, Знач Отбор, Знач СписокПолей,
				Знач ИмяИзмерения, Знач ЗначенияИзмерения, ЕстьИзменения)
	
	ЗаблокироватьОбластьНабораЗаписей(Данные.НаборЗаписей, Данные.ПолноеИмяРегистра);
	
	Данные.НаборЗаписей.Прочитать();
	НовыеЗаписиНабора = Данные.НаборЗаписей.Выгрузить();
	НовыеЗаписиНабора.Индексы.Добавить(СписокПолей);
	
	Для каждого Значение Из ЗначенияИзмерения Цикл
		Отбор[ИмяИзмерения] = Значение;
		Для каждого НайденнаяЗапись Из НовыеЗаписиНабора.НайтиСтроки(Отбор) Цикл
			НовыеЗаписиНабора.Удалить(НайденнаяЗапись);
		КонецЦикла;
		Для каждого НайденнаяЗапись Из Данные.НовыеЗаписи.НайтиСтроки(Отбор) Цикл
			ЗаполнитьЗначенияСвойств(НовыеЗаписиНабора.Добавить(), НайденнаяЗапись);
		КонецЦикла;
	КонецЦикла;
	
	ТекущиеДанные = Новый Структура("НаборЗаписей, ПоляСравнения,
		|ТолькоПроверка, ДополнительныеСвойства, ОбновлениеИБ");
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Данные);
	ТекущиеДанные.Вставить("НовыеЗаписи", НовыеЗаписиНабора);
	ТекущиеДанные.Вставить("НаборЗаписейПрочитан", Истина);
	
	ОбновитьНаборЗаписей(ТекущиеДанные, ЕстьИзменения);
	
КонецПроцедуры

Процедура ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям(Знач Данные, Знач Отбор, ЕстьИзменения)
	
	// Получение количества записей для чтения.
	
	Если Отбор.Количество() = 0 Тогда
		ТекущиеНовыеЗаписи = Данные.НовыеЗаписи.Скопировать();
		КоличествоДляЧтения = Данные.КоличествоДляЧтения;
	Иначе
		ТекущиеНовыеЗаписи = Данные.НовыеЗаписи.Скопировать(Отбор);
		
		ИмяПоля = Данные.КоличествоПоЗначениям.Колонки[0].Имя;
		СтрокаКоличества = Данные.КоличествоПоЗначениям.Найти(Отбор[ИмяПоля], ИмяПоля);
		КоличествоДляЧтения = ?(СтрокаКоличества = Неопределено, 0, СтрокаКоличества.Количество);
	КонецЕсли;
	
	ОтборНовойЗаписи = Новый Структура("ВидИзмененияСтроки, " + Данные.ПоляСравнения, 1);
	ТекущиеНовыеЗаписи.Индексы.Добавить("ВидИзмененияСтроки, " + Данные.ПоляСравнения);

	КлючиЗаписей = ТекущиеНовыеЗаписи.Скопировать(, "ВидИзмененияСтроки, " + Данные.ПоляСравнения);
	КлючиЗаписей.Свернуть("ВидИзмененияСтроки, " + Данные.ПоляСравнения);
	КлючиЗаписей.Свернуть(Данные.ПоляСравнения, "ВидИзмененияСтроки");
	
	ОтборПоКлючуЗаписи = Новый Структура(Данные.ПоляСравнения);
	
	Если ОбновлятьНаборЗаписейЦеликом(КоличествоДляЧтения, КлючиЗаписей) Тогда
		
		ЗаблокироватьОбластьНабораЗаписей(Данные.НаборЗаписей, Данные.ПолноеИмяРегистра);
		Данные.НаборЗаписей.Прочитать();
		НовыеЗаписиНабора = Данные.НаборЗаписей.Выгрузить();
		НовыеЗаписиНабора.Индексы.Добавить(Данные.ПоляСравнения);
		
		Для каждого Строка Из КлючиЗаписей Цикл
			ЗаполнитьЗначенияСвойств(ОтборПоКлючуЗаписи, Строка);
			НайденныеСтроки = НовыеЗаписиНабора.НайтиСтроки(ОтборПоКлючуЗаписи);
			Если Строка.ВидИзмененияСтроки = -1 Тогда
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Удаление старой строки.
					НовыеЗаписиНабора.Удалить(НайденныеСтроки[0]);
				КонецЕсли;
			Иначе
				// Добавление новой или обновление старой строки.
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЗаполняемаяСтрока = НовыеЗаписиНабора.Добавить();
				Иначе
					ЗаполняемаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ОтборНовойЗаписи, ОтборПоКлючуЗаписи);
				НайденныеЗаписи = ТекущиеНовыеЗаписи.НайтиСтроки(ОтборНовойЗаписи);
				Если НайденныеЗаписи.Количество() = 1 Тогда
					НоваяЗапись = НайденныеЗаписи[0];
				Иначе // Ошибка в параметре НовыеЗаписи.
					ИсключениеПриОшибкеПоискаЗаписи(Данные);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, НоваяЗапись);
			КонецЕсли;
		КонецЦикла;
		// Изменение набора записей, чтобы он отличался от новых записей набора.
		Если Данные.НаборЗаписей.Количество() = НовыеЗаписиНабора.Количество() Тогда
			Данные.НаборЗаписей.Добавить();
		КонецЕсли;
		
		ТекущиеДанные = Новый Структура("НаборЗаписей, ПоляСравнения,
			|ТолькоПроверка, ДополнительныеСвойства, ОбновлениеИБ");
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Данные);
		ТекущиеДанные.Вставить("НовыеЗаписи", НовыеЗаписиНабора);
		ТекущиеДанные.Вставить("НаборЗаписейПрочитан", Истина);
		
		ОбновитьНаборЗаписей(ТекущиеДанные, ЕстьИзменения);
	Иначе
		// Построчное обновление.
		УстановитьДополнительныеСвойства(Данные.НаборДляОднойЗаписи, Данные.ДополнительныеСвойства);
		Для каждого Строка Из КлючиЗаписей Цикл
			Данные.НаборДляОднойЗаписи.Очистить();
			ЗаполнитьЗначенияСвойств(ОтборПоКлючуЗаписи, Строка);
			Для каждого КлючИЗначение Из ОтборПоКлючуЗаписи Цикл
				УстановитьОтбор(
					Данные.НаборДляОднойЗаписи.Отбор[КлючИЗначение.Ключ], КлючИЗначение.Значение);
			КонецЦикла;
			ЗаблокироватьОбластьНабораЗаписей(Данные.НаборДляОднойЗаписи, Данные.ПолноеИмяРегистра);
			Если Строка.ВидИзмененияСтроки > -1 Тогда
				// Добавление новой или обновление существующей строки.
				ЗаполнитьЗначенияСвойств(ОтборНовойЗаписи, ОтборПоКлючуЗаписи);
				НайденныеЗаписи = ТекущиеНовыеЗаписи.НайтиСтроки(ОтборНовойЗаписи);
				Если НайденныеЗаписи.Количество() = 1 Тогда
					НоваяЗапись = НайденныеЗаписи[0];
				Иначе // Ошибка в параметре НовыеЗаписи.
					ИсключениеПриОшибкеПоискаЗаписи(Данные);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Данные.НаборДляОднойЗаписи.Добавить(), НоваяЗапись);
			КонецЕсли;
			ЕстьИзменения = Истина;
			Если Данные.ТолькоПроверка Тогда
				Возврат;
			КонецЕсли;
			ЗаписатьОбъектИлиНаборЗаписей(Данные, Данные.НаборДляОднойЗаписи);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьНовыеЗаписиНабораПоРазличнымНовымЗаписям.
Функция ОбновлятьНаборЗаписейЦеликом(КоличествоДляЧтения, КлючиЗаписей)
	
	Если КоличествоДляЧтения > 10000 Тогда
		Возврат Ложь; // Слишком большой набор записей.
	КонецЕсли;
	
	КоличествоУдаляемых = КлючиЗаписей.НайтиСтроки(
		Новый Структура("ВидИзмененияСтроки", -1)).Количество();
	
	КоличествоДобавляемых = КлючиЗаписей.НайтиСтроки(
		Новый Структура("ВидИзмененияСтроки", 1)).Количество();
	
	КоличествоДляЗаписи = КоличествоДляЧтения - КоличествоУдаляемых
		+ КоличествоДобавляемых;
	
	Если КоличествоДляЗаписи > 10000 Тогда
		Возврат Ложь; // Слишком большой набор записей.
	КонецЕсли;
	
	КоличествоИзменяемых = КлючиЗаписей.Количество()
		- (КоличествоУдаляемых + КоличествоДобавляемых);
	
	КоличествоНеизменных = КоличествоДляЧтения
		- (КоличествоУдаляемых + КоличествоИзменяемых);
	
	ЗатратыНаПерезаписьЦеликом =
	//                Операции:   |Чтение|Удаление|Вставка|
	      КоличествоУдаляемых   * ( 0.05  +  0.1          )
	    + КоличествоИзменяемых  * ( 0.05  +  0.1   +  1   )
	    + КоличествоДобавляемых * (                   1   )
	    + КоличествоНеизменных  * ( 0.05  +  0.1   +  1   );
	
	ЗатратыНаПерезаписьПоОднойЗаписи =
	//                Операции:   |Удаление|Вставка|
	      КоличествоУдаляемых   * (   0.5          )
	    + КоличествоИзменяемых  * (   0.5  +  1.2  )
	    + КоличествоДобавляемых * (   0.5  +  1.2  );
	
	Возврат ЗатратыНаПерезаписьЦеликом < ЗатратыНаПерезаписьПоОднойЗаписи;
	
КонецФункции

Процедура ИсключениеПриОшибкеПоискаЗаписи(Параметры)
	
	Для каждого СтрокаИзменений Из Параметры.НовыеЗаписи Цикл
		Если СтрокаИзменений.ВидИзмененияСтроки <>  1
		   И СтрокаИзменений.ВидИзмененияСтроки <> -1 Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в процедуре ОбновитьНаборыЗаписей
				           |общего модуля УправлениеДоступомСлужебный.
				           |
				           |Неверное значение параметра НовыеЗаписи - колонка
				           |ВидИзмененияСтроки содержит недопустимое значение ""%1"".
				           |
				           |Допустимо только 2 значения: ""1"" и ""-1"".'"),
				Строка(СтрокаИзменений.ВидИзмененияСтроки));
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение
		НСтр("ru = 'Ошибка в процедуре ОбновитьНаборыЗаписей
		           |общего модуля УправлениеДоступомСлужебный.
		           |
		           |Не удалось найти требуемую в строку
		           |в значении параметра НовыеЗаписи.'");
	
КонецПроцедуры

Процедура ЗаблокироватьОбластьНабораЗаписей(НаборЗаписей, ПолноеИмяРегистра = Неопределено)
	
	Если НЕ ТранзакцияАктивна() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолноеИмяРегистра = Неопределено Тогда
		ПолноеИмяРегистра = Метаданные.НайтиПоТипу(ТипЗнч(НаборЗаписей)).ПолноеИмя();
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра);
	Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ЭлементБлокировки.УстановитьЗначение(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура УстановитьОтбор(ЭлементОтбора, ЗначениеОтбора)
	
	ЭлементОтбора.Значение = ЗначениеОтбора;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

Функция ЗаписьНесколькимиНаборами(Данные, Отбор, ИмяПоля, ЗначенияПоля)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияПоля", ЗначенияПоля);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	ТекущаяТаблица.ИмяПоля В(&ЗначенияПоля)
	|	И &УсловиеОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущаяТаблица.ИмяПоля КАК ИмяПоля,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	ТекущаяТаблица.ИмяПоля В(&ЗначенияПоля)
	|	И &УсловиеОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущаяТаблица.ИмяПоля";
	
	УсловиеОтбора = "Истина";
	Если Данные.ФиксированныйОтбор <> Неопределено Тогда
		Для каждого КлючИЗначение Из Данные.ФиксированныйОтбор Цикл
			УсловиеОтбора = УсловиеОтбора + "
			|	И ТекущаяТаблица." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОтборДобавляемых = Новый Структура;
	ОтборДобавляемых.Вставить("ВидИзмененияСтроки", 1);
	ОтборУдаляемых = Новый Структура;
	ОтборУдаляемых.Вставить("ВидИзмененияСтроки", -1);
	
	Для каждого КлючИЗначение Из Отбор Цикл
		УсловиеОтбора = УсловиеОтбора + "
		|	И ТекущаяТаблица." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ОтборДобавляемых.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ОтборУдаляемых.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоля", ИмяПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", Данные.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Количество всех без отбора.
	КоличествоВсех = РезультатыЗапросов[0].Выгрузить()[0].Количество;
	Данные.Вставить("КоличествоДляЧтения", КоличествоВсех);
	
	// Количество обновляемых с отбором.
	КоличествоОбновляемых = РезультатыЗапросов[1].Выгрузить()[0].Количество;
	
	КоличествоДобавляемых = Данные.НовыеЗаписи.НайтиСтроки(ОтборДобавляемых).Количество();
	Если КоличествоДобавляемых > КоличествоОбновляемых Тогда
		КоличествоОбновляемых = КоличествоДобавляемых;
	КонецЕсли;
	
	КоличествоУдаляемых = Данные.НовыеЗаписи.НайтиСтроки(ОтборУдаляемых).Количество();
	Если КоличествоУдаляемых > КоличествоОбновляемых Тогда
		КоличествоОбновляемых = КоличествоУдаляемых;
	КонецЕсли;
	
	// Количество для чтения по значениям отбора.
	КоличествоПоЗначениям = РезультатыЗапросов[2].Выгрузить();
	КоличествоПоЗначениям.Индексы.Добавить(ИмяПоля);
	Данные.Вставить("КоличествоПоЗначениям", КоличествоПоЗначениям);
	
	Возврат КоличествоВсех * 0.7 > КоличествоОбновляемых;
	
КонецФункции

Процедура ПрочитатьКоличествоДляЧтения(Данные)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеОтбора";
	
	УсловиеОтбора = "Истина";
	Если Данные.ФиксированныйОтбор <> Неопределено Тогда
		Для каждого КлючИЗначение Из Данные.ФиксированныйОтбор Цикл
			УсловиеОтбора = УсловиеОтбора + "
			|	И ТекущаяТаблица." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ;
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущаяТаблица", Данные.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	Данные.Вставить("КоличествоДляЧтения", Запрос.Выполнить().Выгрузить()[0].Количество);
	
КонецПроцедуры

Процедура УстановитьДополнительныеСвойства(НаборЗаписей, ДополнительныеСвойства)
	
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура") Тогда
		Для каждого КлючИЗначение Из ДополнительныеСвойства Цикл
			НаборЗаписей.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьРегистрСведений.

Функция ЗначенияКолонкиТаблицы(Таблица, ИмяКолонки)
	
	НоваяТаблица = Таблица.Скопировать(, ИмяКолонки);
	
	НоваяТаблица.Свернуть(ИмяКолонки);
	
	Возврат НоваяТаблица.ВыгрузитьКолонку(ИмяКолонки);
	
КонецФункции

// Обслуживание таблиц ВидыДоступа и ЗначенияДоступа в формах редактирования.

Процедура ДобавитьРеквизитыВспомогательныхДанныхВФорму(Форма, ИмяРеквизитаХранилищаТаблиц)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТиповЗначенийДоступа = Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип;
	
	ПутьКОбъекту = ?(ЗначениеЗаполнено(ИмяРеквизитаХранилищаТаблиц), ИмяРеквизитаХранилищаТаблиц + ".", "");
	
	// Добавление реквизитов в таблицу ВидыДоступа.
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Используется", Новый ОписаниеТипов("Булево"), ПутьКОбъекту + "ВидыДоступа"));
	
	// Добавление отдельных реквизитов.
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ТекущийВидДоступа", ОписаниеТиповЗначенийДоступа));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ТекущиеТипыВыбираемыхЗначений", Новый ОписаниеТипов("СписокЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ТекущийТипВыбираемыхЗначений", ОписаниеТиповЗначенийДоступа));
	
	Если НЕ РеквизитФормыСуществует(Форма, "ИспользоватьВнешнихПользователей") Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			"ИспользоватьВнешнихПользователей", Новый ОписаниеТипов("Булево")));
	КонецЕсли;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ИмяРеквизитаХранилищаТаблиц", Новый ОписаниеТипов("Строка")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ЭтоПрофильГруппДоступа", Новый ОписаниеТипов("Булево")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ВидДоступаПользователи", ОписаниеТиповЗначенийДоступа));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ВидДоступаВнешниеПользователи", ОписаниеТиповЗначенийДоступа));
	
	// Добавление таблицы ВсеВидыДоступа.
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ВсеВидыДоступа", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Ссылка", ОписаниеТиповЗначенийДоступа, "ВсеВидыДоступа"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Представление", Новый ОписаниеТипов("Строка"), "ВсеВидыДоступа"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Используется", Новый ОписаниеТипов("Булево"), "ВсеВидыДоступа"));
	
	// Добавление таблицы ПредставленияВсеРазрешены.
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ПредставленияВсеРазрешены", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Имя", Новый ОписаниеТипов("Строка"), "ПредставленияВсеРазрешены"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"Представление", Новый ОписаниеТипов("Строка"), "ПредставленияВсеРазрешены"));
	
	// Добавление таблицы ВсеТипыВыбираемыхЗначений.
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ВсеТипыВыбираемыхЗначений", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ВидДоступа", ОписаниеТиповЗначенийДоступа, "ВсеТипыВыбираемыхЗначений"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ТипЗначений", ОписаниеТиповЗначенийДоступа, "ВсеТипыВыбираемыхЗначений"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ПредставлениеТипа", Новый ОписаниеТипов("Строка"), "ВсеТипыВыбираемыхЗначений"));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"ИмяТаблицы", Новый ОписаниеТипов("Строка"), "ВсеТипыВыбираемыхЗначений"));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВсеВидыДоступаВФорме(Форма)
	
	Для каждого СвойстваВидаДоступа Из СвойстваВидаДоступа() Цикл
		Строка = Форма.ВсеВидыДоступа.Добавить();
		Строка.Ссылка        = СвойстваВидаДоступа.Ссылка;
		Строка.Используется  = ВидДоступаИспользуется(Строка.Ссылка);
		// Обеспечение уникальности представлений.
		Представление = СвойстваВидаДоступа.Представление;
		Отбор = Новый Структура("Представление", Представление);
		Пока Форма.ВсеВидыДоступа.НайтиСтроки(Отбор).Количество() > 0 Цикл
			Отбор.Представление = Отбор.Представление + " ";
		КонецЦикла;
		Строка.Представление = Представление;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПредставленияВсеРазрешеныВФорме(Форма, ЭтоПрофиль)
	
	Если ЭтоПрофиль Тогда
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВначалеВсеЗапрещены";
		Строка.Представление = НСтр("ru = 'Все запрещены, исключения назначаются в группах доступа'");
		
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВначалеВсеРазрешены";
		Строка.Представление = НСтр("ru = 'Все разрешены, исключения назначаются в группах доступа'");
		
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВсеЗапрещены";
		Строка.Представление = НСтр("ru = 'Все запрещены, исключения назначаются в профиле'");
		
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВсеРазрешены";
		Строка.Представление = НСтр("ru = 'Все разрешены, исключения назначаются в профиле'");
	Иначе
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВсеЗапрещены";
		Строка.Представление = НСтр("ru = 'Все запрещены'");
		
		Строка = Форма.ПредставленияВсеРазрешены.Добавить();
		Строка.Имя = "ВсеРазрешены";
		Строка.Представление = НСтр("ru = 'Все разрешены'");
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.ВидыДоступаВсеРазрешеныПредставление.СписокВыбора;
	
	Для каждого Строка Из Форма.ПредставленияВсеРазрешены Цикл
		СписокВыбора.Добавить(Строка.Представление);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьТаблицуВидыДоступаВФорме(Форма)
	
	Параметры = ПараметрыФормыРедактированияРазрешенныхЗначений(Форма);
	
	// Оформление отображения неиспользуемых видов доступа.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = WebЦвета.Серый;
	ЭлементЦветаОформления.Использование = Истина;
	
	ГруппаЭлементовОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Параметры.ПутьКТаблицам + "ВидыДоступа.ВидДоступа");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Неопределено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Параметры.ПутьКТаблицам + "ВидыДоступа.Используется");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ВидыДоступа");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

Процедура УдалитьЛишниеЗначенияДоступа(Форма, ТекущийОбъект = Неопределено)
	
	Параметры = ПараметрыФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект);
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	ПоТипамГруппИЗначений = СвойстваВидовДоступа.ПоТипамГруппИЗначений;
	
	Отбор = УправлениеДоступомСлужебныйКлиентСервер.ОтборВТаблицахФормыРедактированияРазрешенныхЗначений(
		Форма, "");
	
	Индекс = Параметры.ЗначенияДоступа.Количество()-1;
	Пока Индекс >= 0 Цикл
		ЗначениеДоступа = Параметры.ЗначенияДоступа[Индекс].ЗначениеДоступа;
		
		СвойстваВидаДоступа = ПоТипамГруппИЗначений.Получить(ТипЗнч(ЗначениеДоступа));
		Если СвойстваВидаДоступа <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Отбор, Параметры.ЗначенияДоступа[Индекс]);
			Отбор.Вставить("ВидДоступа", СвойстваВидаДоступа.Ссылка);
		КонецЕсли;
		
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ Параметры.ЗначенияДоступа[Индекс].ВидДоступа <> Отбор.ВидДоступа
		 ИЛИ Параметры.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			Параметры.ЗначенияДоступа.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНесуществующиеВидыИЗначенияДоступа(Форма, ТекущийОбъект = Неопределено)
	
	Параметры = ПараметрыФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект);
	
	Индекс = Параметры.ВидыДоступа.Количество()-1;
	Пока Индекс >= 0 Цикл
		ВидДоступа = Параметры.ВидыДоступа[Индекс].ВидДоступа;
		Если СвойстваВидаДоступа(ВидДоступа) = Неопределено Тогда
			Параметры.ВидыДоступа.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	УдалитьЛишниеЗначенияДоступа(Форма, ТекущийОбъект);
	
КонецПроцедуры

Функция ПараметрыФормыРедактированияРазрешенныхЗначений(Форма, ТекущийОбъект = Неопределено)
	
	Возврат УправлениеДоступомСлужебныйКлиентСервер.ПараметрыФормыРедактированияРазрешенныхЗначений(
		Форма, ТекущийОбъект);
	
КонецФункции

Функция РеквизитФормыСуществует(Форма, ИмяРеквизита)
	
	Структура = Новый Структура(ИмяРеквизита, Null);
	
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Возврат Структура[ИмяРеквизита] <> Null;
	
КонецФункции

// Для процедуры УстановкаПараметровСеанса.

Функция ВсеКомбинацииВидовДоступа(НеупорядоченныйМассивИмен)
	
	// Ограничение на максимальную длину комбинации, чтобы не допустить
	// перегрузку параметров сеанса и препроцессора шаблонов ОДД.
	МаксимальнаяДлинаКомбинации = 4;
	
	Список = Новый СписокЗначений;
	Если ТипЗнч(НеупорядоченныйМассивИмен) = Тип("ФиксированныйМассив") Тогда
		Список.ЗагрузитьЗначения(Новый Массив(НеупорядоченныйМассивИмен));
	Иначе
		Список.ЗагрузитьЗначения(НеупорядоченныйМассивИмен);
	КонецЕсли;
	Список.СортироватьПоЗначению();
	МассивИмен = Список.ВыгрузитьЗначения();
	
	ИтогСтроки = Новый Массив;
	ИтогСтрока = Новый Массив;
	
	// Полный список поддерживается всегда.
	Для каждого Имя Из МассивИмен Цикл
		ИтогСтрока.Добавить(Имя);
	КонецЦикла;
	
	ИтогСтроки.Добавить(ИтогСтрока);
	
	Если МассивИмен.Количество() < 3 Тогда
		Возврат ГруппыСтрокВСтроку(ИтогСтроки);
	КонецЕсли;
	
	ПервоеИмя = МассивИмен[0];
	МассивИмен.Удалить(0);
	
	ПоследнееИмя = МассивИмен[МассивИмен.Количество()-1];
	МассивИмен.Удалить(МассивИмен.Количество()-1);
	
	КоличествоИменВКомбинации = МассивИмен.Количество();
	
	Если КоличествоИменВКомбинации > 1 Тогда
		
		Если (КоличествоИменВКомбинации-1) <= МаксимальнаяДлинаКомбинации Тогда
			ДлинаКомбинации = КоличествоИменВКомбинации-1;
		Иначе
			ДлинаКомбинации = МаксимальнаяДлинаКомбинации;
		КонецЕсли;
		
		ПозицииИменВКомбинации = Новый Массив;
		Для Счетчик = 1 По ДлинаКомбинации Цикл
			ПозицииИменВКомбинации.Добавить(Счетчик);
		КонецЦикла;
		
		Пока ДлинаКомбинации > 0 Цикл
			Пока Истина Цикл
				// Добавление комбинации из текущих позиций.
				ИтогСтрока = Новый Массив;
				ИтогСтрока.Добавить(ПервоеИмя);
				Для Индекс = 0 По ДлинаКомбинации-1 Цикл
					ИтогСтрока.Добавить(МассивИмен[ПозицииИменВКомбинации[Индекс]-1]);
				КонецЦикла;
				ИтогСтрока.Добавить(ПоследнееИмя);
				ИтогСтроки.Добавить(ИтогСтрока);
				// Продвижение позиции в комбинации.
				Индекс = ДлинаКомбинации-1;
				Пока Индекс >= 0 Цикл
					Если ПозицииИменВКомбинации[Индекс] < КоличествоИменВКомбинации - (ДлинаКомбинации - (Индекс+1)) Тогда
						ПозицииИменВКомбинации[Индекс] = ПозицииИменВКомбинации[Индекс] + 1;
						// Заполнение старших позиций начальными значениями.
						Для ИндексСтаршейПозиции = Индекс+1 По ДлинаКомбинации-1 Цикл
							ПозицииИменВКомбинации[ИндексСтаршейПозиции] =
								ПозицииИменВКомбинации[Индекс] + ИндексСтаршейПозиции - Индекс;
						КонецЦикла;
						Прервать;
					Иначе
						Индекс = Индекс - 1;
					КонецЕсли;
				КонецЦикла;
				Если Индекс < 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДлинаКомбинации = ДлинаКомбинации - 1;
			Для Индекс = 0 По ДлинаКомбинации - 1 Цикл
				ПозицииИменВКомбинации[Индекс] = Индекс + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИтогСтрока = Новый Массив;
	ИтогСтрока.Добавить(ПервоеИмя);
	ИтогСтрока.Добавить(ПоследнееИмя);
	ИтогСтроки.Добавить(ИтогСтрока);
	
	Возврат ГруппыСтрокВСтроку(ИтогСтроки);
	
КонецФункции

Функция ГруппыСтрокВСтроку(ГруппыСтрок)
	
	ИтогСтроки = Новый Массив;
	
	Для Каждого ИтогСтрока Из ГруппыСтрок Цикл
		ИтогСтроки.Добавить(СтрСоединить(ИтогСтрока, ","));
	КонецЦикла;
	
	Строки = СтрСоединить(
		ИтогСтроки,
		",
		|,");
	
	Шаблон =
		"%2%1%2
		|";
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строки, ",");
	
КонецФункции

// Для процедур ОбновитьНаборыЗначенийДоступа, ПриИзмененииНаборовЗначенийДоступа.

// Проверяет, что наборы в табличной части отличаются от новых наборов.
Функция НаборыЗначенийДоступаТабличнойЧастиИзменены(СсылкаНаОбъект, НовыеНаборы)
	
	СтарыеНаборы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СсылкаНаОбъект, "НаборыЗначенийДоступа").Выгрузить();
	
	Если СтарыеНаборы.Количество() <> НовыеНаборы.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтарыеНаборы.Колонки.Добавить("ВидДоступа", Новый ОписаниеТипов("Строка"));
	УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(
		СтарыеНаборы, УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), Ложь, Истина);
	
	ПоляПоиска = "НомерНабора, ЗначениеДоступа, Уточнение, Чтение, Изменение";
	
	НовыеНаборы.Индексы.Добавить(ПоляПоиска);
	Отбор = Новый Структура(ПоляПоиска);
	
	Для каждого Строка Из СтарыеНаборы Цикл
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		Если НовыеНаборы.НайтиСтроки(Отбор).Количество() <> 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для функции РазрешенныеЗначенияДляДинамическогоСписка.
Процедура ДобавитьЗапросВПакет(ТекстПакета, ТекстЗапроса)
	
	Разделитель =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстПакета = ТекстПакета + Разделитель + ТекстЗапроса;
	
КонецПроцедуры

// Для функции РазрешенныеЗначенияДляДинамическогоСписка.
Процедура ОбъединитьЗапросСЗапросом(ТекстЗапроса, ДобавляемыйТекстЗапроса)
	
	Объединитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТекстЗапроса = ТекстЗапроса + Объединитель + ДобавляемыйТекстЗапроса;
	
КонецПроцедуры

// Обновление свойств видов доступа.

// Для процедуры ОбновитьОписаниеСвойствВидовДоступа.
// Возвращает свойства видов доступа, заполняемых при внедрении
// в процедуре ПриЗаполненииВидовДоступа
// общего модуля УправлениеДоступомПереопределяемый
// и одноименных обработчиках этого события.
//
Функция СвойстваВидовДоступа()
	
	// 1. Заполнение данных, указанных при внедрении.
	
	ВидыДоступа = Новый ТаблицаЗначений;
	ВидыДоступа.Колонки.Добавить("Имя",                    Новый ОписаниеТипов("Строка"));
	ВидыДоступа.Колонки.Добавить("Представление",          Новый ОписаниеТипов("Строка"));
	ВидыДоступа.Колонки.Добавить("ТипЗначений",            Новый ОписаниеТипов("Тип"));
	ВидыДоступа.Колонки.Добавить("ТипГруппЗначений",       Новый ОписаниеТипов("Тип"));
	ВидыДоступа.Колонки.Добавить("НесколькоГруппЗначений", Новый ОписаниеТипов("Булево"));
	ВидыДоступа.Колонки.Добавить("ДополнительныеТипы",     Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ИнтеграцияПодсистемБСП.ПриЗаполненииВидовДоступа(ВидыДоступа);
	УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа(ВидыДоступа);
	
	// Проверки:
	// - тип значений доступа не указан для 2-х видов доступа
	// - тип значений доступа Пользователи, ГруппыПользователей используется только для вида доступа Пользователи.
	// Т тип значений доступа ВнешниеПользователи, ГруппыВнешнихПользователей используется только для вида доступа
	// ВнешниеПользователи.
	// И имена видов доступа Объект, Условие, НастройкиПрав, ПравоЧтения, ПравоИзменения не указаны.
	// Т тип групп значений не совпадает с типом значений.
	
	// 2. Подготовка различных коллекций свойств видов доступа, используемых при работе программы.
	МассивСвойств         = Новый Массив;
	ПоСсылкам             = Новый Соответствие;
	ПоИменам              = Новый Соответствие;
	ПоТипамЗначений       = Новый Соответствие;
	ПоТипамГруппИЗначений = Новый Соответствие;
	
	ЗначенияДоступаСГруппами = Новый Структура;
	ЗначенияДоступаСГруппами.Вставить("ПоТипам",           Новый Соответствие);
	ЗначенияДоступаСГруппами.Вставить("ПоТипамСсылок",     Новый Соответствие);
	ЗначенияДоступаСГруппами.Вставить("ИменаТаблиц",       Новый Массив);
	ЗначенияДоступаСГруппами.Вставить("ТипыГруппЗначений", Новый Соответствие);
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОпределяемыеТипыЗначенийДоступа",
		УправлениеДоступомСлужебныйПовтИсп.ТипыПоляТаблицы("ОпределяемыйТип.ЗначениеДоступа"));
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ЗаполнитьСвойстваВидаДоступа
		           |общего модуля УправлениеДоступомПереопределяемый.'")
		+ Символы.ПС
		+ Символы.ПС;
	
	Параметры.Вставить("ЗаголовокОшибки", ЗаголовокОшибки);
	
	Параметры.Вставить("ТипыПодпискиОбновитьГруппыЗначенийДоступа",
		УправлениеДоступомСлужебныйПовтИсп.ТипыПоляТаблицы(
			"ОпределяемыйТип.ЗначениеДоступаСГруппамиЗначенийДоступаОбъект"));
	
	ВсеИменаВидовДоступа = Новый Соответствие;
	ВсеИменаВидовДоступа.Вставить(ВРег("Объект"),         Истина);
	ВсеИменаВидовДоступа.Вставить(ВРег("Условие"),        Истина);
	ВсеИменаВидовДоступа.Вставить(ВРег("НастройкиПрав"),  Истина);
	ВсеИменаВидовДоступа.Вставить(ВРег("ПравоЧтения"),    Истина);
	ВсеИменаВидовДоступа.Вставить(ВРег("ПравоИзменения"), Истина);
	
	ВсеТипыЗначений      = Новый Соответствие;
	ВсеТипыГруппЗначений = Новый Соответствие;
	
	Для каждого ВидДоступа Из ВидыДоступа Цикл
		
		Если ВсеИменаВидовДоступа[ВРег(ВидДоступа.Имя)] <> Неопределено Тогда
			ВызватьИсключение ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Имя вида доступа ""%1"" уже определено.'"),
				ВидДоступа.Имя);
		КонецЕсли;
		
		// Проверка повторения типов значений и групп.
		ПроверитьТип(ВидДоступа, ВидДоступа.ТипЗначений,      ВсеТипыЗначений,      Параметры);
		ПроверитьТип(ВидДоступа, ВидДоступа.ТипГруппЗначений, ВсеТипыГруппЗначений, Параметры, Истина);
		// Проверка пересечения типов значений и групп.
		ПроверитьТип(ВидДоступа, ВидДоступа.ТипЗначений,      ВсеТипыГруппЗначений, Параметры,       , Истина);
		ПроверитьТип(ВидДоступа, ВидДоступа.ТипГруппЗначений, ВсеТипыЗначений,      Параметры, Истина, Истина);
		
		Для каждого Строка Из ВидДоступа.ДополнительныеТипы Цикл
			// Проверка повторения типов значений и групп.
			ПроверитьТип(ВидДоступа, Строка.ТипЗначений,      ВсеТипыЗначений,      Параметры);
			ПроверитьТип(ВидДоступа, Строка.ТипГруппЗначений, ВсеТипыГруппЗначений, Параметры, Истина);
			// Проверка пересечения типов значений и групп.
			ПроверитьТип(ВидДоступа, Строка.ТипЗначений,      ВсеТипыГруппЗначений, Параметры,       , Истина);
			ПроверитьТип(ВидДоступа, Строка.ТипГруппЗначений, ВсеТипыЗначений,      Параметры, Истина, Истина);
		КонецЦикла;
		
		ПустаяСсылкаТипаЗначений = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
			Метаданные.НайтиПоТипу(ВидДоступа.ТипЗначений).ПолноеИмя()).ПустаяСсылка();
		
		Свойства = Новый Структура;
		Свойства.Вставить("Имя",                      ВидДоступа.Имя);
		Свойства.Вставить("Ссылка",                   ПустаяСсылкаТипаЗначений);
		Свойства.Вставить("Представление",            ВидДоступа.Представление);
		Свойства.Вставить("ТипЗначений",              ВидДоступа.ТипЗначений);
		Свойства.Вставить("ТипГруппЗначений",         ВидДоступа.ТипГруппЗначений);
		Свойства.Вставить("НесколькоГруппЗначений",   ВидДоступа.НесколькоГруппЗначений);
		Свойства.Вставить("ДополнительныеТипы",       Новый Массив);
		Свойства.Вставить("ТипыВыбираемыхЗначений",   Новый Массив);
		
		МассивСвойств.Добавить(Свойства);
		ПоИменам.Вставить(Свойства.Имя, Свойства);
		ПоСсылкам.Вставить(ПустаяСсылкаТипаЗначений, Свойства);
		ПоТипамЗначений.Вставить(Свойства.ТипЗначений, Свойства);
		ПоТипамГруппИЗначений.Вставить(Свойства.ТипЗначений, Свойства);
		Если Свойства.ТипГруппЗначений <> Тип("Неопределено") Тогда
			ПоТипамГруппИЗначений.Вставить(Свойства.ТипГруппЗначений, Свойства);
		КонецЕсли;
		ЗаполнитьЗначенияДоступаСГруппами(Свойства, ЗначенияДоступаСГруппами, Свойства, Параметры);
		
		Для каждого Строка Из ВидДоступа.ДополнительныеТипы Цикл
			Элемент = Новый Структура;
			Элемент.Вставить("ТипЗначений",            Строка.ТипЗначений);
			Элемент.Вставить("ТипГруппЗначений",       Строка.ТипГруппЗначений);
			Элемент.Вставить("НесколькоГруппЗначений", Строка.НесколькоГруппЗначений);
			Свойства.ДополнительныеТипы.Добавить(Элемент);
			ПоТипамЗначений.Вставить(Строка.ТипЗначений, Свойства);
			ПоТипамГруппИЗначений.Вставить(Строка.ТипЗначений, Свойства);
			Если Строка.ТипГруппЗначений <> Тип("Неопределено") Тогда
				ПоТипамГруппИЗначений.Вставить(Строка.ТипГруппЗначений, Свойства);
			КонецЕсли;
			ЗаполнитьЗначенияДоступаСГруппами(Строка, ЗначенияДоступаСГруппами, Свойства, Параметры);
		КонецЦикла;
		
	КонецЦикла;
	
	БезГруппДляЗначенияДоступа      = Новый Массив;
	СОднойГруппойДляЗначенияДоступа = Новый Массив;
	ТипыЗначенийДоступаСГруппами    = Новый Соответствие;
	
	ВидыДоступаСГруппами = Новый Соответствие;
	
	Для каждого КлючИЗначение Из ЗначенияДоступаСГруппами.ПоТипамСсылок Цикл
		ИмяВидаДоступа = КлючИЗначение.Значение.Имя;
		ВидыДоступаСГруппами.Вставить(ИмяВидаДоступа, Истина);
		
		ПустаяСсылка = ПустаяСсылкаОбъектаМетаданных(КлючИЗначение.Ключ);
		ТипыЗначенийДоступаСГруппами.Вставить(ТипЗнч(ПустаяСсылка), ПустаяСсылка);
		
		Если НЕ КлючИЗначение.Значение.НесколькоГруппЗначений
		   И СОднойГруппойДляЗначенияДоступа.Найти(ИмяВидаДоступа) = Неопределено Тогда
		   
			СОднойГруппойДляЗначенияДоступа.Добавить(ИмяВидаДоступа);
		КонецЕсли;
	КонецЦикла;
	
	ТипыЗначенийДоступаСГруппами.Вставить(Тип("СправочникСсылка.Пользователи"),
		Справочники.Пользователи.ПустаяСсылка());
	
	ТипыЗначенийДоступаСГруппами.Вставить(Тип("СправочникСсылка.ГруппыПользователей"),
		Справочники.ГруппыПользователей.ПустаяСсылка());
	
	ТипыЗначенийДоступаСГруппами.Вставить(Тип("СправочникСсылка.ВнешниеПользователи"),
		Справочники.ВнешниеПользователи.ПустаяСсылка());
	
	ТипыЗначенийДоступаСГруппами.Вставить(Тип("СправочникСсылка.ГруппыВнешнихПользователей"),
		Справочники.ГруппыВнешнихПользователей.ПустаяСсылка());
	
	Для каждого СвойстваВидаДоступа Из МассивСвойств Цикл
		Если ВидыДоступаСГруппами.Получить(СвойстваВидаДоступа.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СвойстваВидаДоступа.Имя = "Пользователи"
		 ИЛИ СвойстваВидаДоступа.Имя = "ВнешниеПользователи" Тогда
			Продолжить;
		КонецЕсли;
		БезГруппДляЗначенияДоступа.Добавить(СвойстваВидаДоступа.Имя);
	КонецЦикла;
	
	СвойстваВидовДоступа = Новый Структура;
	СвойстваВидовДоступа.Вставить("Массив",                          МассивСвойств);
	СвойстваВидовДоступа.Вставить("ПоИменам",                        ПоИменам);
	СвойстваВидовДоступа.Вставить("ПоСсылкам",                       ПоСсылкам);
	СвойстваВидовДоступа.Вставить("ПоТипамЗначений",                 ПоТипамЗначений);
	СвойстваВидовДоступа.Вставить("ПоТипамГруппИЗначений",           ПоТипамГруппИЗначений);
	СвойстваВидовДоступа.Вставить("ЗначенияДоступаСГруппами",        ЗначенияДоступаСГруппами);
	СвойстваВидовДоступа.Вставить("БезГруппДляЗначенияДоступа",      БезГруппДляЗначенияДоступа);
	СвойстваВидовДоступа.Вставить("СОднойГруппойДляЗначенияДоступа", СОднойГруппойДляЗначенияДоступа);
	СвойстваВидовДоступа.Вставить("ТипыЗначенийДоступаСГруппами",    ТипыЗначенийДоступаСГруппами);
	
	// Проверка совместимости перехода на новые версии программы.
	Если Параметры.ОпределяемыеТипыЗначенийДоступа.Получить(
		ТипЗнч(ПланыВидовХарактеристик.УдалитьВидыДоступа.ПустаяСсылка())) = Неопределено Тогда
	
		ОписаниеОшибки =
			НСтр("ru = 'Тип ПланВидовХарактеристикСсылка.УдалитьВидыДоступа,
			           |необходимый для перехода на новые версии программы
			           |не указан в определяемом типе ""Значение доступа"".'");
		
		ВызватьИсключение Параметры.ЗаголовокОшибки + ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(СвойстваВидовДоступа);
	
КонецФункции

// Для функции СвойстваВидовДоступа.
Процедура ЗаполнитьЗначенияДоступаСГруппами(Строка, ЗначенияДоступаСГруппами, Свойства, Параметры)
	
	Если Свойства.Имя = "Пользователи" Тогда
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Тип("СправочникСсылка.Пользователи"));
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Тип("СправочникСсылка.ГруппыПользователей"));
		Возврат;
	КонецЕсли;
	
	Если Свойства.Имя = "ВнешниеПользователи" Тогда
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Тип("СправочникСсылка.ВнешниеПользователи"));
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
		Возврат;
	КонецЕсли;
	
	Если Строка.ТипГруппЗначений = Тип("Неопределено") Тогда
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Строка.ТипЗначений);
		Возврат;
	КонецЕсли;
	
	ТипСсылки = Строка.ТипЗначений;
	
	МетаданныеТипаЗначений = Метаданные.НайтиПоТипу(Строка.ТипЗначений);
	Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеТипаЗначений) Тогда
		ТипОбъекта = ТипСсылки;
	Иначе
		ТипОбъекта = СтандартныеПодсистемыСервер.ТипОбъектаИлиНабораЗаписейОбъектаМетаданных(
			МетаданныеТипаЗначений);
	КонецЕсли;
	
	Если Строка.ТипГруппЗначений <> Тип("Неопределено") Тогда
		ДобавитьВМассив(Свойства.ТипыВыбираемыхЗначений, Строка.ТипГруппЗначений);
	КонецЕсли;
	
	ЗначенияДоступаСГруппами.ПоТипам.Вставить(ТипСсылки,  Свойства);
	ЗначенияДоступаСГруппами.ПоТипам.Вставить(ТипОбъекта, Свойства);
	ЗначенияДоступаСГруппами.ПоТипамСсылок.Вставить(ТипСсылки, Свойства);
	ЗначенияДоступаСГруппами.ИменаТаблиц.Добавить(МетаданныеТипаЗначений.ПолноеИмя());
	
	МетаданныеТипаГруппЗначений = Метаданные.НайтиПоТипу(Строка.ТипГруппЗначений);
	ПустаяСсылкаТипаГруппЗначений = ПустаяСсылкаОбъектаМетаданных(МетаданныеТипаГруппЗначений);
	
	ЗначенияДоступаСГруппами.ТипыГруппЗначений.Вставить(ТипСсылки, ПустаяСсылкаТипаГруппЗначений);
	ЗначенияДоступаСГруппами.ТипыГруппЗначений.Вставить(
		ПустаяСсылкаОбъектаМетаданных(МетаданныеТипаЗначений), ПустаяСсылкаТипаГруппЗначений);
	
	// Проверка наличия типа ссылки в соответствующих объектах метаданных.
	Если Параметры.ТипыПодпискиОбновитьГруппыЗначенийДоступа.Получить(ТипОбъекта) = Неопределено
	   И НЕ ОбщегоНазначения.ЭтоПеречисление(МетаданныеТипаЗначений) Тогда
		
		ВызватьИсключение Параметры.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип значения доступа ""%1"", использующий группы значений, не указан
			           |в определяемом типе ""Значение доступа с группами значений доступа объект"".'"),
			Строка(ТипОбъекта));
	КонецЕсли;
	
КонецПроцедуры

// Для функции СвойстваВидовДоступа.
Процедура ПроверитьТип(ВидДоступа, Тип, ВсеТипы, Параметры, ПроверкаТиповГрупп = Ложь, ПроверкаПересечения = Ложь)
	
	Если Тип = Тип("Неопределено") Тогда
		Если ПроверкаТиповГрупп Тогда
			Возврат;
		КонецЕсли;
		ВызватьИсключение Параметры.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для вида доступа ""%1"" не указан тип значений доступа.'"),
			ВидДоступа.Имя);
	КонецЕсли;
	
	// Проверка, что указан тип ссылки.
	Если НЕ ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
		Если ПроверкаТиповГрупп Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Тип ""%1"" указан, как тип групп значений, для вида доступа ""%2"".
				           |Однако это не тип ссылки.'");
		Иначе
			ОписаниеОшибки =
				НСтр("ru = 'Тип ""%1"" указан, как тип значений, для вида доступа ""%2"".
				           |Однако это не тип ссылки.'");
		КонецЕсли;
		ВызватьИсключение Параметры.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеОшибки, Тип, ВидДоступа.Имя);
	КонецЕсли;
	
	// Проверка повторения и пересечения типов значений и групп значений.
	ДляТогоЖеВидаДоступаОшибкиНет = Ложь;
	
	Если ПроверкаТиповГрупп Тогда
		Если ПроверкаПересечения Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Тип ""%1"" указан, как тип значений, для вида доступа ""%2"".
				           |Для вида доступа ""%3"" его нельзя указать, как тип групп значений.'");
		Иначе
			ДляТогоЖеВидаДоступаОшибкиНет = Истина;
			ОписаниеОшибки =
				НСтр("ru = 'Тип групп значений ""%1"" уже указан для вида доступа ""%2"".
				           |Для вида доступа ""%3"" его нельзя указать.'");
		КонецЕсли;
	Иначе
		Если ПроверкаПересечения Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Тип ""%1"" указан, как тип групп значений, для вида доступа ""%2"".
				           |Для вида доступа ""%3"" его нельзя указать, как тип значений.'");
		Иначе
			ОписаниеОшибки =
				НСтр("ru = 'Тип значений ""%1"" уже указан для вида доступа ""%2"".
				           |Для вида доступа ""%3"" его нельзя указать.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ВсеТипы.Получить(Тип) <> Неопределено Тогда
		Если НЕ (ДляТогоЖеВидаДоступаОшибкиНет И ВидДоступа.Имя = ВсеТипы.Получить(Тип)) Тогда
			ВызватьИсключение Параметры.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ОписаниеОшибки, Тип, ВсеТипы.Получить(Тип), ВидДоступа.Имя);
		КонецЕсли;
	ИначеЕсли НЕ ПроверкаПересечения Тогда
		ВсеТипы.Вставить(Тип, ВидДоступа.Имя);
	КонецЕсли;
	
	// Проверка состава определяемых типов.
	ОписаниеОшибки = "";
	Если Параметры.ОпределяемыеТипыЗначенийДоступа.Получить(Тип) = Неопределено Тогда
		Если ПроверкаТиповГрупп Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Тип групп значений доступа ""%1"" вида доступа ""%2""
				           |не указан в определяемом типе ""Значение доступа"".'");
		Иначе
			ОписаниеОшибки =
				НСтр("ru = 'Тип значений доступа ""%1"" вида доступа ""%2""
				           |не указан в определяемом типе ""Значение доступа"".'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВызватьИсключение Параметры.ЗаголовокОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ОписаниеОшибки, Тип, ВидДоступа.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ЗаполнитьЗначенияДоступаСГруппами.
Процедура ДобавитьВМассив(Массив, Значение)
	
	Если Массив.Найти(Значение) = Неопределено Тогда
		Массив.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьОписаниеСвойствВидовДоступа.
Функция ЕстьИзмененияТиповГруппИЗначенийДоступа(СвойстваВидовДоступа, Сохраненные)
	
	Если НЕ ТипЗнч(Сохраненные) = Тип("ФиксированнаяСтруктура")
	 ИЛИ НЕ Сохраненные.Свойство("ПоТипамЗначений")
	 ИЛИ НЕ Сохраненные.Свойство("ТипыЗначенийДоступаСГруппами")
	 ИЛИ НЕ ТипЗнч(Сохраненные.ПоТипамЗначений)              = Тип("ФиксированноеСоответствие")
	 ИЛИ НЕ ТипЗнч(Сохраненные.ТипыЗначенийДоступаСГруппами) = Тип("ФиксированноеСоответствие")
	 ИЛИ НЕ СвойстваВидовДоступа.Свойство("ПоТипамЗначений")
	 ИЛИ НЕ СвойстваВидовДоступа.Свойство("ТипыЗначенийДоступаСГруппами")
	 ИЛИ НЕ ТипЗнч(СвойстваВидовДоступа.ПоТипамЗначений)              = Тип("ФиксированноеСоответствие")
	 ИЛИ НЕ ТипЗнч(СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами) = Тип("ФиксированноеСоответствие") Тогда
	
		Возврат Истина;
	КонецЕсли;
	
	Если КлючиСоответствийОтличаются(СвойстваВидовДоступа.ПоТипамЗначений, Сохраненные.ПоТипамЗначений) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КлючиСоответствийОтличаются(СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами,
			Сохраненные.ТипыЗначенийДоступаСГруппами) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для функции ЕстьИзмененияТиповГруппИЗначенийДоступа.
Функция КлючиСоответствийОтличаются(Новое, Старое)
	
	Если Новое.Количество() <> Старое.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из Новое Цикл
		Если Старое.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область УниверсальноеОграничение

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события.

// Обработчик подписок ПроверитьДоступПередЗаписью* проверяет доступ к старой версии объекта, проверяет
// изменение полей объектов дополнительных таблиц, присоединенных в ограничениях доступа списков.
// Если изменения найдены, тогда регистрируется необходимость обновления ключей доступа
// для списков, у которых в ограничениях доступа присоединены дополнительные таблицы.
//
// Параметры:
//  Источник        - КонстантаМенеджер,
//                    СправочникОбъект,
//                    ДокументОбъект,
//                    ПланВидовХарактеристикОбъект,
//                    ПланСчетовОбъект,
//                    ПланВидовРасчетаОбъект,
//                    БизнесПроцессОбъект,
//                    ЗадачаОбъект,
//                    ПланОбменаОбъект - объект данных, передаваемый в подписку на событие ПередЗаписью.
//
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
//  РежимЗаписи     - РежимЗаписиДокумента - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект.
//
//  РежимПроведения - РежимПроведенияДокумента - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это ДокументОбъект.
//
Процедура ПроверитьДоступПередЗаписью(Источник, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	// ОбменДанными.Загрузка обрабатывается внутри процедуры нестандартно (с учетом проверки прав).
	ПроверитьДоступПередЗаписьюИсточника(Источник, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик подписок ПроверитьДоступПередЗаписьюНабораЗаписей* проверяет доступ к старой версии набора записей,
// проверяет изменение полей наборов записей дополнительных таблиц, присоединенных в ограничениях доступа списков.
// Если изменения найдены, тогда регистрируется необходимость обновления ключей доступа
// для списков, у которых в ограничениях доступа присоединены дополнительные таблицы.
//
// Параметры:
//  Источник        - РегистрСведенийНаборЗаписей,
//                    РегистрНакопленияНаборЗаписей,
//                    РегистрБухгалтерииНаборЗаписей,
//                    РегистрРасчетаНаборЗаписей,
//                    ПерерасчетНаборЗаписей - набор записей, передаваемый в подписку
//                                             на событие ПередЗаписью.
//
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  Замещение       - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//
//  ТолькоЗапись    - Булево - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
//  ЗаписьФактическогоПериодаДействия - Булево - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
//  ЗаписьПерерасчетов - Булево - параметр, передаваемый в подписку на событие ПередЗаписью,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
Процедура ПроверитьДоступПередЗаписьюНабораЗаписей(Источник, Отказ,
				Замещение = Неопределено,
				ТолькоЗапись = Неопределено,
				ЗаписьФактическогоПериодаДействия = Неопределено,
				ЗаписьПерерасчетов = Неопределено) Экспорт
	
	// ОбменДанными.Загрузка обрабатывается внутри процедуры нестандартно (с учетом проверки прав).
	ПроверитьДоступПередЗаписьюИсточника(Источник, Отказ, Истина, Замещение);
	
КонецПроцедуры

// Обработчик подписок ПроверитьДоступПриЗаписи* проверяет устаревание ключа доступа
// новой версии объекта. Обновляет устаревший ключ доступа и, в этом случае,
// выполняет проверку прав Чтение и Изменение новой версии объекта.
//
// Параметры:
//  Источник        - КонстантаМенеджер,
//                    СправочникОбъект,
//                    ДокументОбъект,
//                    ПланВидовХарактеристикОбъект,
//                    ПланСчетовОбъект,
//                    ПланВидовРасчетаОбъект,
//                    БизнесПроцессОбъект,
//                    ЗадачаОбъект,
//                    ПланОбменаОбъект - объект данных, передаваемый в подписку на событие ПриЗаписи.
//
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПриЗаписи.
//
Процедура ПроверитьДоступПриЗаписи(Источник, Отказ) Экспорт
	
	// ОбменДанными.Загрузка обрабатывается внутри процедуры нестандартно (с учетом проверки прав).
	ПроверитьДоступПриЗаписиИсточника(Источник, Отказ, Ложь, Ложь);
	
КонецПроцедуры

// Обработчик подписок ПроверитьДоступПриЗаписиНабораЗаписей* проверяет устаревание ключей доступа
// новой версии набора записей. Обновляет устаревшие ключи доступа и, в этом случае,
// выполняет проверку прав Чтение и Изменение новой версии набора записей.
//
// Параметры:
//  Источник        - РегистрСведенийНаборЗаписей,
//                    РегистрНакопленияНаборЗаписей,
//                    РегистрБухгалтерииНаборЗаписей,
//                    РегистрРасчетаНаборЗаписей,
//                    ПерерасчетНаборЗаписей - набор записей, передаваемый в подписку
//                                             на событие ПриЗаписи.
//
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПриЗаписи.
//  Замещение       - Булево - параметр, передаваемый в подписку на событие ПриЗаписи.
//
//  ТолькоЗапись    - Булево - параметр, передаваемый в подписку на событие ПриЗаписи,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
//  ЗаписьФактическогоПериодаДействия - Булево - параметр, передаваемый в подписку на событие ПриЗаписи,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
//  ЗаписьПерерасчетов - Булево - параметр, передаваемый в подписку на событие ПриЗаписи,
//                    когда Источник это РегистрРасчетаНаборЗаписей.
//
Процедура ПроверитьДоступПриЗаписиНабораЗаписей(Источник, Отказ,
				Замещение = Неопределено,
				ТолькоЗапись = Неопределено,
				ЗаписьФактическогоПериодаДействия = Неопределено,
				ЗаписьПерерасчетов = Неопределено) Экспорт
	
	// ОбменДанными.Загрузка обрабатывается внутри процедуры нестандартно (с учетом проверки прав).
	ПроверитьДоступПриЗаписиИсточника(Источник, Отказ, Истина, Замещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальное ограничение доступа.

Функция ДоступРазрешен(ОписаниеДанных, Изменение) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ОписаниеДанных));
	Если ОбъектМетаданных = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра %1 в %2.
			           |Ожидалась ссылка или ключ записи.
			           |Передано значение: %3 (тип %4).'"),
			"ОписаниеДанных",
			?(Изменение, "УправлениеДоступом.ИзменениеРазрешено",
				"УправлениеДоступом.ЧтениеРазрешено"),
			Строка(ОписаниеДанных),
			Строка(ТипЗнч(ОписаниеДанных)));
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не ПравоДоступа(?(Изменение, "Изменение", "Чтение"), ОбъектМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ИдентификаторТранзакции = Новый УникальныйИдентификатор;
	ПараметрыОграничения = ПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции);
	
	Если ПараметрыОграничения.ОграничениеОтключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПараметрыОграничения.ДоступЗапрещен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ГруппыДоступаАвторизованногоПользователя",
		ПараметрыСеанса.ГруппыДоступаАвторизованногоПользователя);
	
	Если ПараметрыОграничения.ЭтоСсылочныйТип Тогда
		СсылкаНаОбъект = ?(ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОписаниеДанных)),
			ОписаниеДанных, ОписаниеДанных.Ссылка);
		
		Запрос.Текст = ПараметрыОграничения.ТекстЗапросаПроверкиПравЧтениеИзменение;
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		
		ДоступРазрешен = Не Запрос.Выполнить().Пустой();
	Иначе
		НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя).СоздатьНаборЗаписей();
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			ЭлементОтбора.Значение = ОписаниеДанных[ЭлементОтбора.Имя];
			ЭлементОтбора.Использование = Истина;
		КонецЦикла;
		ОтборПоИзмерениям = ОтборПоИзмерениямНабораЗаписей(НаборЗаписей, Запрос);
		Запрос.Текст = СтрЗаменить(ПараметрыОграничения.ТекстЗапросаПроверкиПравЧтениеИзменение,
			"&ОтборПоИзмерениям", ОтборПоИзмерениям);
		
		ДоступРазрешен = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат ДоступРазрешен;
	
КонецФункции

// Требуется, как начальная максимальная дата при планировании обновления доступа.
Функция МаксимальнаяДата() Экспорт
	
	Возврат '39991231235959';
	
КонецФункции

// Для функции НастройкиВнедрения.
Функция ПолноеИмяXML(ПолноеИмя, ТипыТаблицПоИменам)
	
	СоставИмени = СтрРазделить(ПолноеИмя, ".", Ложь);
	Свойства = ТипыТаблицПоИменам.Получить(ВРег(СоставИмени[0]));
	
	Возврат Свойства.ЯзыкАнглийский + "." + СоставИмени[1];
	
КонецФункции

// Для функции НастройкиВнедрения.
Функция ИмяТипаСсылкиXML(ПолноеИмя, ТипыТаблицПоИменам)
	
	СоставИмени = СтрРазделить(ПолноеИмя, ".", Ложь);
	Свойства = ТипыТаблицПоИменам.Получить(ВРег(СоставИмени[0]));
	
	Если Свойства.ЭтоСсылочныйТип Тогда
		Возврат Свойства.ЯзыкАнглийский + "Ref." + СоставИмени[1];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Для функции НастройкиВнедрения.
Функция ИмяТипаОбъектаИлиНабораЗаписейXML(ПолноеИмя, ТипыТаблицПоИменам)
	
	СоставИмени = СтрРазделить(ПолноеИмя, ".", Ложь);
	Свойства = ТипыТаблицПоИменам.Получить(ВРег(СоставИмени[0]));
	
	Если Свойства.ЭтоСсылочныйТип Тогда
		Возврат Свойства.ЯзыкАнглийский + "Object." + СоставИмени[1];
	КонецЕсли;
	
	Если СтрНачинаетсяС(Свойства.ИмяКоллекции, "Регистры") Тогда
		Возврат Свойства.ЯзыкАнглийский + "RecordSet." + СоставИмени[1];
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Для функции НастройкиВнедрения.
Процедура ДобавитьОграниченияВРолях(ПолноеИмяXML, ПолноеИмя, ОграниченияВРолях,
			СвойстваОграничений, ТипыИзмеренийРегистровКлючей, ТипыТаблицПоИменам, ПредопределенныеИдентификаторы)
	
	Свойства = СвойстваОграничений.Получить(ПолноеИмя);
	Если Свойства <> Неопределено И Свойства.ДоступЗапрещен Тогда
		Возврат;
	КонецЕсли;
	
	ОграничениеВРоли = Новый Структура("ШаблонДляОбъекта, Параметры", Истина, Новый Массив);
	ОграниченияВРолях.Вставить(ПолноеИмяXML, ОграничениеВРоли);
	
	Если Свойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Свойства.ПолеВладельца <> Неопределено Тогда
		ОграничениеВРоли.Параметры.Добавить(Свойства.ПолеВладельца.Имя);
		Возврат;
	КонецЕсли;
	
	Если Свойства.ОпорныеПоля = Неопределено
	 Или Не ЗначениеЗаполнено(Свойства.ОпорныеПоля) Тогда
		Возврат;
	КонецЕсли;
	
	ОграничениеВРоли.ШаблонДляОбъекта = Ложь;
	
	Если ЗначениеЗаполнено(Свойства.ИмяОтдельногоРегистраКлючей) Тогда
		ПервыйПараметр = Свойства.ИмяОтдельногоРегистраКлючей;
		
		ДобавитьТипыИзмерения(Свойства.ИмяОтдельногоРегистраКлючей,
			Свойства.ОпорныеПоля, ТипыИзмеренийРегистровКлючей, ТипыТаблицПоИменам, ПолноеИмя);
	Иначе
		ПервыйПараметр =
			УправлениеДоступомСлужебныйПовтИсп.ОписаниеПредопределенногоИдентификатораОбъектаМетаданных(ПолноеИмя);
		
		ДобавитьТипыИзмерения("КлючиДоступаКРегистрам",
			Свойства.ОпорныеПоля, ТипыИзмеренийРегистровКлючей, ТипыТаблицПоИменам, ПолноеИмя);
		
		ПредопределенныеИдентификаторы.Вставить(ПервыйПараметр, ПолноеИмя);
	КонецЕсли;
	
	ОграничениеВРоли.Параметры.Добавить(ПервыйПараметр);
	
	Для Каждого ОпорноеПоле Из Свойства.ОпорныеПоля.Все Цикл
		ОграничениеВРоли.Параметры.Добавить(ОпорноеПоле);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьОграниченияВРолях.
Процедура ДобавитьТипыИзмерения(ИмяРегистраКлючей, ОпорныеПоля, ТипыИзмеренийРегистровКлючей,
			ТипыТаблицПоИменам, ИмяИсходногоРегистра)
	
	ИмяРегистраXML = "InformationRegister." + ИмяРегистраКлючей;
	
	Если ИмяРегистраКлючей = "КлючиДоступаКРегистрам" Тогда
		ТипыИзмерения = ТипыИзмеренийРегистровКлючей.Получить(ИмяРегистраXML);
		Если ТипыИзмерения = Неопределено Тогда
			ТипыИзмерения = Новый Массив;
			ТипыИзмерения.Добавить("EnumRef.ДополнительныеЗначенияДоступа");
			ТипыИзмеренийРегистровКлючей.Вставить(ИмяРегистраXML, ТипыИзмерения);
		КонецЕсли;
		Для Каждого ХранилищеТиповПоля Из ОпорныеПоля.ТипыВсех Цикл
			ТипыПоля = ХранилищеТиповПоля.Получить();
			Для Каждого Тип Из ТипыПоля.Типы() Цикл
				ИмяТипаСсылки = ИмяТипаСсылкиXML(Метаданные.НайтиПоТипу(Тип).ПолноеИмя(), ТипыТаблицПоИменам);
				Если ТипыИзмерения.Найти(ИмяТипаСсылки) = Неопределено Тогда
					ТипыИзмерения.Добавить(ИмяТипаСсылки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ТипыИзмерений = Новый Массив;
		ТипыИзмеренийРегистровКлючей.Вставить(ИмяРегистраXML, ТипыИзмерений);
		Индекс = 0;
		Для Каждого ХранилищеТиповПоля Из ОпорныеПоля.ТипыВсех Цикл
			ТипПоля = ХранилищеТиповПоля.Получить();
			ТипПоля = Новый ОписаниеТипов(ТипПоля, "EnumRef.ДополнительныеЗначенияДоступа");
			ИмяПоля = ОпорныеПоля.Все[Индекс];
			ТипыИзмерений.Добавить(Новый Структура("Регистр, Поле, Тип", ИмяИсходногоРегистра, ИмяПоля, ТипПоля));
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область ПроверкаДоступаПриИзменении

// Для обработчиков подписок на событие ПередЗаписью.
Процедура ПроверитьДоступПередЗаписьюИсточника(Источник, Отказ, ЭтоНаборЗаписей, Замещение)
	
	Если ПропуститьПроверкуДоступа(Отказ, Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
	Источник.ДополнительныеСвойства.Вставить("УправлениеДоступомИдентификаторТранзакции",
		Новый УникальныйИдентификатор);
	
	Если ЭтоПолноправныйПользователь Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРезервнойКопии") Тогда
			// При загрузке из резервной копии не требуется выполнять никаких действий.
			Возврат;
		КонецЕсли;
		Если Источник.ДополнительныеСвойства.Свойство("ПропуститьОбновлениеКлючейДоступа") Тогда
			// Ключи доступа будут обновляться самостоятельно, например, при записи связанных объектов.
			Возврат;
		КонецЕсли;
		Если Источник.ОбменДанными.Загрузка Тогда
			// При загрузке данных в полноправном режиме доступ не требуется проверять,
			// поэтому ключи доступа обновляются в отложенном режиме для повышения производительности.
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСтараяВерсия =  ЭтоНаборЗаписей И Замещение
	             Или Не ЭтоНаборЗаписей И Не Источник.ЭтоНовый();
	
	Если ЕстьСтараяВерсия Тогда
		ЗапомнитьДанныеВлияющиеНаЗависимыеКлючиДоступа(Источник, ЭтоНаборЗаписей, Замещение);
	КонецЕсли;
	
	
	Если ЭтоПолноправныйПользователь Тогда
		// В полноправном режиме (в том числе при загрузке данных) доступ не требуется проверять,
		// поэтому ключи доступа обновляются в отложенном режиме для повышения производительности.
		Возврат;
	КонецЕсли;
	
	Если ЕстьСтараяВерсия Тогда
		ПроверитьДоступКИсточнику(Источник, Истина, ЭтоНаборЗаписей, Замещение);
	КонецЕсли;
	
КонецПроцедуры

// Для обработчиков подписок на событие ПриЗаписи.
Процедура ПроверитьДоступПриЗаписиИсточника(Источник, Отказ, ЭтоНаборЗаписей, Замещение)
	
	Если ПропуститьПроверкуДоступа(Отказ, Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ЗагрузкаДанныхИзРезервнойКопии") Тогда
			// При загрузке из резервной копии не требуется выполнять никаких действий.
			Возврат;
		КонецЕсли;
		Если Источник.ДополнительныеСвойства.Свойство("ПропуститьОбновлениеКлючейДоступа") Тогда
			// Ключи доступа будут обновляться самостоятельно, например, при записи связанных объектов.
			Возврат;
		КонецЕсли;
		// В полноправном режиме (в том числе при загрузке данных) доступ не требуется проверять,
		// поэтому ключи доступа обновляются в отложенном режиме для повышения производительности.
		ЗапланироватьОбновлениеУстаревшихКлючейДоступаИсточника(Источник);
		ЗапланироватьОбновлениеЗависимыхУстаревшихКлючейДоступа(Источник, ЭтоНаборЗаписей);
		Возврат;
	КонецЕсли;
	
	// Проверка доступа к новой версии.
	ПроверитьДоступКИсточнику(Источник, Ложь, ЭтоНаборЗаписей, Замещение);
	
	ЗапланироватьОбновлениеЗависимыхУстаревшихКлючейДоступа(Источник, ЭтоНаборЗаписей);
	
КонецПроцедуры

// Для процедур ПроверитьДоступПередЗаписьюИсточника, ПроверитьДоступПриЗаписиИсточника.
Функция ПропуститьПроверкуДоступа(Отказ, Источник)
	
	Если Отказ Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоИдентификаторОбъектаМетаданных(Источник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если УправлениеДоступомСлужебныйПовтИсп.РазделенныеДанныеНедоступны() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ПроверитьДоступПередЗаписьюИсточника.
Процедура ЗапомнитьДанныеВлияющиеНаЗависимыеКлючиДоступа(Источник, ЭтоНаборЗаписей, Замещение)
	
	ПолноеИмя = Источник.Метаданные().ПолноеИмя();
	СвойстваСпискаКакВедущего = СвойстваСпискаКакВедущего(ПолноеИмя,
		Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции);
	
	Если СвойстваСпискаКакВедущего = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоЗначениямПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЭтоНаборЗаписей Тогда
		ОтборПоИзмерениям = ОтборПоИзмерениямНабораЗаписей(Источник, Запрос);
		Запрос.Текст = СтрЗаменить(СвойстваСпискаКакВедущего.ПоЗначениямПолей.ТекстЗапроса,
			"&ОтборПоИзмерениям", ОтборПоИзмерениям);
	Иначе
		Запрос.Текст = СвойстваСпискаКакВедущего.ПоЗначениямПолей.ТекстЗапроса;
		Запрос.УстановитьПараметр("СсылкаНаОбъект", Источник.Ссылка);
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить(
		"УправлениеДоступомЗначенияПолейДляПроверкиИзмененияПриЗаписи",
		Запрос.ВыполнитьПакет());
	
КонецПроцедуры

// Для процедур ЗапомнитьДанныеВлияющиеНаЗависимыеКлючиДоступа, ПроверитьДоступКНаборуЗаписей.
Функция ОтборПоИзмерениямНабораЗаписей(НаборЗаписей, Запрос, ЗапросНовыхКомбинаций = Неопределено)
	
	ОтборПоИзмерениям = "";
	
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		ОтборПоИзмерениям = ОтборПоИзмерениям + ?(ОтборПоИзмерениям = "", "", "
		|	И ") + "ТекущаяТаблица." + ЭлементОтбора.Имя + " = &ЗначениеПоля" + ЭлементОтбора.Имя;
		
		Запрос.УстановитьПараметр("ЗначениеПоля" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		Если ЗапросНовыхКомбинаций <> Неопределено Тогда
			ЗапросНовыхКомбинаций.УстановитьПараметр("ЗначениеПоля" + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборПоИзмерениям = "" Тогда
		ОтборПоИзмерениям = "ИСТИНА";
	КонецЕсли;
	
	Возврат ОтборПоИзмерениям;
	
КонецФункции

// Для процедур ПроверитьДоступПередЗаписьюИсточника, ПроверитьДоступПриЗаписиИсточника.
Процедура ПроверитьДоступКИсточнику(Источник, ПередЗаписью, ЭтоНаборЗаписей, Замещение)
	
	ПолноеИмя = Источник.Метаданные().ПолноеИмя();
	ИдентификаторТранзакции = Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции;
	ПараметрыОграничения = ПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции);
	
	Если ПараметрыОграничения.ОграничениеОтключено Тогда
		Если Не ПередЗаписью И ПараметрыОграничения.ЗаписыватьРазрешенныеКлючиДоступаОбъектов Тогда
			ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи(Источник.Ссылка,
				ПараметрыОграничения, ИдентификаторТранзакции);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОграничения.ДоступЗапрещен Тогда
		Если ПараметрыОграничения.ДляВнешнихПользователей Тогда
			ШаблонОшибки =
				НСтр("ru = 'Внешним пользователям запрещен доступ к данным списка
				           |""%1"".'");
		Иначе
			ШаблонОшибки =
				НСтр("ru = 'Пользователям запрещен доступ к данным списка
				           |""%1"".'");
		КонецЕсли;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			Источник.Метаданные().Представление());
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если ЭтоНаборЗаписей Тогда
		ПроверитьДоступКНаборуЗаписей(Источник, ПередЗаписью, Замещение, ПараметрыОграничения);
	Иначе
		ПроверитьДоступКОбъекту(Источник, ПередЗаписью, ПараметрыОграничения);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПроверитьДоступКИсточнику.
Процедура ПроверитьДоступКОбъекту(Источник, ПередЗаписью, ПараметрыОграничения)
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПередЗаписью Тогда
		Если Не КлючДоступаИсточникаУстарел(Источник.Ссылка, ПараметрыОграничения) Тогда
			Возврат;
		КонецЕсли;
		ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи(Источник.Ссылка, ПараметрыОграничения,
			Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПараметрыОграничения.ТекстЗапросаПроверкиПравЧтениеИзменение;
	Запрос.УстановитьПараметр("Объект", Источник.Ссылка);
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ГруппыДоступаАвторизованногоПользователя",
		ПараметрыСеанса.ГруппыДоступаАвторизованногоПользователя);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат; // Доступ разрешен.
	КонецЕсли;
	
	Если ПараметрыОграничения.ОграничениеЧтенияОтключено Тогда
		ПравоЧтения = Истина;
	Иначе
		Запрос.Текст = ПараметрыОграничения.ТекстЗапросаПроверкиПраваЧтение;
		ПравоЧтения = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	СообщитьОбОшибкеДоступа(Источник.Ссылка, ПередЗаписью, ПравоЧтения);
	
КонецПроцедуры

// Для процедуры ПроверитьДоступКИсточнику.
Процедура ПроверитьДоступКНаборуЗаписей(Источник, ПередЗаписью, Замещение, ПараметрыОграничения)
	
	Если    ПередЗаписью И Не Замещение
	 Или Не ПередЗаписью И Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Не ПередЗаписью Тогда
		ЗапросНовыхКомбинаций = Новый Запрос;
	КонецЕсли;
	
	Если Замещение Тогда
		ОтборПоИзмерениям = ОтборПоИзмерениямНабораЗаписей(Источник, Запрос, ЗапросНовыхКомбинаций);
	Иначе
		Поля = СтрСоединить(ПараметрыОграничения.ОпорныеПоля.Используемые, ",");
		КомбинацииЗначенийОпорныхПолей = Источник.Выгрузить(, Поля);
		КомбинацииЗначенийОпорныхПолей.Свернуть(Поля);
		Запрос.УстановитьПараметр("КомбинацииЗначенийОпорныхПолей", КомбинацииЗначенийОпорныхПолей);
		ЗапросНовыхКомбинаций.УстановитьПараметр("КомбинацииЗначенийОпорныхПолей", КомбинацииЗначенийОпорныхПолей);
		ПоляОтбора = "";
		Для Каждого Поле Из ПараметрыОграничения.ОпорныеПоля.Используемые Цикл
			ПоляОтбора = ПоляОтбора + ?(ПоляОтбора = "", "", ", ") + "ТекущаяТаблица." + Поле;
		КонецЦикла;
		ОтборПоИзмерениям = "(" + ПоляОтбора + ") В (&КомбинацииЗначенийОпорныхПолей)";
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПередЗаписью Тогда
		ЗапросНовыхКомбинаций.Текст =
			СтрЗаменить(ПараметрыОграничения.ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей,
				"&ОтборПоИзмерениям", ОтборПоИзмерениям);
		
		РезультатЗапросаНовыхКомбинаций = ЗапросНовыхКомбинаций.Выполнить();
		Если Не РезультатЗапросаНовыхКомбинаций.Пустой() Тогда
			ЭлементыДанных = РезультатЗапросаНовыхКомбинаций.Выгрузить();
			ЭлементыДанных.Колонки.Добавить("ТекущаяСсылка", Новый ОписаниеТипов("Число"));
			Индекс = 0;
			Для Каждого ЭлементДанных Из ЭлементыДанных Цикл
				ЭлементДанных.ТекущаяСсылка = Индекс;
				Индекс = Индекс + 1;
			КонецЦикла;
			ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи(ЭлементыДанных, ПараметрыОграничения,
				Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ПараметрыОграничения.ТекстЗапросаПроверкиПравЧтениеИзменение,
		"&ОтборПоИзмерениям", ОтборПоИзмерениям);
	
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ГруппыДоступаАвторизованногоПользователя",
		ПараметрыСеанса.ГруппыДоступаАвторизованногоПользователя);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат; // Доступ разрешен.
	КонецЕсли;
	
	Если ПараметрыОграничения.ОграничениеЧтенияОтключено Тогда
		ПравоЧтения = Истина;
	Иначе
		Запрос.Текст = СтрЗаменить(ПараметрыОграничения.ТекстЗапросаПроверкиПраваЧтение,
			"&ОтборПоИзмерениям", ОтборПоИзмерениям);
		ПравоЧтения = Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	СообщитьОбОшибкеДоступа(Источник, ПередЗаписью, ПравоЧтения);
	
КонецПроцедуры

// Для процедур ПроверитьДоступКОбъекту, ПроверитьДоступКНаборуЗаписей.
Процедура СообщитьОбОшибкеДоступа(Данные, ПередЗаписью, ПравоЧтения)
	
	Если ПередЗаписью Тогда
		Если ПравоЧтения Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет права изменения старой версии:
				           |%1'"), ПредставлениеДанных(Данные));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нет права чтения старой версии:
				           |%1'"), ПредставлениеДанных(Данные));
		КонецЕсли;
	Иначе
		Если ПравоЧтения Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав для записи новой версии (ее невозможно будет изменить):
				           |%1'"), ПредставлениеДанных(Данные));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав для записи новой версии (ее невозможно будет прочитать):
				           |%1.'"), ПредставлениеДанных(Данные));
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Для процедуры СообщитьОбОшибкеДоступа.
Функция ПредставлениеДанных(Данные)
	
	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Возврат СокрЛП(Данные);
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ЭтоРегистр = Истина;
		Если ТипЗнч(Данные.Регистр) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Данные.Регистр);
		Иначе
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Данные.Регистр));
		КонецЕсли;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Данные));
		ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных);
	КонецЕсли;
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЭтоРегистр Тогда
		ПредставлениеДанных = ОбъектМетаданных.Представление();
		
		КоличествоПолей = 0;
		Для каждого ЭлементОтбора Из Данные.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				КоличествоПолей = КоличествоПолей + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПолей = 1 Тогда
			ПредставлениеДанных = ПредставлениеДанных
				+ " " + НСтр("ru = 'с полем'")  + " " + Строка(Данные.Отбор);
			
		ИначеЕсли КоличествоПолей > 1 Тогда
			ПредставлениеДанных = ПредставлениеДанных
				+ " " + НСтр("ru = 'с полями'") + " " + Строка(Данные.Отбор);
		КонецЕсли;
	Иначе
		ПредставлениеДанных = Строка(Данные);
		ПредставлениеМетаданных = ОбъектМетаданных.Представление();
		Если Не СтрЗаканчиваетсяНа(ПредставлениеДанных, "(" + ПредставлениеМетаданных + ")") Тогда
			ПредставлениеДанных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)",
				ПредставлениеДанных, ПредставлениеМетаданных);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ПредставлениеДанных;
	
КонецФункции

// Для процедуры ПроверитьДоступКОбъекту и формы ОбновлениеДоступаРучноеУправление.
Функция КлючДоступаИсточникаУстарел(СсылкаНаОбъект, ПараметрыОграничения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	УстановитьТекстЗапросаЭлементовДанныхДляОбработки(Запрос, ПараметрыОграничения);
	
	Если ПараметрыОграничения.СписокСДатой Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТекущийСписок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания", "ТекущийСписок.Ссылка = &Ссылка");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ТекущийСписок.Ссылка >= &ПоследняяОбработаннаяСсылка", "ТекущийСписок.Ссылка = &Ссылка");
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Для процедур ПроверитьДоступКОбъекту, ПроверитьДоступКНаборуЗаписей и формы ОбновлениеДоступаРучноеУправление.
Процедура ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи(ОписаниеЭлементовДанных, ПараметрыОграничения,
			ИдентификаторТранзакции) Экспорт
	
	Если ТипЗнч(ОписаниеЭлементовДанных) = Тип("ТаблицаЗначений") Тогда
		ЭлементыДанных = ОписаниеЭлементовДанных;
	Иначе
		ЭлементыДанных = Новый ТаблицаЗначений;
		ЭлементыДанных.Колонки.Добавить("ТекущаяСсылка");
		ЭлементыДанных.Добавить().ТекущаяСсылка = ОписаниеЭлементовДанных;
	КонецЕсли;
	
	СвойстваСпискаКакВедущего = СвойстваСпискаКакВедущего(ПараметрыОграничения.Список,
		ИдентификаторТранзакции);
	ИмяСвойстваВидаПользователей = ?(ПараметрыОграничения.ДляВнешнихПользователей,
		"ДляВнешнихПользователей", "ДляПользователей");
	
	ПараметрыОбновления = Новый Структура(ПараметрыОграничения);
	ПараметрыОбновления.Вставить("ИдентификаторТранзакции", ИдентификаторТранзакции);
	ПараметрыОбновления.Вставить("ИдентификаторСписка",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПараметрыОграничения.Список));
	
	Если СвойстваСпискаКакВедущего = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоКлючамДоступа = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоКлючамДоступа[ИмяСвойстваВидаПользователей] = Неопределено Тогда
		
		ПараметрыОбновления.Вставить("ЗависимыеСпискиПоКлючамДоступа", Новый Массив);
	Иначе
		ПараметрыОбновления.Вставить("ЗависимыеСпискиПоКлючамДоступа",
			СвойстваСпискаКакВедущего.ПоКлючамДоступа[ИмяСвойстваВидаПользователей]);
	КонецЕсли;
	
	Если ПараметрыОграничения.ОграничениеОтключено
	 Или ПараметрыОграничения.ДоступЗапрещен
	 Или ПараметрыОграничения.ИспользуетсяОграничениеПоВладельцу Тогда
		
		Если Не ПараметрыОграничения.Свойство("ТекстЗапросаЭлементовДанныхДляОчисткиКлючей") Тогда
			ОбновитьЭлементыДанныхСпискаСУстаревшимРазрешеннымКлючом(ЭлементыДанных, ПараметрыОбновления);
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОграничения.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей) Тогда
			ОчиститьКлючиДоступаЭлементовДанныхСписка(ЭлементыДанных, ПараметрыОбновления);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		КонтекстОбновления = Новый Структура;
		КонтекстОбновления.Вставить("ПорцияЭлементовДанных", ЭлементыДанных);
		КонтекстОбновления.Вставить("ЗапросЗначенийЭлементовДанных",
			Новый Запрос(ПараметрыОграничения.ТекстЗапросаЗначенийЭлементовДанныхДляКлючейДоступа));
		КонтекстОбновления.Вставить("ЗапросЗначенийКлючей",
			Новый Запрос(ПараметрыОграничения.ТекстЗапросаЗначенийИзКлючейДоступа));
		
		ОбновитьКлючиДоступаПорцииЭлементовДанныхСписка(ПараметрыОбновления, КонтекстОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПроверитьДоступПриЗаписиИсточника, ЗапланироватьОбновлениеЗависимыхУстаревшихКлючейДоступа.
Процедура ЗапланироватьОбновлениеУстаревшихКлючейДоступаИсточника(Источник, СпискиДляОбновления = Неопределено)
	
	ИдентификаторТранзакции = Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции;
	Если СпискиДляОбновления = Неопределено Тогда
		СпискиДляОбновления = Новый Соответствие;
		Свойства = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Истина, Ложь);
		СпискиДляОбновления.Вставить(Источник.Метаданные().ПолноеИмя(), Свойства);
	КонецЕсли;
	
	ЗапланироватьОбновлениеУстаревшихКлючейДоступа(СпискиДляОбновления, ИдентификаторТранзакции);
	
КонецПроцедуры

// Для регистра сведений ГруппыЗначенийДоступа.
Процедура ЗапланироватьОбновлениеЗависимыхСписковПоЗначениямСГруппами(ТипыЗначенийСИзменениями) Экспорт
	
	Если Не ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТранзакции = Новый УникальныйИдентификатор;
	
	СпискиДляОбновления = Новый Соответствие;
	Для Каждого ОписаниеТипаЗначенияДоступа Из ТипыЗначенийСИзменениями Цикл
		ПолноеИмяВедущего = Метаданные.НайтиПоТипу(ОписаниеТипаЗначенияДоступа.Ключ).ПолноеИмя();
		СвойстваСпискаКакВедущего = СвойстваСпискаКакВедущего(ПолноеИмяВедущего, ИдентификаторТранзакции);
		Если СвойстваСпискаКакВедущего = Неопределено
		 Или СвойстваСпискаКакВедущего.ПоЗначениямСГруппами = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСпискиДляОбновленияДляВидаПользователей(СпискиДляОбновления,
			СвойстваСпискаКакВедущего.ПоЗначениямСГруппами, "ДляПользователей");
		
		ДобавитьСпискиДляОбновленияДляВидаПользователей(СпискиДляОбновления,
			СвойстваСпискаКакВедущего.ПоЗначениямСГруппами, "ДляВнешнихПользователей");
	КонецЦикла;
	
	ЗапланироватьОбновлениеУстаревшихКлючейДоступа(СпискиДляОбновления, ИдентификаторТранзакции);
	
КонецПроцедуры

// Для процедуры ЗапланироватьОбновлениеЗависимыхСписковПоЗначениямСГруппами.
Процедура ДобавитьСпискиДляОбновленияДляВидаПользователей(СпискиДляОбновления, ПоЗначениямСГруппами, ИмяВидаПользователей)
	
	ПолныеИмена = ПоЗначениямСГруппами[ИмяВидаПользователей];
	Если ПолныеИмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолноеИмя Из ПолныеИмена Цикл
		СписокДляОбновления = СпискиДляОбновления.Получить(ПолноеИмя);
		Если СписокДляОбновления = Неопределено Тогда
			СписокДляОбновления = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
			СпискиДляОбновления.Вставить(ПолноеИмя, СписокДляОбновления);
		КонецЕсли;
		СписокДляОбновления[ИмяВидаПользователей] = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Для процедур ЗапланироватьОбновлениеУстаревшихКлючейДоступаИсточника, ЗаписатьКлючиДоступаОбъектов,
// ЗапланироватьОбновлениеЗависимыхСписковПоЗначениямСГруппами.
//
Процедура ЗапланироватьОбновлениеУстаревшихКлючейДоступа(СпискиДляОбновления, ИдентификаторТранзакции)
	
	Если СпискиДляОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОбновлениеКлючейДоступаКДанным.СоздатьНаборЗаписей();
	КлючУникальности = Новый УникальныйИдентификатор;
	ТекущаяДата = ТекущаяДатаСеанса();
	МаксимальнаяДата = МаксимальнаяДата();
	
	Для Каждого ОписаниеСписка Из СпискиДляОбновления Цикл
		ПолноеИмя = ОписаниеСписка.Ключ;
		ПараметрыОграничения = ПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции);
		Если ПараметрыОграничения.ОграничениеОтключено
		 Или ПараметрыОграничения.ИспользуетсяОграничениеПоВладельцу Тогда
			Продолжить;
		КонецЕсли;
		Список = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
		Если ОписаниеСписка.Значение.ДляПользователей Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальности;
			НоваяЗапись.Список = Список;
			НоваяЗапись.ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДата;
		КонецЕсли;
		Если ОписаниеСписка.Значение.ДляВнешнихПользователей Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальности;
			НоваяЗапись.Список = Список;
			НоваяЗапись.ДляВнешнихПользователей = Истина;
			НоваяЗапись.ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДата;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Записать(Ложь);
	
	УстановитьОбновлениеДоступа(Истина);
	
КонецПроцедуры

// Для процедуры ПроверитьДоступПриЗаписиИсточника.
Процедура ЗапланироватьОбновлениеЗависимыхУстаревшихКлючейДоступа(Источник, ЭтоНаборЗаписей)
	
	ПолноеИмя = Источник.Метаданные().ПолноеИмя();
	СвойстваСпискаКакВедущего = СвойстваСпискаКакВедущего(ПолноеИмя,
		Источник.ДополнительныеСвойства.УправлениеДоступомИдентификаторТранзакции);
	
	Если СвойстваСпискаКакВедущего = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоЗначениямПолей = Неопределено
	 Или Не Источник.ДополнительныеСвойства.Свойство("УправлениеДоступомЗначенияПолейДляПроверкиИзмененияПриЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	СпискиДляОбновления = Новый Соответствие;
	
	РезультатыЗапроса = Источник.ДополнительныеСвойства.УправлениеДоступомЗначенияПолейДляПроверкиИзмененияПриЗаписи;
	ПоЗначениямПолей = СвойстваСпискаКакВедущего.ПоЗначениямПолей;
	
	Если ЭтоНаборЗаписей Тогда
		Если ЗначениеЗаполнено(ПоЗначениямПолей.ПоляРегистра.Поля)
		   И ТаблицаИзменена(РезультатыЗапроса[0], Источник, ПоЗначениямПолей.ПоляРегистра) Тогда
			
			ДобавитьСпискиДляОбновления(СпискиДляОбновления, ПоЗначениямПолей.ПоляРегистра.ЗависимыеСписки);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПоЗначениямПолей.ПоляШапки) Тогда
			СтарыеЗначения = РезультатыЗапроса[0].Выгрузить()[0];
			Для Каждого ОписаниеПоля Из ПоЗначениямПолей.ПоляШапки Цикл
				Если Источник[ОписаниеПоля.Ключ] <> СтарыеЗначения[ОписаниеПоля.Ключ] Тогда
					ДобавитьСпискиДляОбновления(СпискиДляОбновления, ОписаниеПоля.Значение);
				КонецЕсли;
			КонецЦикла;
			Индекс = 1;
		Иначе
			Индекс = 0;
		КонецЕсли;
		Для Каждого ОписаниеТабличнойЧасти Из ПоЗначениямПолей.ТабличныеЧасти Цикл
			Если ТаблицаИзменена(РезультатыЗапроса[Индекс], Источник[ОписаниеТабличнойЧасти.Ключ],
					ОписаниеТабличнойЧасти.Значение) Тогда
				
				ДобавитьСпискиДляОбновления(СпискиДляОбновления,
					ОписаниеТабличнойЧасти.Значение.ЗависимыеСписки);
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
	ЗапланироватьОбновлениеУстаревшихКлючейДоступаИсточника(Источник, СпискиДляОбновления);
	
КонецПроцедуры

// Для процедуры ЗапланироватьОбновлениеЗависимыхУстаревшихКлючейДоступа.
Функция ТаблицаИзменена(РезультатЗапроса, Источник, ОписаниеПолей)
	
	МаксимумКомбинаций = МаксимальноеКоличествоКомбинацийЗначенийВедущихПолейПриВычисленииСоставаИзмененных();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() >= МаксимумКомбинаций Тогда
		Возврат Истина;
	КонецЕсли;
	
	Поля = СтрСоединить(ОписаниеПолей.Поля, ", ");
	
	НовыеКомбинации = Источник.Выгрузить(, Поля);
	НовыеКомбинации.Свернуть(Поля);
	
	Если НовыеКомбинации.Количество() >= МаксимумКомбинаций Тогда
		Возврат Истина;
	КонецЕсли;
	
	НовыеКомбинации.Колонки.Добавить("ВидИзменения", Новый ОписаниеТипов("Число"));
	НовыеКомбинации.ЗаполнитьЗначения(1, "ВидИзменения");
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НовыеКомбинации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ВидИзменения = -1;
	КонецЦикла;
	НовыеКомбинации.Свернуть(Поля, "ВидИзменения");
	
	Отбор = Новый Структура("ВидИзменения", 0);
	Возврат НовыеКомбинации.Количество() <> НовыеКомбинации.НайтиСтроки(Отбор).Количество();
	
КонецФункции

// Для процедуры ДобавитьСоставОбновленияКлючейДоступаКСписку.
Процедура ДобавитьСпискиДляОбновления(СпискиДляОбновления, ЗависимыеСписки)
	
	Для Каждого ОписаниеЗависимогоСписка Из ЗависимыеСписки Цикл
		Свойства = СпискиДляОбновления.Получить(ОписаниеЗависимогоСписка.Ключ);
		Если Свойства = Неопределено Тогда
			Свойства = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
			СпискиДляОбновления.Вставить(ОписаниеЗависимогоСписка.Ключ, Свойства);
		КонецЕсли;
		Если ОписаниеЗависимогоСписка.Значение.ДляПользователей Тогда
			Свойства.ДляПользователей = Истина;
		КонецЕсли;
		Если ОписаниеЗависимогоСписка.Значение.ДляВнешнихПользователей Тогда
			Свойства.ДляВнешнихПользователей = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДоступа

// Добавляет обновление доступа для указанных списков или всех списков.
// 
// Параметры:
//  Списки                  - Неопределено - запланировать полное обновление доступа.
//                          - Строка - полное имя объекта метаданных.
//                          - СправочникСсылка.ИдентификаторыОбъектовМетаданных - идентификатор.
//                          - Массив - значения типов указанные выше, кроме Неопределено.
//
//  КлючиДоступаКДанным     - Булево - запланировать обновление ключей доступа к данным.
//  РазрешенныеКлючиДоступа - Булево - запланировать обновление ключей доступа
//                                     пользователей и групп доступа.
//
Процедура ЗапланироватьОбновлениеДоступа(Списки, КлючиДоступаКДанным = Истина,
			РазрешенныеКлючиДоступа = Истина, ВерсииОграниченийСписков = Неопределено) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не КлючиДоступаКДанным И Не РазрешенныеКлючиДоступа Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыРегистров   = Новый Массив;
	ИдентификаторыРазрешенных = Новый Массив;
	
	Если Списки = Неопределено Тогда
		Если ВерсииОграниченийСписков = Неопределено Тогда
			ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(Неопределено);
			ВерсииОграниченийСписков = Новый Соответствие(ДействующиеПараметры.ВерсииОграниченийСписков);
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(КлючиДоступаКДанным.Объект) КАК ТипСсылки
		|ИЗ
		|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКДанным
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиДоступаКДанным.Регистр КАК Регистр
		|ИЗ
		|	РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКДанным
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КлючиДоступа.Список КАК Список
		|ИЗ
		|	Справочник.КлючиДоступа КАК КлючиДоступа
		|ГДЕ
		|	(ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.КлючиДоступаПользователей КАК РазрешенныеКлючиДоступа
		|				ГДЕ
		|					РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступа.Ссылка)
		|			ИЛИ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.КлючиДоступаВнешнихПользователей КАК РазрешенныеКлючиДоступа
		|				ГДЕ
		|					РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступа.Ссылка)
		|			ИЛИ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
		|				ГДЕ
		|					РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступа.Ссылка))";
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Выборка = РезультатыЗапроса[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.ТипСсылки) <> Тип("Тип") Тогда
				Продолжить;
			КонецЕсли;
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Выборка.ТипСсылки);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВерсииОграниченийСписков.Вставить(ОбъектМетаданных.ПолноеИмя(), Истина);
		КонецЦикла;
		
		Списки = Новый Массив;
		Для Каждого КлючИЗначение Из ВерсииОграниченийСписков Цикл
			Списки.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		ИдентификаторыРегистров   = РезультатыЗапроса[1].Выгрузить().ВыгрузитьКолонку("Регистр");
		ИдентификаторыРазрешенных = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Список");
		// При планировании полного обновления добавляются:
		// а) списки с ограничением,
		// б) списки, которые пишут ключи доступа для ограничений по полю-владельцу,
		// в) списки без ограничения, для которых есть записи в регистрах ключей доступа к данным,
		// в) списки, для которых рассчитываются разрешенные ключи доступа,
		// г) списки без расчета разрешенных ключей доступа, для которых есть записи в регистрах
		//    разрешенных ключей доступа.
		
	ИначеЕсли ТипЗнч(Списки) <> Тип("Массив") Тогда
		Списки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Списки);
	КонецЕсли;
	
	Если Списки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Списки[0]) = Тип("Строка") Тогда
		Идентификаторы = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(Списки);
		
		Если Не ЗначениеЗаполнено(ИдентификаторыРегистров)
		   И Не ЗначениеЗаполнено(ИдентификаторыРазрешенных) Тогда
			
			ИдентификаторыСписков = Идентификаторы;
		Иначе
			ИдентификаторыСписков = Новый Соответствие;
			Для Каждого ОписаниеИдентификатора Из Идентификаторы Цикл
				ИдентификаторыСписков.Вставить(ОписаниеИдентификатора.Значение, ОписаниеИдентификатора.Значение);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ИдентификаторыСписков = Новый Соответствие;
		Для Каждого Идентификатор Из Списки Цикл
			ИдентификаторыСписков.Вставить(Идентификатор, Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыРегистров)
	 Или ЗначениеЗаполнено(ИдентификаторыРазрешенных) Тогда
		
		Для Каждого ИдентификаторРегистра Из ИдентификаторыРегистров Цикл
			ИдентификаторыСписков.Вставить(ИдентификаторРегистра, ИдентификаторРегистра);
		КонецЦикла;
		Для Каждого ИдентификаторРазрешенных Из ИдентификаторыРазрешенных Цикл
			ИдентификаторыСписков.Вставить(ИдентификаторРазрешенных, ИдентификаторРазрешенных);
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	КлючУникальностиЗаписей = Новый УникальныйИдентификатор;
	МаксимальнаяДата = МаксимальнаяДата();
	
	ОбновлениеКлючейДоступаКДанным       = РегистрыСведений.ОбновлениеКлючейДоступаКДанным.СоздатьНаборЗаписей();
	ОбновлениеКлючейДоступаПользователей = РегистрыСведений.ОбновлениеКлючейДоступаПользователей.СоздатьНаборЗаписей();
	
	Для Каждого ОписаниеИдентификатора Из ИдентификаторыСписков Цикл
		ИдентификаторСписка = ОписаниеИдентификатора.Значение;
		
		Если КлючиДоступаКДанным Тогда
			// Для пользователей.
			НоваяЗапись = ОбновлениеКлючейДоступаКДанным.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальностиЗаписей;
			НоваяЗапись.Список = ИдентификаторСписка;
			НоваяЗапись.ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса;
			// Для внешних пользователей.
			НоваяЗапись = ОбновлениеКлючейДоступаКДанным.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальностиЗаписей;
			НоваяЗапись.Список = ИдентификаторСписка;
			НоваяЗапись.ДляВнешнихПользователей = Истина;
			НоваяЗапись.ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса;
		КонецЕсли;
		
		Если РазрешенныеКлючиДоступа Тогда
			// Для пользователей.
			НоваяЗапись = ОбновлениеКлючейДоступаПользователей.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальностиЗаписей;
			НоваяЗапись.Список = ИдентификаторСписка;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса;
			// Для внешних пользователей.
			НоваяЗапись = ОбновлениеКлючейДоступаПользователей.Добавить();
			НоваяЗапись.КлючУникальности = КлючУникальностиЗаписей;
			НоваяЗапись.Список = ИдентификаторСписка;
			НоваяЗапись.ДляВнешнихПользователей = Истина;
			НоваяЗапись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновлениеКлючейДоступаКДанным.Количество() > 0 Тогда
		ОбновлениеКлючейДоступаКДанным.Записать(Ложь);
	КонецЕсли;
	
	Если ОбновлениеКлючейДоступаПользователей.Количество() > 0 Тогда
		ОбновлениеКлючейДоступаПользователей.Записать(Ложь);
	КонецЕсли;
	
	Если ОбновлениеКлючейДоступаКДанным.Количество() > 0
	 Или ОбновлениеКлючейДоступаПользователей.Количество() > 0 Тогда
		
		УстановитьОбновлениеДоступа(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
КонецПроцедуры

// Устанавливает использование регламентного задания ОбновлениеДоступа.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьОбновлениеДоступа(Использование) Экспорт
	
	ВключитьЗадание = ?(ОграничиватьДоступНаУровнеЗаписейУниверсально(), Использование, Ложь);
	
	РегламентныеЗаданияСервер.УстановитьИспользованиеПредопределенногоРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей, ВключитьЗадание);
	
	Если Не ВключитьЗадание Тогда
		Возврат;
	КонецЕсли;
	
	// Немедленный запуск регламентного задания.
	ТекущееРасписание = РегламентныеЗаданияСервер.РасписаниеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей);
	
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей, ТекущееРасписание);
	
КонецПроцедуры

// Обработчик регламентного задания ОбновлениеДоступаНаУровнеЗаписей.
Процедура ОбновлениеДоступаНаУровнеЗаписей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей);
	
	ТекущийСеанс = ПолучитьТекущийСеансИнформационнойБазы();
	
	Если ТекущийСеанс.ИмяПриложения <> "BackgroundJob" Тогда
		ВызватьИсключение НСтр("ru = 'Обновление доступа должно выполняться только в фоновом задании.'");
	КонецЕсли;
	
	Если Не ОграничиватьДоступНаУровнеЗаписейУниверсально() Тогда
		УстановитьОбновлениеДоступа(Ложь);
		Возврат;
	КонецЕсли;
	
	ТекущееФоновоеЗадание = ТекущийСеанс.ПолучитьФоновоеЗадание();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	БлокировкаДанных.Добавить("Константа.ПоследнееОбновлениеДоступа");
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		ЗначениеКонстанты = Константы.ПоследнееОбновлениеДоступа.Получить();
		ПоследнееОбновлениеДоступа = ПоследнееОбновлениеДоступа(ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания) Тогда
			ПоследнееФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
				ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания);
		Иначе
			ПоследнееФоновоеЗадание = Неопределено;
		КонецЕсли;
		
		Если ПоследнееФоновоеЗадание = Неопределено
		 Или ПоследнееФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			
			ПоследнееОбновлениеДоступа.ДатаЗапускаНаСервере = ТекущаяДатаНаСервере();
			ПоследнееОбновлениеДоступа.НомерСеанса          = ТекущийСеанс.НомерСеанса;
			ПоследнееОбновлениеДоступа.НачалоСеанса         = ТекущийСеанс.НачалоСеанса;
			ПоследнееОбновлениеДоступа.ИмяКомпьютера        = ТекущийСеанс.ИмяКомпьютера;
			ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания =
				ТекущееФоновоеЗадание.УникальныйИдентификатор;
			
			Константы.ПоследнееОбновлениеДоступа.Установить(
				Новый ХранилищеЗначения(ПоследнееОбновлениеДоступа));
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания
			<> ТекущееФоновоеЗадание.УникальныйИдентификатор Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнееОбновлениеДоступа.ТекстОшибкиЗавершения = "";
	ПоследнееОбновлениеДоступа.ИдентификаторФоновогоЗадания =
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Попытка
		ОбновитьКлючиДоступаКДанным();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоследнееОбновлениеДоступа.ТекстОшибкиЗавершения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗарегистрироватьОшибкуОбновленияКлючейДоступаКДанным(ИнформацияОбОшибке);
	КонецПопытки;
	
	ПоследнееОбновлениеДоступа.ДатаЗавершенияНаСервере = ТекущаяДатаНаСервере();
	Константы.ПоследнееОбновлениеДоступа.Установить(Новый ХранилищеЗначения(ПоследнееОбновлениеДоступа));
	
КонецПроцедуры

// Обновляет ключи доступа к данным на основе записей в
// в регистре сведений ОбновлениеКлючейДоступаКДанным.
// Обновляется порция данных для каждой таблицы, начиная с самых свежих данных.
// Процедура должна вызываться повторно, пока обработка не будет завершена.
//
// Процедура предназначена для работы в единственном экземпляре, то есть без
// параллельной работы (вызов из процедуры регламентного задания ОбновлениеДоступа).
//
// Параметры:
//  ОбработкаЗавершена - Булево - (возвращаемое значение) - устанавливается
//                       в значение Ложь, если обновление не завершено.
//
Процедура ОбновитьКлючиДоступаКДанным()
	
	ВыполнятьВТекущемСеансе = Истина;
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		КоличествоПотоков = Константы.КоличествоПотоковОбновленияДоступа.Получить();
		Если КоличествоПотоков < 1 Тогда
			КоличествоПотоков = 1;
		КонецЕсли;
		Если КоличествоПотоков > 1 Тогда
			ВыполнятьВТекущемСеансе = Ложь;
			ИсполняющиеФоновыеЗадания = Новый Массив;
			Для Счетчик = 2 По КоличествоПотоков Цикл
				ОписаниеЗадания = Новый Структура("Задание, Список, ДляВнешнихПользователей, АдресРезультата");
				ИсполняющиеФоновыеЗадания.Добавить(ОписаниеЗадания);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Списки.Список КАК Список,
	|	Списки.ДляВнешнихПользователей КАК ДляВнешнихПользователей,
	|	МАКСИМУМ(Списки.ДатаПоследнегоОбновленногоЭлемента) КАК ПоследняяДата,
	|	МИНИМУМ(Списки.ДатаИзмененияЗаписиРегистра) КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК Списки
	|
	|СГРУППИРОВАТЬ ПО
	|	Списки.Список,
	|	Списки.ДляВнешнихПользователей
	|
	|УПОРЯДОЧИТЬ ПО
	|	МАКСИМУМ(Списки.ДатаПоследнегоОбновленногоЭлемента) УБЫВ";
	
	ОкончаниеВыполнения = ТекущаяУниверсальнаяДата() + 2 * 60;
	ТекущийПроход = 0;
	
	Пока Истина Цикл
		ТекущийПроход = ТекущийПроход + 1;
		
		Если ТекущаяУниверсальнаяДата() > ОкончаниеВыполнения Или ТекущийПроход > 100 Тогда
			Прервать;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ОшибкаОжиданияБлокировкиДанных = Ложь;
			Попытка
				ОтключитьРегламентноеЗаданиеЕслиНетНовыхЗаданий(, ОшибкаОжиданияБлокировкиДанных);
			Исключение
				Если Не ОшибкаОжиданияБлокировкиДанных Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
			Возврат;
		КонецЕсли;
		
		Выгрузка = РезультатЗапроса.Выгрузить();
		Выгрузка.Колонки.Добавить("УровеньЗависимости", Новый ОписаниеТипов("Число"));
		
		ПоследняяДата = Выгрузка[0].ПоследняяДата;
		МаксимальнаяДата = МаксимальнаяДата();
		
		ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(Неопределено);
		Для Каждого Строка Из Выгрузка Цикл
			Если Не ЗначениеЗаполнено(Строка.ПоследняяДата) Тогда
				Строка.ПоследняяДата = МаксимальнаяДата - 1;
			КонецЕсли;
			УровниЗависимости = ДействующиеПараметры.УровниЗависимости.Получить(Строка.Список);
			Если УровниЗависимости = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Строка.УровеньЗависимости = ?(Строка.ДляВнешнихПользователей,
				УровниЗависимости.ДляВнешнихПользователей, УровниЗависимости.ДляПользователей);
		КонецЦикла;
		Выгрузка.Сортировать("УровеньЗависимости Возр, ПоследняяДата Убыв, ДатаИзменения Возр");
		
		ПараметрыОбновления = Новый Структура("ДатаНачала, ДатаОкончания, Список, ДляВнешнихПользователей");
		
		Если ПоследняяДата = МаксимальнаяДата Тогда
			// Начало обновления.
			ПараметрыОбновления.ДатаНачала = НачалоДня(ТекущаяДатаСеанса()) - 7 * (60 * 60 * 24); // 7 Дней.
		Иначе
			// Продолжение обновления.
			ЭтотГод = Год(ТекущаяДатаСеанса()) - Год(ПоследняяДата) = 0;
			СмещениеМесяца = Месяц(ТекущаяДатаСеанса()) - Месяц(ПоследняяДата);
			
			Если ЭтотГод И СмещениеМесяца = 0 Тогда
				ДатаНачала = НачалоМесяца(ПоследняяДата);
				
			ИначеЕсли ЭтотГод И СмещениеМесяца < 3 Тогда 
				ДатаНачала = НачалоКвартала(ПоследняяДата);
			Иначе
				ДатаНачала = НачалоГода(ПоследняяДата);
			КонецЕсли;
			
			ПараметрыОбновления.ДатаНачала = ДатаНачала;
		КонецЕсли;
		ПараметрыОбновления.ДатаОкончания = ПоследняяДата;
		
		Отбор = Новый Структура("ПоследняяДата", МаксимальнаяДата);
		ОбновлятьВсе = Выгрузка.НайтиСтроки(Отбор).Количество() = 0;
		
		ОбработкаЗавершена = Истина;
		
		Для Каждого Строка Из Выгрузка Цикл
			Если ТекущаяУниверсальнаяДата() > ОкончаниеВыполнения Тогда
				Прервать;
			КонецЕсли;
			Если Не ОбновлятьВсе И Строка.ПоследняяДата <> МаксимальнаяДата Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыОбновления.Список = Строка.Список;
			ПараметрыОбновления.ДляВнешнихПользователей = Строка.ДляВнешнихПользователей;
			Если ВыполнятьВТекущемСеансе Тогда
				ОбновитьКлючиДоступаКДаннымСписка(ПараметрыОбновления, ОбработкаЗавершена);
				Продолжить;
			КонецЕсли;
			Пока Не ЗапущеноОбновлениеКлючейДоступаКДаннымСпискаВФоне(ИсполняющиеФоновыеЗадания,
						ПараметрыОбновления, ОбработкаЗавершена) Цикл
				Попытка
					ИсполняющиеФоновыеЗадания[0].Задание.ОжидатьЗавершения(1);
				Исключение
					// Ожидание завершено до завершения задания.
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ВыполнятьВТекущемСеансе Тогда
			ЗавершитьФоновыеЗадания(ИсполняющиеФоновыеЗадания, ОбработкаЗавершена);
		КонецЕсли;
		
		Если ОбработкаЗавершена Тогда
			ОшибкаОжиданияБлокировкиДанных = Ложь;
			Попытка
				ОтключитьРегламентноеЗаданиеЕслиНетНовыхЗаданий(ОбработкаЗавершена, ОшибкаОжиданияБлокировкиДанных);
			Исключение
				Если Не ОшибкаОжиданияБлокировкиДанных Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		Если ОбработкаЗавершена Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаКДанным.
Процедура ОтключитьРегламентноеЗаданиеЕслиНетНовыхЗаданий(ОбработкаЗавершена, ОшибкаОжиданияБлокировкиДанных)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НедоступныеСписки", Новый Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбновлениеКлючейДоступаКДанным.Список КАК Список
	|ИЗ
	|	РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК ОбновлениеКлючейДоступаКДанным
	|ГДЕ
	|	НЕ ОбновлениеКлючейДоступаКДанным.Список В (&НедоступныеСписки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОбновлениеКлючейДоступаПользователей КАК ОбновлениеКлючейДоступаПользователей
	|ГДЕ
	|	ЛОЖЬ";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[1].Пустой()
	   И Не РезультатыЗапроса[0].Пустой() Тогда
		
		ОбъектыМетаданныхПоИдентификаторам =
			Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(
				РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Список"), Истина);
		
		Для Каждого КлючИЗначение Из ОбъектыМетаданныхПоИдентификаторам Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда
				Запрос.НедоступныеСписки.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Если РезультатыЗапроса[0].Пустой()
	   И РезультатыЗапроса[1].Пустой() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ОбновлениеКлючейДоступаКДанным");
		Блокировка.Добавить("РегистрСведений.ОбновлениеКлючейДоступаПользователей");
		НачатьТранзакцию();
		Попытка
			ОшибкаОжиданияБлокировкиДанных = Истина;
			Блокировка.Заблокировать();
			ОшибкаОжиданияБлокировкиДанных = Ложь;
			Если Запрос.Выполнить().Пустой() Тогда
				УстановитьОбновлениеДоступа(Ложь);
			Иначе
				ОбработкаЗавершена = Ложь;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбработкаЗавершена = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	Иначе
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаКДанным.
Функция ЗапущеноОбновлениеКлючейДоступаКДаннымСпискаВФоне(ИсполняющиеФоновыеЗадания,
			ПараметрыОбновления, ОбработкаЗавершена)
	
	Для Каждого ОписаниеЗадания Из ИсполняющиеФоновыеЗадания Цикл
		ОбработатьЗавершенноеФоновоеЗадание(ОписаниеЗадания, ОбработкаЗавершена);
		Если ОписаниеЗадания.Задание <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОписаниеЗадания, ПараметрыОбновления);
		ОписаниеЗадания.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ПараметрыОбновления);
		ПараметрыЗадания.Добавить(ОписаниеЗадания.АдресРезультата);
		ОписаниеЗадания.Задание = ФоновыеЗадания.Выполнить(
			"УправлениеДоступомСлужебный.ОбновитьКлючиДоступаКДаннымСпискаВФоне",
			ПараметрыЗадания);
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ОбновитьКлючиДоступаКДанным.
Процедура ЗавершитьФоновыеЗадания(ИсполняющиеФоновыеЗадания, ОбработкаЗавершена)
	
	Для Каждого ОписаниеЗадания Из ИсполняющиеФоновыеЗадания Цикл
		Если ТипЗнч(ОписаниеЗадания.Задание) <> Тип("ФоновоеЗадание") Тогда
			Продолжить;
		КонецЕсли;
		Если ОписаниеЗадания.Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Попытка
				ОписаниеЗадания.Задание.ОжидатьЗавершения();
			Исключение
				ЗарегистрироватьОшибкуОбновленияКлючейДоступаКДанным(ИнформацияОбОшибке(), ОписаниеЗадания);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		ОбработатьЗавершенноеФоновоеЗадание(ОписаниеЗадания, ОбработкаЗавершена);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ЗапущеноОбновлениеКлючейДоступаКДаннымСпискаВФоне и процедуры ЗавершитьФоновыеЗадания.
Процедура ОбработатьЗавершенноеФоновоеЗадание(ОписаниеЗадания, ОбработкаЗавершена)
	
	Задание = ОписаниеЗадания.Задание;
	
	Если ТипЗнч(Задание) <> Тип("ФоновоеЗадание")
	 Или Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗадания.Задание = Неопределено;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат = ПолучитьИзВременногоХранилища(ОписаниеЗадания.АдресРезультата);
		Если ТипЗнч(Результат) <> Тип("Структура") Тогда
			ОбработкаЗавершена = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершена = Ложь;
	
	Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ЗарегистрироватьОшибкуОбновленияКлючейДоступаКДанным(Задание.ИнформацияОбОшибке, ОписаниеЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Для функции ЗапущеноОбновлениеКлючейДоступаКДаннымСпискаВФоне.
Процедура ОбновитьКлючиДоступаКДаннымСпискаВФоне(ПараметрыОбновления, АдресРезультата) Экспорт
	
	ОбработкаЗавершена = Истина;
	Попытка
		ОбновитьКлючиДоступаКДаннымСписка(ПараметрыОбновления, ОбработкаЗавершена);
	Исключение
		ЗарегистрироватьОшибкуОбновленияКлючейДоступаКДанным(ИнформацияОбОшибке(), ПараметрыОбновления);
		ОбработкаЗавершена = Ложь;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("ОбработкаЗавершена", ОбработкаЗавершена);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Для процедур ОбновлениеДоступа, ЗавершитьФоновыеЗадания, ОбработатьЗавершенноеФоновоеЗадание,
// ОбновитьКлючиДоступаКДаннымСпискаВФоне.
//
Процедура ЗарегистрироватьОшибкуОбновленияКлючейДоступаКДанным(ИнформацияОбОшибке, ОписаниеЗадания = Неопределено)
	
	Если ОписаниеЗадания <> Неопределено Тогда
		Если ОписаниеЗадания.ДляВнешнихПользователей Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить порцию ключей доступа внешних пользователей к списку ""%1""
				           |по причине:
				           |%2'"),
				Строка(ОписаниеЗадания.Список),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обновить порцию ключей доступа к списку ""%1""
				           |по причине:
				           |%2'"),
				Строка(ОписаниеЗадания.Список),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обновить ключи доступа к данным по причине:
			           |%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Управление доступом.Обновление ключей доступа к данным'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	
КонецПроцедуры

// Для процедур ОбновитьКлючиДоступаКДанным, ОбновитьКлючиДоступаКДаннымСпискаВФоне.
Процедура ОбновитьКлючиДоступаКДаннымСписка(Параметры, ОбработкаЗавершена)
	
	ОбъектМетаданных = Справочники.ИдентификаторыОбъектовМетаданных.ОбъектМетаданныхПоИдентификатору(
		Параметры.Список, Истина);
	
	Если ОбъектМетаданных = Неопределено Тогда
		// Если расширение конфигурации отключено, тогда обновление невозможно,
		// но нельзя очищать регистрацию к обновлению.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Список", Параметры.Список);
	Запрос.УстановитьПараметр("ДляВнешнихПользователей", Параметры.ДляВнешнихПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КлючиУникальности.КлючУникальности КАК КлючУникальности,
	|	КлючиУникальности.ДатаПоследнегоОбновленногоЭлемента КАК ДатаПоследнегоОбновленногоЭлемента,
	|	КлючиУникальности.ПоследнийОбновленныйЭлемент КАК ПоследнийОбновленныйЭлемент
	|ИЗ
	|	РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК КлючиУникальности
	|ГДЕ
	|	КлючиУникальности.Список = &Список
	|	И КлючиУникальности.ДляВнешнихПользователей = &ДляВнешнихПользователей";
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если Выгрузка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
		// Очистка записей не существующих объектов метаданных.
		ПустойНабор = РегистрыСведений.ОбновлениеКлючейДоступаКДанным.СоздатьНаборЗаписей();
		ПустойНабор.Отбор.Список.Установить(Параметры.Список);
		ПустойНабор.Записать();
		Возврат;
	КонецЕсли;
	
	МаксимальнаяДата = МаксимальнаяДата();
	
	Если Выгрузка.Количество() = 1
	   И Не ЗначениеЗаполнено(Выгрузка[0].КлючУникальности) Тогда
		
		ДатаПоследнегоОбновленногоЭлемента = Выгрузка[0].ДатаПоследнегоОбновленногоЭлемента;
		Если ТипЗнч(ДатаПоследнегоОбновленногоЭлемента) <> Тип("Дата") Тогда
			ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
		КонецЕсли;
		ПоследнийОбновленныйЭлемент = Выгрузка[0].ПоследнийОбновленныйЭлемент.Получить();
	Иначе
		ДатаПоследнегоОбновленногоЭлемента = МаксимальнаяДата;
		ПоследнийОбновленныйЭлемент = Неопределено;
		ПланОбновленияКлючей = РегистрыСведений.ОбновлениеКлючейДоступаКДанным.СоздатьНаборЗаписей();
		ПланОбновленияКлючей.Отбор.Список.Установить(Параметры.Список);
		ПланОбновленияКлючей.Отбор.ДляВнешнихПользователей.Установить(Параметры.ДляВнешнихПользователей);
		ПланОбновленияКлючей.Отбор.КлючУникальности.Установить(
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Запись = ПланОбновленияКлючей.Добавить();
		Запись.Список = Параметры.Список;
		Запись.ДляВнешнихПользователей = Параметры.ДляВнешнихПользователей;
		Запись.ДатаПоследнегоОбновленногоЭлемента = ДатаПоследнегоОбновленногоЭлемента;
		Запись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса();
		ПланОбновленияКлючей.Записать();
		ПланОбновленияКлючей.Очистить();
		Для Каждого Строка Из Выгрузка Цикл
			Если Не ЗначениеЗаполнено(Строка.КлючУникальности) Тогда
				Продолжить;
			КонецЕсли;
			ПланОбновленияКлючей.Отбор.КлючУникальности.Установить(Строка.КлючУникальности);
			ПланОбновленияКлючей.Записать();
		КонецЦикла;
	КонецЕсли;
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	ИдентификаторТранзакции = Новый УникальныйИдентификатор;
	СвойстваСпискаКакВедущего = СвойстваСпискаКакВедущего(ПолноеИмя, ИдентификаторТранзакции);
	ПараметрыОграничения = ПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции, Параметры.ДляВнешнихПользователей);
	ПараметрыОбновления = Новый Структура(ПараметрыОграничения);
	ПараметрыОбновления.Вставить("ИдентификаторТранзакции", ИдентификаторТранзакции);
	ИмяСвойстваВидаПользователей = ?(Параметры.ДляВнешнихПользователей,
		"ДляВнешнихПользователей", "ДляПользователей");
	
	Если СвойстваСпискаКакВедущего = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоКлючамДоступа = Неопределено
	 Или СвойстваСпискаКакВедущего.ПоКлючамДоступа[ИмяСвойстваВидаПользователей] = Неопределено Тогда
		
		ПараметрыОбновления.Вставить("ЗависимыеСпискиПоКлючамДоступа", Новый Массив);
	Иначе
		ПараметрыОбновления.Вставить("ЗависимыеСпискиПоКлючамДоступа",
			СвойстваСпискаКакВедущего.ПоКлючамДоступа[ИмяСвойстваВидаПользователей]);
	КонецЕсли;
	
	ПараметрыОбновления.Вставить("ДатаНачала",    Параметры.ДатаНачала);
	ПараметрыОбновления.Вставить("ДатаОкончания", Параметры.ДатаОкончания);
	ПараметрыОбновления.Вставить("ПоследнийОбновленныйЭлемент", ПоследнийОбновленныйЭлемент);
	
	ОбновитьКлючиДоступаЭлементовДанныхСписка(ПараметрыОбновления);
	
	ПланОбновленияКлючей = РегистрыСведений.ОбновлениеКлючейДоступаКДанным.СоздатьНаборЗаписей();
	ПланОбновленияКлючей.Отбор.Список.Установить(Параметры.Список);
	ПланОбновленияКлючей.Отбор.ДляВнешнихПользователей.Установить(Параметры.ДляВнешнихПользователей);
	ПланОбновленияКлючей.Отбор.КлючУникальности.Установить(
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ПараметрыОбновления.ДатаОкончания < ДатаПоследнегоОбновленногоЭлемента Тогда
		ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбновления.Свойство("НоваяДатаПоследнегоОбновленногоЭлемента")
	 Или ПараметрыОбновления.Свойство("НовыйПоследнийОбновленныйЭлемент") Тогда
		
		Запись = ПланОбновленияКлючей.Добавить();
		Запись.Список = Параметры.Список;
		Запись.ДляВнешнихПользователей = Параметры.ДляВнешнихПользователей;
		Запись.ДатаИзмененияЗаписиРегистра = ТекущаяДатаСеанса();
	
		Если ПараметрыОбновления.Свойство("НоваяДатаПоследнегоОбновленногоЭлемента") Тогда
			Запись.ДатаПоследнегоОбновленногоЭлемента =
				ПараметрыОбновления.НоваяДатаПоследнегоОбновленногоЭлемента;
		Иначе
			Запись.ПоследнийОбновленныйЭлемент = Новый ХранилищеЗначения(
				ПараметрыОбновления.НовыйПоследнийОбновленныйЭлемент);
		КонецЕсли;
		ОбработкаЗавершена = Ложь;
	КонецЕсли;
	
	ПланОбновленияКлючей.Записать();
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаКДаннымСписка.
Процедура ОбновитьКлючиДоступаЭлементовДанныхСписка(ПараметрыОбновления)
	
	ПараметрыОбновления.Вставить("ИдентификаторСписка",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПараметрыОбновления.Список));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала",    ПараметрыОбновления.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыОбновления.ДатаОкончания);
	
	НовыйПоследнийОбновленныйЭлемент = Неопределено;
	УстановитьПараметрыПоследнегоОбновленногоЭлемента(Запрос,
		ПараметрыОбновления, НовыйПоследнийОбновленныйЭлемент);
	
	УстановитьТекстЗапросаЭлементовДанныхДляОбработки(Запрос, ПараметрыОбновления);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если Не ПараметрыОбновления.СписокСДатой Тогда
			Возврат;
		КонецЕсли;
		Запрос.Текст = ПараметрыОбновления.ТекстЗапросаДатыСледующегоЭлементаДанных;
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		ПараметрыОбновления.Вставить("НоваяДатаПоследнегоОбновленногоЭлемента",
			РезультатЗапроса.Выгрузить()[0].Дата);
		Возврат;
	КонецЕсли;
	
	ЭлементыДанных = РезультатЗапроса.Выгрузить();
	
	Если ПараметрыОбновления.ОграничениеОтключено
	 Или ПараметрыОбновления.ДоступЗапрещен
	 Или ПараметрыОбновления.ИспользуетсяОграничениеПоВладельцу Тогда
		
		Если Не ПараметрыОбновления.Свойство("ТекстЗапросаЭлементовДанныхДляОчисткиКлючей") Тогда
			ОбновитьЭлементыДанныхСпискаСУстаревшимРазрешеннымКлючом(ЭлементыДанных, ПараметрыОбновления);
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОбновления.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей) Тогда
			ОчиститьКлючиДоступаЭлементовДанныхСписка(ЭлементыДанных, ПараметрыОбновления);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ОбновитьЭлементыДанныхСпискаСУстаревшимиКлючами(ЭлементыДанных, ПараметрыОбновления);
	КонецЕсли;
	
	ПоследнийЭлементДанных = ЭлементыДанных[ЭлементыДанных.Количество() - 1];
	
	Если ПараметрыОбновления.СписокСДатой Тогда
		ПараметрыОбновления.Вставить("НоваяДатаПоследнегоОбновленногоЭлемента", ПоследнийЭлементДанных.Дата);
		
	ИначеЕсли ПараметрыОбновления.ЭтоСсылочныйТип Тогда
		ПараметрыОбновления.Вставить("НовыйПоследнийОбновленныйЭлемент", ПоследнийЭлементДанных.ТекущаяСсылка);
	Иначе
		ЗаполнитьЗначенияСвойств(НовыйПоследнийОбновленныйЭлемент, ПоследнийЭлементДанных);
		ПараметрыОбновления.Вставить("НовыйПоследнийОбновленныйЭлемент", НовыйПоследнийОбновленныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаЭлементовДанныхСписка.
Процедура УстановитьПараметрыПоследнегоОбновленногоЭлемента(Запрос, ПараметрыОбновления, НовыйПоследнийОбновленныйЭлемент = Неопределено)
	
	Если ПараметрыОбновления.ЭтоСсылочныйТип Тогда
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПараметрыОбновления.ПоследнийОбновленныйЭлемент)) Тогда
			Запрос.УстановитьПараметр("ПоследняяОбработаннаяСсылка",
				ПараметрыОбновления.ПоследнийОбновленныйЭлемент);
		Иначе
			Запрос.УстановитьПараметр("ПоследняяОбработаннаяСсылка", Неопределено);
		КонецЕсли;
	Иначе
		ЗначенияПолей = Новый Структура;
		Для Номер = 1 По ПараметрыОбновления.ОпорныеПоля.МаксимальноеКоличество Цикл
			ЗначенияПолей.Вставить("Поле" + Номер);
		КонецЦикла;
		Запрос.УстановитьПараметр("ИдентификаторРегистра", ПараметрыОбновления.ИдентификаторСписка);
		Если ТипЗнч(ПараметрыОбновления.ПоследнийОбновленныйЭлемент) = Тип("Структура") Тогда
			ЗначенияПолей = ПараметрыОбновления.ПоследнийОбновленныйЭлемент;
			Если ЗначенияПолей.Количество() <> ПараметрыОбновления.ОпорныеПоля.МаксимальноеКоличество Тогда
				ЗначенияПолей = Новый Структура;
			КонецЕсли;
		Иначе
			ЗначенияПолей = Новый Структура;
		КонецЕсли;
		НовыйПоследнийОбновленныйЭлемент = Новый Структура;
		
		КоличествоПолей = ПараметрыОбновления.ОпорныеПоля.Используемые.Количество();
		Если КоличествоПолей = 0 Или ПараметрыОбновления.ИспользуетсяОграничениеПоВладельцу Тогда
			КоличествоПолей = ПараметрыОбновления.ОпорныеПоля.МаксимальноеКоличество;
		КонецЕсли;
		
		Для Номер = 1 По КоличествоПолей Цикл
			ИмяПоля = "Поле" + Номер;
			Если ЗначенияПолей.Свойство(ИмяПоля) Тогда
				Запрос.УстановитьПараметр(ИмяПоля, ЗначенияПолей[ИмяПоля]);
			Иначе
				Запрос.УстановитьПараметр(ИмяПоля, Неопределено);
			КонецЕсли;
			НовыйПоследнийОбновленныйЭлемент.Вставить(ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаЭлементовДанныхСписка и функции КлючДоступаИсточникаУстарел.
Процедура УстановитьТекстЗапросаЭлементовДанныхДляОбработки(Запрос, ПараметрыОграничения);
	
	Если ПараметрыОграничения.ОграничениеОтключено
	 Или ПараметрыОграничения.ДоступЗапрещен
	 Или ПараметрыОграничения.ИспользуетсяОграничениеПоВладельцу Тогда
		
		Если Не ПараметрыОграничения.Свойство("ТекстЗапросаЭлементовДанныхДляОчисткиКлючей") Тогда
			Запрос.УстановитьПараметр("РазрешенныйКлючДоступа", УправлениеДоступомСлужебныйПовтИсп.РазрешенныйКлючДоступа());
			Запрос.Текст = ПараметрыОграничения.ТекстЗапросаЭлементовДанныхСУстаревшимРазрешеннымКлючом;
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыОграничения.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей) Тогда
			Запрос.Текст = ПараметрыОграничения.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Запрос.Текст = ПараметрыОграничения.ТекстЗапросаЭлементовДанныхСУстаревшимиКлючами;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ОбновитьКлючиДоступаЭлементовДанныхСписка, ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи.
Процедура ОбновитьЭлементыДанныхСпискаСУстаревшимРазрешеннымКлючом(ЭлементыДанных, ПараметрыОбновления)
	
	Если Не ПараметрыОбновления.ЭтоСсылочныйТип Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("СсылкиНаОбъекты", ЭлементыДанных.ВыгрузитьКолонку("ТекущаяСсылка"));
	Контекст.Вставить("ОписаниеКлючейДоступаОбъектов", ЭлементыДанных);
	
	ЭлементыДанных.Колонки.Добавить("СвойстваКлюча", Новый ОписаниеТипов("Структура"));
	ЭлементыДанных.ЗаполнитьЗначения(Новый Структура("КлючДоступа",
		УправлениеДоступомСлужебныйПовтИсп.РазрешенныйКлючДоступа()), "СвойстваКлюча");
	
	ЗаписатьКлючиДоступаОбъектов(ПараметрыОбновления, Контекст);
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаЭлементовДанныхСписка, ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи.
Процедура ОчиститьКлючиДоступаЭлементовДанныхСписка(ЭлементыДанных, ПараметрыОбновления)
	
	Если ПараметрыОбновления.ЭтоСсылочныйТип Тогда
		НаборИзОднойЗаписи = РегистрыСведений.КлючиДоступаКОбъектам.СоздатьНаборЗаписей();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КлючиДоступаКОбъектам");
		Для Каждого Строка Из ЭлементыДанных Цикл
			ЭлементБлокировки.УстановитьЗначение("Объект", Строка.ТекущаяСсылка);
			НаборИзОднойЗаписи.Отбор.Объект.Установить(Строка.ТекущаяСсылка);
			БлокировкаУстановлена = Ложь;
			НачатьТранзакцию();
			Попытка
				Блокировка.Заблокировать();
				БлокировкаУстановлена = Истина;
				Если ПараметрыОбновления.БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей Тогда
					НаборИзОднойЗаписи.Очистить();
					НаборИзОднойЗаписи.Записать();
				Иначе
					НаборИзОднойЗаписи.Прочитать();
					Если НаборИзОднойЗаписи.Количество() > 0 Тогда
						Если ПараметрыОбновления.ДляВнешнихПользователей Тогда
							НаборИзОднойЗаписи[0].КлючДоступаВнешнихПользователей = Неопределено;
						Иначе
							НаборИзОднойЗаписи[0].КлючДоступаПользователей = Неопределено;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(НаборИзОднойЗаписи[0].КлючДоступаВнешнихПользователей)
						   И Не ЗначениеЗаполнено(НаборИзОднойЗаписи[0].КлючДоступаПользователей) Тогда
							НаборИзОднойЗаписи.Очистить();
						КонецЕсли;
						НаборИзОднойЗаписи.Записать();
					КонецЕсли;
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Если БлокировкаУстановлена Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	Если ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
		ИмяРегистра = ПараметрыОбновления.ИмяОтдельногоРегистраКлючей;
	Иначе
		ИмяРегистра = "КлючиДоступаКРегистрам";
	КонецЕсли;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистра);
	Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
		ЭлементБлокировки.УстановитьЗначение("Регистр", ПараметрыОбновления.ИдентификаторСписка);
	КонецЕсли;
	НаборИзОднойЗаписи = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	Для Каждого Строка Из ЭлементыДанных Цикл
		ЭлементБлокировки.УстановитьЗначение("ДляВнешнихПользователей", Строка.ДляВнешнихПользователей);
		Для Каждого Колонка Из ЭлементыДанных.Колонки Цикл
			ИмяИзмерения = Колонка.Имя;
			ЭлементБлокировки.УстановитьЗначение(ИмяИзмерения, Строка[ИмяИзмерения]);
			НаборИзОднойЗаписи.Отбор[ИмяИзмерения].Установить(Строка[ИмяИзмерения]);
		КонецЦикла;
		БлокировкаУстановлена = Ложь;
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			БлокировкаУстановлена = Истина;
			НаборИзОднойЗаписи.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Если БлокировкаУстановлена Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаЭлементовДанныхСписка.
Процедура ОбновитьЭлементыДанныхСпискаСУстаревшимиКлючами(ЭлементыДанных, ПараметрыОбновления)
	
	СтрокаЭлементыДанных = СтрокаДанныхДляХеширования(ЭлементыДанных);
	
	Если ПараметрыОбновления.Свойство("СтрокаПредыдущихЭлементовДанных")
	   И ПараметрыОбновления.СтрокаПредыдущихЭлементовДанных = СтрокаЭлементыДанных Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Зацикливание обновления ключей доступа списка %1'"), ПараметрыОбновления.Список);
	КонецЕсли;
	ПараметрыОбновления.Вставить("СтрокаПредыдущихЭлементовДанных", СтрокаЭлементыДанных);
	
	ЗапросЗначенийЭлементовДанных = Новый Запрос;
	ЗапросЗначенийЭлементовДанных.Текст = ПараметрыОбновления.ТекстЗапросаЗначенийЭлементовДанныхДляКлючейДоступа;
	
	ЗапросЗначенийКлючей = Новый Запрос;
	ЗапросЗначенийКлючей.Текст = ПараметрыОбновления.ТекстЗапросаЗначенийИзКлючейДоступа;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ЗапросЗначенийЭлементовДанных", ЗапросЗначенийЭлементовДанных);
	Контекст.Вставить("ЗапросЗначенийКлючей", ЗапросЗначенийКлючей);
	
	РазмерПорции = 25; // Загрузка 100 элементов данных по 25 за раз.
	
	Индекс = 0;
	Пока Индекс < ЭлементыДанных.Количество() Цикл
		
		ПорцияЭлементовДанных = ЭлементыДанных.Скопировать(Новый Массив);
		Если Не ПараметрыОбновления.ЭтоСсылочныйТип Тогда
			ПорцияЭлементовДанных.Колонки.Добавить("ТекущаяСсылка", Новый ОписаниеТипов("Число"));
			ПорцияУдаляемыхЭлементовДанных = Новый Массив;
		КонецЕсли;
		
		Пока Индекс < ЭлементыДанных.Количество()
		   И ПорцияЭлементовДанных.Количество() < РазмерПорции Цикл
			
			ЭлементДанных = ЭлементыДанных[Индекс];
			Индекс = Индекс + 1;
			
			Если Не ПараметрыОбновления.ЭтоСсылочныйТип
			   И НекорректнаяКомбинацияЗначенийОпорныхПолей(ЭлементДанных, ПараметрыОбновления) Тогда
				
				ПорцияУдаляемыхЭлементовДанных.Добавить(ЭлементДанных);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ПорцияЭлементовДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДанных);
			Если Не ПараметрыОбновления.ЭтоСсылочныйТип Тогда
				НоваяСтрока.ТекущаяСсылка = ПорцияЭлементовДанных.Индекс(НоваяСтрока) + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПараметрыОбновления.ЭтоСсылочныйТип
		   И ПорцияУдаляемыхЭлементовДанных.Количество() > 0 Тогда
			
			УдалитьНекорректныеКомбинацииЗначенийОпорныхПолей(ПорцияУдаляемыхЭлементовДанных, ПараметрыОбновления);
		КонецЕсли;
		
		Контекст.Вставить("ПорцияЭлементовДанных", ПорцияЭлементовДанных);
		ОбновитьКлючиДоступаПорцииЭлементовДанныхСписка(ПараметрыОбновления, Контекст);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ОбновитьЭлементыДанныхСпискаСУстаревшимиКлючами.
Функция НекорректнаяКомбинацияЗначенийОпорныхПолей(ЭлементДанных, ПараметрыОбновления)
	
	Номер = 1;
	Для Каждого ХранилищеТиповПоля Из ПараметрыОбновления.ОпорныеПоля.ТипыИспользуемых Цикл
		ТипыПоля = ХранилищеТиповПоля.Получить();
		
		Если Не ТипыПоля.СодержитТип(ТипЗнч(ЭлементДанных["Поле" + Номер]))
		   И ЭлементДанных["Поле" + Номер] <> Неопределено Тогда
			
			Возврат Истина;
		КонецЕсли;
		
		Номер = Номер + 1;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для функции ОбновитьЭлементыДанныхСпискаСУстаревшимиКлючами, ОбновитьКлючиДоступаЭлементовДанныхПриЗаписи.
Процедура ОбновитьКлючиДоступаПорцииЭлементовДанныхСписка(ПараметрыОбновления, Контекст)
	
	ЭтоСсылочныйТип       = ПараметрыОбновления.ЭтоСсылочныйТип;
	ИдентификаторСписка   = ПараметрыОбновления.ИдентификаторСписка;
	ПорцияЭлементовДанных = Контекст.ПорцияЭлементовДанных;
	
	Если ЭтоСсылочныйТип Тогда
		Контекст.Вставить("СсылкиНаОбъекты", ПорцияЭлементовДанных.ВыгрузитьКолонку("ТекущаяСсылка"));
		Контекст.ЗапросЗначенийЭлементовДанных.УстановитьПараметр("СсылкиНаОбъекты", Контекст.СсылкиНаОбъекты);
	Иначе
		Контекст.ЗапросЗначенийЭлементовДанных.УстановитьПараметр("ИдентификаторРегистра", ИдентификаторСписка);
		Контекст.ЗапросЗначенийЭлементовДанных.УстановитьПараметр("ЗначенияОпорныхПолей",  ПорцияЭлементовДанных);
	КонецЕсли;
	РезультатыЗапроса = Контекст.ЗапросЗначенийЭлементовДанных.ВыполнитьПакет();
	
	ДанныеСтроковыхКлючейДоступа = Новый Соответствие;
	ТаблицыКлюча = ПараметрыОбновления.ТаблицыКлюча;
	
	ЗначенияСтрокТаблиц = Новый Соответствие;
	КлючиЗначенийСтрокОбъектов = КлючиЗначенийСтрокОбъектов(РезультатыЗапроса,
		?(ЭтоСсылочныйТип, 0, 1), ТаблицыКлюча, ЗначенияСтрокТаблиц);
	
	ТребуемыеКлючиДоступа         = Новый Массив;
	ХешиТребуемыхКлючейДоступа    = Новый Массив;
	ОписаниеКлючейДоступаОбъектов = Новый Массив;
	Для Каждого ЭлементДанных Из ПорцияЭлементовДанных Цикл
		ОписаниеКлючейЗначений = КлючиЗначенийСтрокОбъектов.Получить(ЭлементДанных.ТекущаяСсылка);
		СтрокаДляХеша = СтрокаДляХешаКлючаДоступа(ОписаниеКлючейЗначений, ТаблицыКлюча);
		Свойства = ДанныеСтроковыхКлючейДоступа.Получить(СтрокаДляХеша);
		Если Свойства = Неопределено Тогда
			Свойства = Новый Структура("ЗначенияТаблиц, СтрокаДляХеша, Хеш, КлючДоступа");
			ДанныеСтроковыхКлючейДоступа.Вставить(СтрокаДляХеша, Свойства);
			ЗначенияТаблиц = Новый Массив;
			Для Каждого ИмяТаблицы Из ТаблицыКлюча Цикл
				КлючЗначений = ОписаниеКлючейЗначений.КлючиЗначений[ТаблицыКлюча.Найти(ИмяТаблицы)];
				ЗначенияСтрок = ЗначенияСтрокТаблиц.Получить(ИмяТаблицы).Получить(КлючЗначений);
				Если ЗначенияСтрок = Неопределено Тогда
					ЗначенияСтрок = Новый Массив;
				КонецЕсли;
				ЗначенияТаблиц.Добавить(Новый Структура("ИмяТаблицы, Таблица", ИмяТаблицы, ЗначенияСтрок));
			КонецЦикла;
			Свойства.ЗначенияТаблиц = ЗначенияТаблиц;
			Свойства.СтрокаДляХеша = СтрокаДляХеша;
			Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
			Хеширование.Добавить(СтрокаДляХеша);
			Свойства.Хеш = Хеширование.ХешСумма;
			ТребуемыеКлючиДоступа.Добавить(Свойства);
			ХешиТребуемыхКлючейДоступа.Добавить(Свойства.Хеш);
		КонецЕсли;
		ОписаниеКлючейДоступаОбъектов.Добавить(
			Новый Структура("ТекущаяСсылка, СвойстваКлюча", ЭлементДанных.ТекущаяСсылка, Свойства));
	КонецЦикла;
	Контекст.Вставить("ОписаниеКлючейДоступаОбъектов", ОписаниеКлючейДоступаОбъектов);
	
	// Получение данных существующих ключей доступа по хешам требуемых ключей доступа.
	Контекст.ЗапросЗначенийКлючей.УстановитьПараметр("Хеши",   ХешиТребуемыхКлючейДоступа);
	Контекст.ЗапросЗначенийКлючей.УстановитьПараметр("Список", ПараметрыОбновления.ИдентификаторСписка);
	РезультатыЗапроса = Контекст.ЗапросЗначенийКлючей.ВыполнитьПакет();
	
	КлючиЗначенийСтрокОбъектов = КлючиЗначенийСтрокОбъектов(РезультатыЗапроса,
		0, ТаблицыКлюча, ЗначенияСтрокТаблиц);
	
	ЕстьШапка = СтрНачинаетсяС(ТаблицыКлюча[0], "Шапка");
	ОписаниеКлючейДоступа = ?(ЕстьШапка,
		КлючиЗначенийСтрокОбъектов, РезультатыЗапроса[ТаблицыКлюча.Количество() - 1].Выгрузить());
	
	Для Каждого ОписаниеКлючаДоступа Из ОписаниеКлючейДоступа Цикл
		Если ЕстьШапка Тогда
			КлючДоступа            = ОписаниеКлючаДоступа.Ключ;
			ОписаниеКлючейЗначений = ОписаниеКлючаДоступа.Значение;
		Иначе
			КлючДоступа = ОписаниеКлючаДоступа.ТекущаяСсылка;
			ОписаниеКлючейЗначений = КлючиЗначенийСтрокОбъектов.Получить(КлючДоступа);
		КонецЕсли;
		СтрокаДляХеша = СтрокаДляХешаКлючаДоступа(ОписаниеКлючейЗначений, ТаблицыКлюча);
		Свойства = ДанныеСтроковыхКлючейДоступа.Получить(СтрокаДляХеша);
		Если Свойства = Неопределено Тогда
			Свойства = Новый Структура("КлючДоступа");
			ДанныеСтроковыхКлючейДоступа.Вставить(СтрокаДляХеша, Свойства);
		КонецЕсли;
		Свойства.КлючДоступа = КлючДоступа;
	КонецЦикла;
	
	// Создание недостающих ключей доступа.
	Для Каждого ОписаниеКлюча Из ТребуемыеКлючиДоступа Цикл
		Если ОписаниеКлюча.КлючДоступа <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеКлюча.КлючДоступа = НовыйКлючДоступа(ОписаниеКлюча, ПараметрыОбновления);
	КонецЦикла;
	
	// Обновление ключей доступа элементов данных.
	Если ЭтоСсылочныйТип Тогда
		ЗаписатьКлючиДоступаОбъектов(ПараметрыОбновления, Контекст);
	Иначе
		ЗаписатьКлючиДоступаРегистров(ПараметрыОбновления, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаПорцииЭлементовДанныхСписка.
Функция СтрокаДляХешаКлючаДоступа(ОписаниеКлючейЗначений, ТаблицыКлюча)
	
	Если ОписаниеКлючейЗначений = Неопределено Тогда
		ОписаниеКлючейЗначений = Новый Структура("КлючиЗначений, ИменаТаблиц",
			Новый Массив, Новый Массив);
	КонецЕсли;
	
	КлючиЗначений = ОписаниеКлючейЗначений.КлючиЗначений;
	ИменаТаблиц   = ОписаниеКлючейЗначений.ИменаТаблиц;
	
	Если ИменаТаблиц.Количество() <> ТаблицыКлюча.Количество() Тогда
		// В ключе доступа используются табличные части и некоторые пустые.
		Для Индекс = 0 По ТаблицыКлюча.Количество() - 1 Цикл
			
			Если Индекс >= ИменаТаблиц.Количество()
			 Или ИменаТаблиц[Индекс] <> ТаблицыКлюча[Индекс] Тогда
				
				ИменаТаблиц.Вставить(Индекс, ТаблицыКлюча[Индекс]);
				КлючиЗначений.Вставить(Индекс, "6ab8db6a-4878-483a-b9d5-ef905ff1537e");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрСоединить(КлючиЗначений);
	
КонецФункции

// Для процедуры ОбновитьКлючиДоступаПорцииЭлементовДанных.
Процедура ЗаписатьКлючиДоступаОбъектов(ПараметрыОбновления, Контекст)
	
	Если ПараметрыОбновления.СЗаписьюКлючейДоступаДляПользователейИВнешнихПользователей Тогда
		ЗапросТекущихКлючей = Новый Запрос;
		ЗапросТекущихКлючей.Текст =
		"ВЫБРАТЬ
		|	КлючиДоступаКОбъектам.Объект КАК Объект,
		|	КлючиДоступаКОбъектам.КлючДоступаПользователей КАК КлючДоступаПользователей,
		|	КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей КАК КлючДоступаВнешнихПользователей
		|ИЗ
		|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
		|ГДЕ
		|	КлючиДоступаКОбъектам.Объект В (&СсылкиНаОбъекты)";
		ЗапросТекущихКлючей.УстановитьПараметр("СсылкиНаОбъекты", Контекст.СсылкиНаОбъекты);
	КонецЕсли;
	
	Если ПараметрыОбновления.ДляВнешнихПользователей Тогда
		ИмяРеквизитаСохраняемогоКлюча = "КлючДоступаПользователей";
		ИмяРеквизитаОбновляемогоКлюча = "КлючДоступаВнешнихПользователей";
	Иначе
		ИмяРеквизитаСохраняемогоКлюча = "КлючДоступаВнешнихПользователей";
		ИмяРеквизитаОбновляемогоКлюча = "КлючДоступаПользователей";
	КонецЕсли;
	
	НаборИзОднойЗаписи = РегистрыСведений.КлючиДоступаКОбъектам.СоздатьНаборЗаписей();
	Запись = НаборИзОднойЗаписи.Добавить();
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОписаниеКлючаДоступаОбъекта Из Контекст.ОписаниеКлючейДоступаОбъектов Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КлючиДоступаКОбъектам");
		ЭлементБлокировки.УстановитьЗначение("Объект", ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка);
	КонецЦикла;
	
	СпискиДляОбновления = Новый Соответствие;
	Для Каждого ЗависимыйСписок Из ПараметрыОбновления.ЗависимыеСпискиПоКлючамДоступа Цикл
		Свойства = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
		Если ПараметрыОбновления.ДляВнешнихПользователей Тогда
			Свойства.ДляВнешнихПользователей = Истина;
		Иначе
			Свойства.ДляПользователей = Истина;
		КонецЕсли;
		СпискиДляОбновления.Вставить(ЗависимыйСписок, Свойства);
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Если ПараметрыОбновления.СЗаписьюКлючейДоступаДляПользователейИВнешнихПользователей Тогда
			ТекущиеКлючи = ЗапросТекущихКлючей.Выполнить().Выгрузить();
		КонецЕсли;
		Для Каждого ОписаниеКлючаДоступаОбъекта Из Контекст.ОписаниеКлючейДоступаОбъектов Цикл
			НаборИзОднойЗаписи.Отбор.Объект.Установить(ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка);
			Запись.Объект = ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка;
			Запись[ИмяРеквизитаОбновляемогоКлюча] = ОписаниеКлючаДоступаОбъекта.СвойстваКлюча.КлючДоступа;
			
			Если ПараметрыОбновления.СЗаписьюКлючейДоступаДляПользователейИВнешнихПользователей Тогда
				Строка = ТекущиеКлючи.Найти(ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка, "Объект");
				Если Строка <> Неопределено Тогда
					Запись[ИмяРеквизитаСохраняемогоКлюча] = Строка[ИмяРеквизитаСохраняемогоКлюча];
				КонецЕсли;
			КонецЕсли;
			НаборИзОднойЗаписи.ОбменДанными.Загрузка = Истина;
			НаборИзОднойЗаписи.Записать();
		КонецЦикла;
		ЗапланироватьОбновлениеУстаревшихКлючейДоступа(СпискиДляОбновления,
			ПараметрыОбновления.ИдентификаторТранзакции);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаПорцииЭлементовДанных.
Процедура ЗаписатьКлючиДоступаРегистров(ПараметрыОбновления, Контекст)
	
	Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
		ИмяРегистраКлючей = "КлючиДоступаКРегистрам";
	Иначе
		ИмяРегистраКлючей = ПараметрыОбновления.ИмяОтдельногоРегистраКлючей;
	КонецЕсли;
	НаборИзОднойЗаписи = РегистрыСведений[ИмяРегистраКлючей].СоздатьНаборЗаписей();
	Запись = НаборИзОднойЗаписи.Добавить();
	
	ПустыеЗначенияОпорныхПолей = УправлениеДоступомСлужебныйПовтИсп.ПустыеЗначенияОпорныхПолей(
		ПараметрыОбновления.ОпорныеПоля.МаксимальноеКоличество);
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ОписаниеКлючаДоступаОбъекта Из Контекст.ОписаниеКлючейДоступаОбъектов Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистраКлючей);
		Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
			ЭлементБлокировки.УстановитьЗначение("Регистр", ПараметрыОбновления.ИдентификаторСписка);
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("ДляВнешнихПользователей", ПараметрыОбновления.ДляВнешнихПользователей);
		ЭлементДанных = Контекст.ПорцияЭлементовДанных.Найти(ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка, "ТекущаяСсылка");
		Для НомерПоля = 1 По ПараметрыОбновления.ОпорныеПоля.Используемые.Количество() Цикл
			ИмяПоля = "Поле" + НомерПоля;
			ЭлементБлокировки.УстановитьЗначение(ИмяПоля, ЭлементДанных[ИмяПоля]);
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Для Каждого ОписаниеКлючаДоступаОбъекта Из Контекст.ОписаниеКлючейДоступаОбъектов Цикл
			Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
				НаборИзОднойЗаписи.Отбор.Регистр.Установить(ПараметрыОбновления.ИдентификаторСписка);
				Запись.Регистр = ПараметрыОбновления.ИдентификаторСписка;
			КонецЕсли;
			НаборИзОднойЗаписи.Отбор.ДляВнешнихПользователей.Установить(ПараметрыОбновления.ДляВнешнихПользователей);
			Запись.ДляВнешнихПользователей = ПараметрыОбновления.ДляВнешнихПользователей;
			
			ЭлементДанных = Контекст.ПорцияЭлементовДанных.Найти(ОписаниеКлючаДоступаОбъекта.ТекущаяСсылка, "ТекущаяСсылка");
			ЗаполнитьЗначенияСвойств(Запись, ПустыеЗначенияОпорныхПолей);
			Для НомерПоля = 1 По ПараметрыОбновления.ОпорныеПоля.Используемые.Количество() Цикл
				ИмяПоля = "Поле" + НомерПоля;
				Если ЭлементДанных[ИмяПоля] = Неопределено Тогда
					НаборИзОднойЗаписи.Отбор[ИмяПоля].Значение = Неопределено;
					НаборИзОднойЗаписи.Отбор[ИмяПоля].Использование = Истина;
				Иначе
					НаборИзОднойЗаписи.Отбор[ИмяПоля].Установить(ЭлементДанных[ИмяПоля]);
				КонецЕсли;
				Запись[ИмяПоля] = ЭлементДанных[ИмяПоля];
			КонецЦикла;
			
			Запись.КлючДоступа = ОписаниеКлючаДоступаОбъекта.СвойстваКлюча.КлючДоступа;
			
			НаборИзОднойЗаписи.ОбменДанными.Загрузка = Истина;
			НаборИзОднойЗаписи.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для функции ОбновитьЭлементыДанныхСпискаСУстаревшимиКлючами.
Процедура УдалитьНекорректныеКомбинацииЗначенийОпорныхПолей(ПорцияЭлементовДанных, ПараметрыОбновления)
	
	Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
		ИмяРегистраКлючей = "КлючиДоступаКРегистрам";
	Иначе
		ИмяРегистраКлючей = ПараметрыОбновления.ИмяОтдельногоРегистраКлючей;
	КонецЕсли;
	НаборИзОднойЗаписи = РегистрыСведений[ИмяРегистраКлючей].СоздатьНаборЗаписей();
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого ЭлементДанных Из ПорцияЭлементовДанных Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистраКлючей);
		Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
			ЭлементБлокировки.УстановитьЗначение("Регистр", ПараметрыОбновления.ИдентификаторСписка);
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("ДляВнешнихПользователей", ПараметрыОбновления.ДляВнешнихПользователей);
		Для НомерПоля = 1 По ПараметрыОбновления.ОпорныеПоля.Используемые.Количество() Цикл
			ИмяПоля = "Поле" + НомерПоля;
			ЭлементБлокировки.УстановитьЗначение(ИмяПоля, ЭлементДанных[ИмяПоля]);
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Для Каждого ЭлементДанных Из ПорцияЭлементовДанных Цикл
			Если Не ЗначениеЗаполнено(ПараметрыОбновления.ИмяОтдельногоРегистраКлючей) Тогда
				НаборИзОднойЗаписи.Отбор.Регистр.Установить(ПараметрыОбновления.ИдентификаторСписка);
			КонецЕсли;
			Для НомерПоля = 1 По ПараметрыОбновления.ОпорныеПоля.Используемые.Количество() Цикл
				ИмяПоля = "Поле" + НомерПоля;
				НаборИзОднойЗаписи.Отбор[ИмяПоля].Установить(ЭлементДанных[ИмяПоля]);
			КонецЦикла;
			НаборИзОднойЗаписи.ОбменДанными.Загрузка = Истина;
			НаборИзОднойЗаписи.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Для процедуры ОбновитьКлючиДоступаПорцииЭлементовДанных.
Функция КлючиЗначенийСтрокОбъектов(РезультатыЗапроса, Индекс, ТаблицыКлюча, ЗначенияСтрокТаблиц)
	
	КлючиЗначенийСтрокОбъектов = Новый Соответствие;
	
	Для Каждого ИмяТаблицыКлючаДоступа Из ТаблицыКлюча Цикл
		ЗначенияСтрокТаблицы = ЗначенияСтрокТаблиц.Получить(ИмяТаблицыКлючаДоступа);
		Если ЗначенияСтрокТаблицы = Неопределено Тогда
			ЗначенияСтрокТаблицы = Новый Соответствие;
			ЗначенияСтрокТаблиц.Вставить(ИмяТаблицыКлючаДоступа, ЗначенияСтрокТаблицы);
		КонецЕсли;
		Дерево = РезультатыЗапроса[Индекс].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Индекс = Индекс + 1;
		Для Каждого Строка Из Дерево.Строки Цикл
			ЗначенияТаблицДляСтрокиХеша = Новый Массив;
			Для Каждого Колонка Из Дерево.Колонки Цикл
				Если СтрНачинаетсяС(Колонка.Имя, "Значение") Тогда
					ЗначенияТаблицДляСтрокиХеша.Добавить(Строка.Строки.ВыгрузитьКолонку(Колонка.Имя));
				КонецЕсли;
			КонецЦикла;
			КлючЗначенийСтрок = СтрокаДанныхДляХеширования(ЗначенияТаблицДляСтрокиХеша);
			Если ЗначенияСтрокТаблицы.Получить(КлючЗначенийСтрок) = Неопределено Тогда
				ЗначенияСтрокТаблицы.Вставить(КлючЗначенийСтрок, Строка.Строки);
			КонецЕсли;
			КлючиЗначенийСтрокОбъекта = КлючиЗначенийСтрокОбъектов.Получить(Строка.ТекущаяСсылка);
			Если КлючиЗначенийСтрокОбъекта = Неопределено Тогда
				КлючиЗначенийСтрокОбъекта = Новый Структура("КлючиЗначений, ИменаТаблиц",
					Новый Массив, Новый Массив);
				КлючиЗначенийСтрокОбъектов.Вставить(Строка.ТекущаяСсылка, КлючиЗначенийСтрокОбъекта);
			КонецЕсли;
			КлючиЗначенийСтрокОбъекта.ИменаТаблиц.Добавить(ИмяТаблицыКлючаДоступа);
			КлючиЗначенийСтрокОбъекта.КлючиЗначений.Добавить(КлючЗначенийСтрок);
		КонецЦикла;
	КонецЦикла;
	
	Возврат КлючиЗначенийСтрокОбъектов;
	
КонецФункции

// Для функции КлючиЗначенийСтрокОбъектов.
Функция СтрокаДанныхДляХеширования(Данные)
	
	// Возвращает строку данных для последующего хеширования, например,
	// строковое описание ссылок, сохраняемых в базе данных, с учетом типов
	// по внутренним идентификаторам, что обеспечивает неизменность хеш-суммы
	// при изменении имен таблиц и имен реквизитов, то есть обеспечивает
	// соответствие хеш-суммы данных самим данным, сохраняемым в базе данных.
	//
	// Это позволяет избежать избыточного массового пересоздания ключей доступа с последующим
	// перерасчетом пользователей и групп доступа для пересозданных ключей доступа.
	
	Возврат ЗначениеВСтрокуВнутр(Данные);
	
КонецФункции

// Для процедуры ОбновитьКлючиДоступаПорцииЭлементовДанных.
Функция НовыйКлючДоступа(ОписаниеКлюча, ПараметрыОбновления)
	
	НоваяСсылка = Справочники.КлючиДоступа.ПолучитьСсылку();
	НовыйКлюч   = Справочники.КлючиДоступа.СоздатьЭлемент();
	
	НовыйКлюч.УстановитьСсылкуНового(НоваяСсылка);
	НовыйКлюч.Наименование                  = Строка(НоваяСсылка.УникальныйИдентификатор());
	НовыйКлюч.Список                        = ПараметрыОбновления.ИдентификаторСписка;
	НовыйКлюч.СоставПолей                   = ПараметрыОбновления.СоставПолей;
	НовыйКлюч.ДляВнешнихПользователей = ПараметрыОбновления.ДляВнешнихПользователей;
	НовыйКлюч.Хеш                           = ОписаниеКлюча.Хеш;
	
	Для Каждого ЗначенияТаблицы Из ОписаниеКлюча.ЗначенияТаблиц Цикл
		Если СтрНачинаетсяС(ЗначенияТаблицы.ИмяТаблицы, "Шапка") Тогда
			Если СтрЗаканчиваетсяНа(ЗначенияТаблицы.ИмяТаблицы, "0") Тогда
				ЗаполнитьЗначенияСвойств(НовыйКлюч, ЗначенияТаблицы.Таблица[0],, "Родитель");
			Иначе
				НомерСтроки = Число(Прав(ЗначенияТаблицы.ИмяТаблицы, 1));
				НовыйКлюч.Шапка.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйКлюч.Шапка[НомерСтроки - 1], ЗначенияТаблицы.Таблица[0]);
			КонецЕсли;
		Иначе
			Для Каждого Строка Из ЗначенияТаблицы.Таблица Цикл
				ЗаполнитьЗначенияСвойств(НовыйКлюч[ЗначенияТаблицы.ИмяТаблицы].Добавить(), Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НовыйКлюч.ОбменДанными.Загрузка = Истина;
	НовыйКлюч.Записать();
	
	Возврат НовыйКлюч.Ссылка;
	
КонецФункции

#КонецОбласти

#Область ПараметрыОграниченияДоступа

#Область ПараметрыОграниченияДоступаОбщаяЧасть

// Основная функция, возвращающая параметры, необходимые для регистрации
// необходимости обновления ключей доступа к элементам данных.
Функция СвойстваСпискаКакВедущего(ПолноеИмя, ИдентификаторТранзакции = Неопределено) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции);
	ХранимыеСвойстваСпискаКакВедущего = ДействующиеПараметры.ВедущиеСписки.Получить(ПолноеИмя);
	
	Если ХранимыеСвойстваСпискаКакВедущего = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Кэш = КэшПараметровОграничения();
	
	СвойстваСпискаКакВедущего = Кэш.ВедущиеСпискиПроверенные.Получить(ПолноеИмя);
	Если СвойстваСпискаКакВедущего <> Неопределено Тогда
		Возврат СвойстваСпискаКакВедущего;
	КонецЕсли;
	
	СвойстваСпискаКакВедущего = Новый Структура(ХранимыеСвойстваСпискаКакВедущего);
	ЗаполнитьТекстЗапросаСтарыхЗначенийДляПроверкиИзмененияПолейВедущегоСписка(ПолноеИмя,
		СвойстваСпискаКакВедущего);
	
	Кэш.ВедущиеСпискиПроверенные.Вставить(ПолноеИмя,
		Новый ФиксированнаяСтруктура(СвойстваСпискаКакВедущего));
	
	СпискиДляПроверки = Новый Массив;
	Для Каждого ОписаниеСписка Из ХранимыеСвойстваСпискаКакВедущего.ЗависимыеСписки Цикл
		Если Кэш.ОграниченияСписков.Получить(ОписаниеСписка.Ключ) = Неопределено Тогда
			СпискиДляПроверки.Добавить(ОписаниеСписка.Ключ);
		КонецЕсли;
	КонецЦикла;
	СпискиДляПроверки.Добавить(ПолноеИмя);
	
	ДействующиеПараметрыОбновлены = Ложь;
	ДобавляемыеОграниченияСписков = Новый Соответствие;
	
	ЗаполнитьПараметрыОграничения(СпискиДляПроверки, ИдентификаторТранзакции,
		ДействующиеПараметрыОбновлены, ДобавляемыеОграниченияСписков);
	
	Если ДействующиеПараметрыОбновлены Тогда
		Возврат СвойстваСпискаКакВедущего(ПолноеИмя);
	КонецЕсли;
	
	Если ДобавляемыеОграниченияСписков.Количество() > 0 Тогда
		Для Каждого КлючИЗначение Из ДобавляемыеОграниченияСписков Цикл
			Кэш.ОграниченияСписков.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СвойстваСпискаКакВедущего;
	
КонецФункции

// Для функции СвойстваСпискаКакВедущего и процедур ЗаполнитьПараметрыОграничения,
// ОбновитьИдентификаторыТранзакции, УстановитьВерсиюПараметров.
//
Функция КэшПараметровОграничения(КлючКэша = Неопределено)
	
	Если КлючКэша = Неопределено Тогда
		КлючКэша = ПараметрыСеанса.ПараметрыОграниченияДоступа.КлючКэша;
	КонецЕсли;
	
	Возврат УправлениеДоступомСлужебныйПовтИсп.КэшПараметровОграничения(КлючКэша);
	
КонецФункции

// Для функции СвойстваСпискаКакВедущего.
Процедура ЗаполнитьТекстЗапросаСтарыхЗначенийДляПроверкиИзмененияПолейВедущегоСписка(ПолноеИмя, Свойства)
	
	Свойства.Удалить("ЗависимыеСписки");
	Если Свойства.ПоЗначениямПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоЗначениямПолей = Новый Структура(Свойства.ПоЗначениямПолей);
	
	Если ПоЗначениямПолей.ЭтоСсылочныйТип Тогда
		Если ЗначениеЗаполнено(ПоЗначениямПолей.ПоляШапки) Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТекущаяТаблица.Поле1 КАК Поле1
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИСТИНА КАК ЗначениеИстина) КАК ЗначениеИстина
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущаяТаблицаЭлементовДанных КАК ТекущаяТаблица
			|		ПО (ТекущаяТаблица.Ссылка = &СсылкаНаОбъект)";
			ЗаполнитьПоляВыбораТекущейТаблицы(ТекстЗапроса, ПолноеИмя, ПоЗначениямПолей.ПоляШапки)
		Иначе
			ТекстЗапроса = "";
		КонецЕсли;
		
		Для Каждого ТабличнаяЧасть Из ПоЗначениямПолей.ТабличныеЧасти Цикл
			ТекстЗапросаТабличнойЧасти =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
			|	ТекущаяТаблица.Поле1 КАК Поле1
			|ИЗ
			|	ТекущаяТаблицаЭлементовДанных КАК ТекущаяТаблица
			|ГДЕ
			|	ТекущаяТаблица.Ссылка = &СсылкаНаОбъект";
			ЗаполнитьПоляВыбораТекущейТаблицы(ТекстЗапросаТабличнойЧасти,
				ТабличнаяЧасть.Имя, ТабличнаяЧасть.Поля);
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "",
				ОбщегоНазначения.РазделительПакетаЗапросов()) + ТекстЗапросаТабличнойЧасти;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(ПоЗначениямПолей.ПоляРегистра.Поля) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ТекущаяТаблица.Поле1 КАК Поле1
		|ИЗ
		|	ТекущаяТаблицаЭлементовДанных КАК ТекущаяТаблица
		|ГДЕ
		|	&ОтборПоИзмерениям";
		ЗаполнитьПоляВыбораТекущейТаблицы(ТекстЗапроса, ПолноеИмя, ПоЗначениямПолей.ПоляРегистра.Поля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "ПЕРВЫЕ "
			+ Формат(МаксимальноеКоличествоКомбинацийЗначенийВедущихПолейПриВычисленииСоставаИзмененных(), "ЧГ="));
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	
	ПоЗначениямПолей.Вставить("ТекстЗапроса", ТекстЗапроса);
	Свойства.ПоЗначениямПолей = Новый ФиксированнаяСтруктура(ПоЗначениямПолей);
	
КонецПроцедуры

// Для процедуры ЗаполнитьТекстЗапросаСтарыхЗначенийДляПроверкиИзмененияПолейВедущегоСписка.
Процедура ЗаполнитьПоляВыбораТекущейТаблицы(ТекстЗапроса, ПолноеИмя, ОписаниеПолей)
	
	ПоляВыбора = "";
	Для Каждого ОписаниеПоля Из ОписаниеПолей Цикл
		ИмяПоля = ?(ТипЗнч(ОписаниеПолей) = Тип("ФиксированныйМассив"), ОписаниеПоля, ОписаниеПоля.Ключ);
		ПоляВыбора = ПоляВыбора + ?(ПоляВыбора = "", "", "," + Символы.ПС)
			+ "ТекущаяТаблица." + ИмяПоля + " КАК " + ИмяПоля;
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ТекущаяТаблица.Поле1 КАК Поле1", ТекстСОтступом(СокрЛ(ПоляВыбора), "	"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекущаяТаблицаЭлементовДанных", ПолноеИмя);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "ПЕРВЫЕ " + Формат(
		МаксимальноеКоличествоКомбинацийЗначенийВедущихПолейПриВычисленииСоставаИзмененных(), "ЧГ="));
	
КонецПроцедуры

// Для процедуры ЗаполнитьСвойстваПроверкиПолейВедущегоСписка.
Функция МаксимальноеКоличествоКомбинацийЗначенийВедущихПолейПриВычисленииСоставаИзмененных()
	
	Возврат 100;
	
КонецФункции

// Основная функция, возвращающая параметры, необходимые для проверки прав в момент записи элементов данных.
Функция ПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции = Неопределено, ДляВнешнихПользователей = Неопределено) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции);
	Параметры = КэшПараметровОграничения().ОграниченияСписков.Получить(ПолноеИмя);
	
	Если Параметры = Неопределено Тогда
		ЗаполнитьПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции);
		
		ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции);
		Параметры = КэшПараметровОграничения().ОграниченияСписков.Получить(ПолноеИмя);
	КонецЕсли;
	
	Если ДляВнешнихПользователей = Неопределено Тогда
		ДляВнешнихПользователей = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	КонецЕсли;
	
	Если ДляВнешнихПользователей Тогда
		Возврат Параметры.ДляВнешнихПользователей;
	КонецЕсли;
	
	Возврат Параметры.ДляПользователей;
	
КонецФункции

// Для функций СвойстваСпискаКакВедущего, ПараметрыОграничения.
Процедура ЗаполнитьПараметрыОграничения(ПолноеИмя, ИдентификаторТранзакции, ДействующиеПараметрыОбновлены = Ложь,
			ДобавляемыеОграниченияСписков = Неопределено, ОбщийКонтекст = Неопределено)
	
	Если ОбщийКонтекст = Неопределено Тогда
		ОбщийКонтекст = ОбщийКонтекстРасчетаПараметровОграничения();
		ОбщийКонтекст.Вставить("ОписанияОграничений", Новый Соответствие);
	КонецЕсли;
	
	ПараметрыОграниченияСписков = Новый Соответствие;
	ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции);
	
	Если ТипЗнч(ПолноеИмя) = Тип("Массив") Тогда
		Для Каждого ТекущееПолноеИмя Из ПолноеИмя Цикл
			ДобавитьПараметрыОграниченияСписка(ТекущееПолноеИмя, ПараметрыОграниченияСписков,
				ДействующиеПараметры, ДействующиеПараметрыОбновлены, ИдентификаторТранзакции, ОбщийКонтекст);
			
			Если ДействующиеПараметрыОбновлены Тогда
				ЗаполнитьПараметрыОграничения(ПолноеИмя,
					ИдентификаторТранзакции, Ложь, ДобавляемыеОграниченияСписков, ОбщийКонтекст);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДобавитьПараметрыОграниченияСписка(ПолноеИмя, ПараметрыОграниченияСписков,
			ДействующиеПараметры, ДействующиеПараметрыОбновлены, ИдентификаторТранзакции, ОбщийКонтекст);
		
		Если ДействующиеПараметрыОбновлены Тогда
			ЗаполнитьПараметрыОграничения(ПолноеИмя,
				ИдентификаторТранзакции, Ложь, ДобавляемыеОграниченияСписков, ОбщийКонтекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОграниченияСписков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДобавляемыеОграниченияСписков <> Неопределено Тогда
		ДобавляемыеОграниченияСписков = ПараметрыОграниченияСписков;
		Возврат;
	КонецЕсли;
	
	Кэш = КэшПараметровОграничения();
	
	Для Каждого КлючИЗначение Из ПараметрыОграниченияСписков Цикл
		Кэш.ОграниченияСписков.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ЗаполнитьПараметрыОграничения и функций
// ХранимыеПараметрыОграниченияДоступа, ОшибкиОграниченийДоступа.
//
Функция ОбщийКонтекстРасчетаПараметровОграничения(ВсеВидыДоступаИспользуются = Ложь)
	
	ТипыПользователя = Новый Массив;
	ТипыПользователя.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыПользователя.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
	ТипыПользователя.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	ТипыПользователя.Добавить(Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
	
	ИспользуемыеТипыЗначений = Новый Соответствие;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.СвойстваВидовДоступа();
	
	Для Каждого СвойстваВидаДоступа Из СвойстваВидовДоступа.Массив Цикл
		Если Не ВсеВидыДоступаИспользуются
		   И Не ВидДоступаИспользуется(СвойстваВидаДоступа.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		ИспользуемыеТипыЗначений.Вставить(СвойстваВидаДоступа.ТипЗначений, Истина);
		Для Каждого ОписаниеДополнительногоТипа Из СвойстваВидаДоступа.ДополнительныеТипы Цикл
			ИспользуемыеТипыЗначений.Вставить(ОписаниеДополнительногоТипа.ТипЗначений, Истина);
		КонецЦикла;
	КонецЦикла;
	
	ТипыВладельцевНастроекПрав =
		УправлениеДоступомСлужебныйПовтИсп.ВозможныеПраваДляНастройкиПравОбъектов().ПоТипамСсылок;
	
	СпискиСОграничением = УправлениеДоступомСлужебныйПовтИсп.СпискиСОграничением();
	
	ОбщийКонтекст = Новый Структура;
	ОбщийКонтекст.Вставить("СвойстваВидовДоступа",       СвойстваВидовДоступа);
	ОбщийКонтекст.Вставить("ТипыПользователя",           ТипыПользователя);
	ОбщийКонтекст.Вставить("ИспользуемыеТипыЗначений",   ИспользуемыеТипыЗначений);
	ОбщийКонтекст.Вставить("ТипыВладельцевНастроекПрав", ТипыВладельцевНастроекПрав);
	ОбщийКонтекст.Вставить("СпискиСОграничением",        СпискиСОграничением);
	
	Возврат ОбщийКонтекст;
	
КонецФункции

// Для процедуры ЗаполнитьПараметрыОграничения.
Процедура ДобавитьПараметрыОграниченияСписка(ПолноеИмя, ПараметрыОграниченияСписков, ДействующиеПараметры,
			ДействующиеПараметрыОбновлены, ИдентификаторТранзакции, ОбщийКонтекст)
	
	Если КэшПараметровОграничения().ОграниченияСписков.Получить(ПолноеИмя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияОграничений = ДействующиеПараметры.ВерсииОграниченийСписков.Получить(ПолноеИмя);
	РассчитанныеПараметры = РассчитанныеПараметрыОграничения(ПолноеИмя, ОбщийКонтекст, ДействующиеПараметры);
	
	Если ВерсияОграничений <> РассчитанныеПараметры.Версия Тогда
		ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции, , Истина);
		ДействующиеПараметрыОбновлены = Истина;
		Возврат;
	КонецЕсли;
	
	ПараметрыОграниченияСписков.Вставить(ПолноеИмя,
		ОбщегоНазначения.ФиксированныеДанные(РассчитанныеПараметры));
	
КонецПроцедуры

// Для процедуры ДобавитьПараметрыОграниченияСписка.
Функция РассчитанныеПараметрыОграничения(ПолноеИмя, ОбщийКонтекст, ДействующиеПараметры)
	
	ОписаниеОграничения = ОписаниеОграниченияДанных(ОбщийКонтекст, ПолноеИмя);
	
	// Для пользователей.
	СтруктураОграниченияДляПользователей = РассчитаннаяСтруктураОграничения(ПолноеИмя,
		ОписаниеОграничения.Текст, ОписаниеОграничения.ТекстВМодулеМенеджера, Ложь);
	
	ДополнительныйКонтекст = НовыйДополнительныйКонтекст();
	ЗаполнитьЗначенияСвойств(ДополнительныйКонтекст, ДействующиеПараметры.ДополнительныйКонтекст.ДляПользователей);
	ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекст, ОписаниеОграничения.Текст,
		ОписаниеОграничения.ТекстВМодулеМенеджера, ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступа);
	
	РезультатДляПользователей = ПараметрыОграниченияПоСтруктуреОграничения(ПолноеИмя,
		СтруктураОграниченияДляПользователей, Ложь, ОбщийКонтекст, ДополнительныйКонтекст);
	
	// Для внешних пользователей.
	СтруктураОграниченияДляВнешнихПользователей = РассчитаннаяСтруктураОграничения(ПолноеИмя,
		ОписаниеОграничения.ТекстДляВнешнихПользователей, ОписаниеОграничения.ТекстВМодулеМенеджера, Истина);
	
	ДополнительныйКонтекст = НовыйДополнительныйКонтекст();
	ЗаполнитьЗначенияСвойств(ДополнительныйКонтекст, ДействующиеПараметры.ДополнительныйКонтекст.ДляВнешнихПользователей);
	ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекст, ОписаниеОграничения.ТекстДляВнешнихПользователей,
		ОписаниеОграничения.ТекстВМодулеМенеджера, ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей);
	
	РезультатДляВнешнихПользователей = ПараметрыОграниченияПоСтруктуреОграничения(ПолноеИмя,
		СтруктураОграниченияДляВнешнихПользователей, Истина, ОбщийКонтекст, ДополнительныйКонтекст);
	
	// Заполнение параметров на основе параметров обоих видов пользователей.
	Версия = ОбщаяВерсия(ОбщийКонтекст, ПолноеИмя, РезультатДляПользователей.Версия, РезультатДляВнешнихПользователей.Версия);
	СЗаписьюДвухКлючей = Не БезЗаписиКлюча(РезультатДляПользователей) И Не БезЗаписиКлюча(РезультатДляВнешнихПользователей);
	БезЗаписиКлючей    =    БезЗаписиКлюча(РезультатДляПользователей) И    БезЗаписиКлюча(РезультатДляВнешнихПользователей);
	РезультатДляПользователей.Вставить(       "СЗаписьюКлючейДоступаДляПользователейИВнешнихПользователей", СЗаписьюДвухКлючей);
	РезультатДляВнешнихПользователей.Вставить("СЗаписьюКлючейДоступаДляПользователейИВнешнихПользователей", СЗаписьюДвухКлючей);
	РезультатДляПользователей.Вставить(       "БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей", БезЗаписиКлючей);
	РезультатДляВнешнихПользователей.Вставить("БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей", БезЗаписиКлючей);
	
	// Формирование текстов запросов.
	ДобавитьТекстыЗапросовВПараметрыОграничения(РезультатДляПользователей);
	ДобавитьТекстыЗапросовВПараметрыОграничения(РезультатДляВнешнихПользователей);
	
	ВедущиеСписки = Новый Структура;
	ВедущиеСписки.Вставить("ДляПользователей",        РезультатДляПользователей.ВедущиеСписки);
	ВедущиеСписки.Вставить("ДляВнешнихПользователей", РезультатДляВнешнихПользователей.ВедущиеСписки);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Версия",                  Версия);
	Параметры.Вставить("ВедущиеСписки",           ВедущиеСписки);
	Параметры.Вставить("ДляПользователей",        РезультатДляПользователей);
	Параметры.Вставить("ДляВнешнихПользователей", РезультатДляВнешнихПользователей);
	
	Возврат Параметры;
	
КонецФункции

// Для функции ОшибкиОграниченийДоступа.
Функция ОшибкаОграниченияДоступа(ОбщийКонтекст, ПолноеИмя)
	
	ТекстОшибкиДляПользователей = "";
	ТекстОшибкиДляВнешнихПользователей = "";
	
	ОписаниеОграничения = ОписаниеОграниченияДанных(ОбщийКонтекст, ПолноеИмя);
	
	// Для пользователей.
	СтруктураОграниченияДляПользователей = РассчитаннаяСтруктураОграничения(ПолноеИмя,
		ОписаниеОграничения.Текст, ОписаниеОграничения.ТекстВМодулеМенеджера, Ложь, Истина);
	
	Если СтруктураОграниченияДляПользователей <> Неопределено
	   И СтруктураОграниченияДляПользователей.ОписаниеОшибок.ЕстьОшибки Тогда
		
		ТекстОшибкиДляПользователей = ТекстОшибокДляВызоваИсключения(ПолноеИмя,
			СтруктураОграниченияДляПользователей.ОписаниеОшибок, Ложь, ОписаниеОграничения.ТекстВМодулеМенеджера);
	Иначе
		ДополнительныйКонтекст = НовыйДополнительныйКонтекст();
		ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекст, ОписаниеОграничения.Текст,
			ОписаниеОграничения.ТекстВМодулеМенеджера, ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступа);
		
		Попытка
			РезультатДляПользователей = ПараметрыОграниченияПоСтруктуреОграничения(ПолноеИмя,
				СтруктураОграниченияДляПользователей, Ложь, ОбщийКонтекст, ДополнительныйКонтекст);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибкиДляПользователей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сформировать параметры ограничения доступа для пользователей по причине:
				           |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ТекстОшибкиДляПользователей) Тогда
			РезультатДляПользователей.Вставить("БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей", Ложь);
			РезультатДляПользователей.Контекст.СпискиСЗаписьюКлючейДоступа = Новый Соответствие;
			Попытка
				ДобавитьТекстыЗапросовВПараметрыОграничения(РезультатДляПользователей);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибкиДляПользователей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сформировать тексты запросов на основе параметров ограничения доступа
					           |для пользователей по причине:
					           |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	// Для внешних пользователей.
	СтруктураОграниченияДляВнешнихПользователей = РассчитаннаяСтруктураОграничения(ПолноеИмя,
		ОписаниеОграничения.ТекстДляВнешнихПользователей, ОписаниеОграничения.ТекстВМодулеМенеджера, Истина, Истина);
	
	Если СтруктураОграниченияДляВнешнихПользователей <> Неопределено
	   И СтруктураОграниченияДляВнешнихПользователей.ОписаниеОшибок.ЕстьОшибки Тогда
		
		ТекстОшибкиДляВнешнихПользователей = ТекстОшибокДляВызоваИсключения(ПолноеИмя,
			СтруктураОграниченияДляВнешнихПользователей.ОписаниеОшибок, Истина, ОписаниеОграничения.ТекстВМодулеМенеджера);
	Иначе
		ДополнительныйКонтекст = НовыйДополнительныйКонтекст();
		ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекст, ОписаниеОграничения.ТекстДляВнешнихПользователей,
			ОписаниеОграничения.ТекстВМодулеМенеджера, ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей);
		
		Попытка
			РезультатДляВнешнихПользователей = ПараметрыОграниченияПоСтруктуреОграничения(ПолноеИмя,
				СтруктураОграниченияДляВнешнихПользователей, Истина, ОбщийКонтекст, ДополнительныйКонтекст);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибкиДляВнешнихПользователей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось сформировать параметры ограничения доступа для внешних пользователей по причине:
				           |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(ТекстОшибкиДляВнешнихПользователей) Тогда
			РезультатДляВнешнихПользователей.Вставить("БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей", Ложь);
			РезультатДляВнешнихПользователей.Контекст.СпискиСЗаписьюКлючейДоступа = Новый Соответствие;
			Попытка
				ДобавитьТекстыЗапросовВПараметрыОграничения(РезультатДляВнешнихПользователей);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибкиДляВнешнихПользователей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось сформировать тексты запросов на основе параметров ограничения доступа
					           |для внешних пользователей по причине:
					           |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(ТекстОшибкиДляПользователей
		+ Символы.ПС + Символы.ПС + ТекстОшибкиДляВнешнихПользователей);
	
КонецФункции

// Для функций ХранимыеПараметрыОграниченияДоступа, РассчитанныеПараметрыОграничения.
Функция ОбщаяВерсия(ОбщийКонтекст, ПолноеИмя, ВерсияДляПользователей, ВерсияДляВнешнихПользователей)
	
	Если ОбщийКонтекст.СпискиСОграничением.Получить(ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строка(ВерсияДляПользователей) + Символы.ПС + Строка(ВерсияДляВнешнихПользователей);
	
КонецФункции

// Для функции РассчитанныеПараметрыОграничения.
Функция БезЗаписиКлюча(Результат)
	
	Возврат
		 (Результат.ОграничениеОтключено Или Результат.ДоступЗапрещен)
		И Результат.Контекст.СпискиСЗаписьюКлючейДоступа.Получить(Результат.Список) = Неопределено;
	
КонецФункции

// Для функций РассчитанныеПараметрыОграничения, ХранимыеПараметрыОграниченияДоступа.
Функция ОписаниеОграниченияДанных(ОбщийКонтекст, ПолноеИмя)
	
	Ограничение = Новый Структура;
	Ограничение.Вставить("Текст", "");
	Ограничение.Вставить("ТекстДляВнешнихПользователей", "");
	Ограничение.Вставить("ПоВладельцуБезЗаписиКлючейДоступа");
	Ограничение.Вставить("ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей");
	Ограничение.Вставить("ТекстВМодулеМенеджера", Ложь);
	
	ТекстВМодулеМенеджера = ОбщийКонтекст.СпискиСОграничением.Получить(ПолноеИмя);
	Если ТекстВМодулеМенеджера = Неопределено Тогда
		Возврат Ограничение;
	КонецЕсли;
	
	Ограничение.ТекстВМодулеМенеджера = ТекстВМодулеМенеджера;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		ЭтоСправочникФайлов = МодульРаботаСФайламиСлужебный.ЭтоСправочникФайловИлиВерсийФайлов(ПолноеИмя);
	Иначе
		ЭтоСправочникФайлов = Ложь;
	КонецЕсли;
	
	Если ЭтоЖурналДокументов(ПолноеИмя) Или ЭтоСправочникФайлов Тогда
		// Для журналов документов ограничение должно быть
		// по документу-владельцу без записи ключей доступа, если не требуется другое.
		// Аналогично (по умолчанию) для справочников файлов и версий файлов.
		Ограничение.ПоВладельцуБезЗаписиКлючейДоступа = Истина;
		Ограничение.ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей = Истина;
	КонецЕсли;
	
	Если ТекстВМодулеМенеджера Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Попытка
			Менеджер.ПриЗаполненииОграниченияДоступа(Ограничение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить ограничение доступа списка
				           |""%1""
				           |в модуле менеджера в процедуре ПриЗаполненииОграниченияДоступа по причине:
				           |
				           |%2'"),
				ПолноеИмя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		Попытка
			УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа(ОбъектМетаданных, Ограничение);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить ограничение доступа списка
				           |""%1""
				           |в общем модуле УправлениеДоступомПереопределяемый
				           |в процедуре ПриЗаполненииОграниченияДоступа по причине:
				           |
				           |%2'"),
				ПолноеИмя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ограничение;
	
КонецФункции

// Для функции ОписаниеОграниченияДанных.
Функция ЭтоЖурналДокументов(ПолноеИмя)
	
	Возврат СтрНачинаетсяС(ВРег(ПолноеИмя), ВРег("ЖурналДокументов."))
	    Или СтрНачинаетсяС(ВРег(ПолноеИмя), ВРег("DocumentJournal."));
	
КонецФункции

// Для функций РассчитанныеПараметрыОграничения и ПараметрыОграниченияДляВидаПользователей.
Функция РассчитаннаяСтруктураОграничения(ПолноеИмя, ТекстОграничения, ТекстВМодулеМенеджера, ДляВнешнихПользователей, БезИсключения = Ложь)
	
	Если Не ЗначениеЗаполнено(ТекстОграничения) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РазобранноеОграничение = РазобранноеОграничение(ПолноеИмя, ТекстОграничения);
	
	ПроверитьТаблицыПоляИТипыПолей(РазобранноеОграничение);
	
	СтруктураОграничения = СтруктураОграничения(РазобранноеОграничение);
	
	Если БезИсключения Или Не СтруктураОграничения.ОписаниеОшибок.ЕстьОшибки Тогда
		Возврат СтруктураОграничения;
	КонецЕсли;
	
	ТекстОшибок = ТекстОшибокДляВызоваИсключения(ПолноеИмя,
		СтруктураОграничения.ОписаниеОшибок, ДляВнешнихПользователей, ТекстВМодулеМенеджера);
	
	ВызватьИсключение ТекстОшибок;
	
КонецФункции

// Для функций СвойстваСпискаКакВедущего, ПараметрыОграничения и процедур УстановкаПараметровСеанса,
// ЗаполнитьПараметрыОграничения, ДобавитьПараметрыОграниченияСписка.
//
Функция ДействующиеПараметрыОграниченияДоступа(ИдентификаторТранзакции,
			УстановкаПараметровСеансаДляШаблонов = Ложь, Обновить = Ложь, ЕстьИзменения = Ложь) Экспорт
	
	Если Обновить Тогда
		ВерсияПараметров = НоваяВерсияПараметровОграниченияДоступа(ЕстьИзменения);
		УстановитьВерсиюПараметров(ВерсияПараметров, ИдентификаторТранзакции);
		Возврат ПараметрыСеанса.ПараметрыОграниченияДоступа.Параметры;
	КонецЕсли;
	
	ТекущиеПараметры = ПараметрыСеанса.ПараметрыОграниченияДоступа;
	
	Если Не ЗначениеЗаполнено(ТекущиеПараметры) Или ТекущиеПараметры.Параметры = Неопределено Тогда
		ТекущиеПараметры = Новый Структура("Версия, ХешСумма", "", "");
		ИдентификаторыТранзакции = Новый Соответствие;
	Иначе
		ИдентификаторыТранзакции = КэшПараметровОграничения().ИдентификаторыТранзакции;
	КонецЕсли;
	
	Если ТранзакцияАктивна() Тогда
		Если ИдентификаторыТранзакции.Получить(ИдентификаторТранзакции) <> Неопределено Тогда
			Возврат ТекущиеПараметры.Параметры;
		КонецЕсли;
		
		ОписаниеВерсии = Новый Структура("Версия, ХешСумма", "", "");
		Если ЗначениеЗаполнено(ТекущиеПараметры.Версия) Тогда
			ОписаниеВерсии.Версия   = ТекущиеПараметры.Версия;
			ОписаниеВерсии.ХешСумма = ТекущиеПараметры.ХешСумма;
		КонецЕсли;
		
		Пока Истина Цикл
			Если Не ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
				ОписаниеВерсии = ОписаниеПоследнейВерсии();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
				Прервать;
			КонецЕсли;
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПараметрыОграниченияДоступа");
			ЭлементБлокировки.УстановитьЗначение("Версия", ОписаниеВерсии.Версия);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			БлокировкаДанных.Заблокировать();
			НовоеОписаниеВерсии = ОписаниеПоследнейВерсии();
			Если Не ЗначениеЗаполнено(НовоеОписаниеВерсии.Версия) Тогда
				ОписаниеВерсии = НовоеОписаниеВерсии;
				Прервать;
			КонецЕсли;
			Если ОписаниеВерсии.Версия   = НовоеОписаниеВерсии.Версия
			   И ОписаниеВерсии.ХешСумма = НовоеОписаниеВерсии.ХешСумма Тогда
				Прервать;
			КонецЕсли;
			ОписаниеВерсии = НовоеОписаниеВерсии;
		КонецЦикла;
	Иначе
		ОписаниеВерсии = ОписаниеПоследнейВерсии();
	КонецЕсли;
	
	Если Не УстановкаПараметровСеансаДляШаблонов
	   И ТекущиеПараметры.Версия   = ОписаниеВерсии.Версия
	   И ТекущиеПараметры.ХешСумма = ОписаниеВерсии.ХешСумма Тогда
		
		ОбновитьИдентификаторыТранзакции(ИдентификаторТранзакции);
		Возврат ТекущиеПараметры.Параметры;
	КонецЕсли;
	
	// Параметры в базе данных отличаются от параметров в памяти.
	Если ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
		ВерсияПараметров = ВерсияПараметров(ОписаниеВерсии.Версия, УстановкаПараметровСеансаДляШаблонов);
	Иначе
		ВерсияПараметров = НоваяВерсияПараметровОграниченияДоступа();
	КонецЕсли;
	
	УстановитьВерсиюПараметров(ВерсияПараметров, ИдентификаторТранзакции);
	
	Возврат ПараметрыСеанса.ПараметрыОграниченияДоступа.Параметры;
	
КонецФункции

// Для функций ДействующиеПараметрыОграниченияДоступа, НоваяВерсияПараметровОграниченияДоступа.
Функция ОписаниеПоследнейВерсии()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыОграниченияДоступа.Версия КАК Версия,
	|	ПараметрыОграниченияДоступа.ХешСумма КАК ХешСумма
	|ИЗ
	|	РегистрСведений.ПараметрыОграниченияДоступа КАК ПараметрыОграниченияДоступа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыОграниченияДоступа.Версия УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Для функции ДействующиеПараметрыОграниченияДоступа.
Функция ВерсияПараметров(Версия, УстановкаПараметровСеансаДляШаблонов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыОграниченияДоступа.Версия КАК Версия,
	|	ПараметрыОграниченияДоступа.ХешСумма КАК ХешСумма,
	|	ПараметрыОграниченияДоступа.ДляШаблоновВСеансахПользователей КАК ДляШаблоновВСеансахПользователей,
	|	ПараметрыОграниченияДоступа.ДляШаблоновВСеансахВнешнихПользователей КАК ДляШаблоновВСеансахВнешнихПользователей,
	|	ПараметрыОграниченияДоступа.ДляЗаписиОбъектовИПроверкиПрав КАК ДляЗаписиОбъектовИПроверкиПрав
	|ИЗ
	|	РегистрСведений.ПараметрыОграниченияДоступа КАК ПараметрыОграниченияДоступа
	|ГДЕ
	|	ПараметрыОграниченияДоступа.Версия = &Версия";
	
	Если УстановкаПараметровСеансаДляШаблонов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПараметрыОграниченияДоступа.ДляЗаписиОбъектовИПроверкиПрав", "Неопределено");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ?(ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя(),
			"ПараметрыОграниченияДоступа.ДляШаблоновВСеансахПользователей",
			"ПараметрыОграниченияДоступа.ДляШаблоновВСеансахВнешнихПользователей"), "Неопределено");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Для функции ДействующиеПараметрыОграниченияДоступа.
Функция НоваяВерсияПараметровОграниченияДоступа(ЕстьИзменения = Ложь)
	
	ВерсииОграниченийСписков = Новый Соответствие;
	ХранимыеПараметры = ХранимыеПараметрыОграниченияДоступа(ВерсииОграниченийСписков);
	
	НаборЗаписей = РегистрыСведений.ПараметрыОграниченияДоступа.СоздатьНаборЗаписей();
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ХранимыеПараметры);
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ПараметрыОграниченияДоступа");
	ЗаблокированнаяВерсия = 0;
	
	НачатьТранзакцию();
	Попытка
		ОписаниеВерсии = ОписаниеПоследнейВерсии();
		Пока Истина Цикл
			Если ОписаниеВерсии.ХешСумма = ХранимыеПараметры.ХешСумма Тогда
				Если ОписаниеВерсии.Версия = ЗаблокированнаяВерсия Тогда
					Прервать;
				КонецЕсли;
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Версия", ОписаниеВерсии.Версия);
				БлокировкаДанных.Заблокировать();
				ЗаблокированнаяВерсия = ОписаниеВерсии.Версия;
				ОписаниеВерсии = ОписаниеПоследнейВерсии();
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
				НоваяВерсия = ОписаниеВерсии.Версия + 1;
			Иначе
				НоваяВерсия = 1;
			КонецЕсли;
			ЭлементБлокировки.УстановитьЗначение("Версия", НоваяВерсия);
			БлокировкаДанных.Заблокировать();
			НовоеОписаниеВерсии = ОписаниеПоследнейВерсии();
			
			Если ОписаниеВерсии.Версия <> НовоеОписаниеВерсии.Версия
			 Или НовоеОписаниеВерсии.Версия = НоваяВерсия Тогда
				
				ОписаниеВерсии = НовоеОписаниеВерсии;
				Продолжить;
			КонецЕсли;
			
			ХранимыеПараметры.Вставить("Версия", НоваяВерсия);
			
			Запись.Версия = НоваяВерсия;
			НаборЗаписей.Отбор.Версия.Установить(НоваяВерсия);
			
			Если КонфигурацияБазыДанныхИзмененаДинамически()
			 Или Справочники.ВерсииРасширений.РасширенияИзмененыДинамически() Тогда
				
				СтандартныеПодсистемыСервер.ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы();
			КонецЕсли;
			Списки = СпискиСИзменениемВерсий(ВерсииОграниченийСписков);
			ЗапланироватьОбновлениеДоступа(Списки,,, ВерсииОграниченийСписков);
			
			НаборЗаписей.Записать();
			ЕстьИзменения = Истина;
			Прервать;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не ХранимыеПараметры.Свойство("Версия") Тогда
		ХранимыеПараметры.Вставить("Версия", ОписаниеВерсии.Версия);
	КонецЕсли;
	
	Возврат ХранимыеПараметры;
	
КонецФункции

// Для функции НоваяВерсияПараметровОграниченияДоступа.
Функция СпискиСИзменениемВерсий(НовыеВерсииОграниченийСписков)
	
	ОписаниеВерсии = ОписаниеПоследнейВерсии();
	Если Не ЗначениеЗаполнено(ОписаниеВерсии.Версия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияПараметров = ВерсияПараметров(ОписаниеВерсии.Версия, Ложь);
	ПараметрыЗаписиХранилище = ВерсияПараметров.ДляЗаписиОбъектовИПроверкиПрав;
	
	Если ТипЗнч(ПараметрыЗаписиХранилище) <> Тип("ХранилищеЗначения") Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыЗаписи = ПараметрыЗаписиХранилище.Получить();
	
	Если ТипЗнч(ПараметрыЗаписи) <> Тип("ФиксированнаяСтруктура")
	 Или Не ПараметрыЗаписи.Свойство("ВерсииОграниченийСписков")
	 Или ТипЗнч(ПараметрыЗаписи.ВерсииОграниченийСписков) <> Тип("ФиксированноеСоответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Список",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Версия",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ВидИзменения", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из ПараметрыЗаписи.ВерсииОграниченийСписков Цикл
		Строка = Таблица.Добавить();
		Строка.Список = КлючИЗначение.Ключ;
		Строка.Версия = КлючИЗначение.Значение;
		Строка.ВидИзменения = -1;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из НовыеВерсииОграниченийСписков Цикл
		Строка = Таблица.Добавить();
		Строка.Список = КлючИЗначение.Ключ;
		Строка.Версия = КлючИЗначение.Значение;
		Строка.ВидИзменения = 1;
	КонецЦикла;
	
	Таблица.Свернуть("Список, Версия", "ВидИзменения");
	Списки = Новый Массив;
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ВидИзменения = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Списки.Найти(Строка.Список) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Метаданные.НайтиПоПолномуИмени(Строка.Список) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Списки.Добавить(Строка.Список);
	КонецЦикла;
	
	Возврат Списки;
	
КонецФункции

// Для процедуры ХранимыеПараметрыОграниченияДоступа.
Функция ВерсияСтруктурыКэша()
	
	Возврат "2"; // Число нужно увеличивать при внесении изменений в состав параметров кэша.
	
КонецФункции

// Для процедур УстановкаПараметровСеанса, УточнитьВерсииШаблоновОграниченияДоступа и
// для функции СтруктураХранимыхПараметровШаблонов.
Функция ВерсииШаблоновОграниченияДоступа()
	
	Возврат ",ДляОбъекта1,ДляРегистра1,";
	
КонецФункции

// Для функции ДействующиеПараметрыОграниченияДоступа.
Процедура ОбновитьИдентификаторыТранзакции(ИдентификаторТранзакции)
	
	Кэш = КэшПараметровОграничения();
	
	Если Не ТранзакцияАктивна() И Кэш.ИдентификаторыТранзакции.Количество() = 0
	 Или    ТранзакцияАктивна() И ИдентификаторТранзакции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИдентификаторТранзакции <> Неопределено И ТранзакцияАктивна() Тогда
		Кэш.ИдентификаторыТранзакции.Вставить(ИдентификаторТранзакции, Истина);
	Иначе
		Кэш.ИдентификаторыТранзакции.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Для функции ДействующиеПараметрыОграниченияДоступа.
Процедура УстановитьВерсиюПараметров(ВерсияПараметров, ИдентификаторТранзакции, КлючКэша = Неопределено)
	
	Если КлючКэша = Неопределено Тогда
		КлючКэша = Строка(Новый УникальныйИдентификатор);
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ИдентификаторТранзакции <> Неопределено И ТранзакцияАктивна() Тогда
		Кэш = КэшПараметровОграничения(КлючКэша);
		Кэш.ИдентификаторыТранзакции.Вставить(ИдентификаторТранзакции, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ВерсияПараметров.ДляЗаписиОбъектовИПроверкиПрав) = Тип("ХранилищеЗначения") Тогда
		ДляЗаписиОбъектовИПроверкиПрав = ВерсияПараметров.ДляЗаписиОбъектовИПроверкиПрав.Получить();
		
		Если ТипЗнч(ДляЗаписиОбъектовИПроверкиПрав) = Тип("Структура")
		 Или Не ДляЗаписиОбъектовИПроверкиПрав.Свойство("ВерсияСтруктурыКэша")
		 Или ДляЗаписиОбъектовИПроверкиПрав.ВерсияСтруктурыКэша <> ВерсияСтруктурыКэша() Тогда
			
			ВерсияПараметров = НоваяВерсияПараметровОграниченияДоступа();
			УстановитьВерсиюПараметров(ВерсияПараметров, ИдентификаторТранзакции, КлючКэша);
			Возврат;
		КонецЕсли;
	Иначе
		ДляЗаписиОбъектовИПроверкиПрав = Неопределено;
	КонецЕсли;
	
	ХранилищеДляШаблоновОграниченияДоступа = ?(ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя(),
		ВерсияПараметров.ДляШаблоновВСеансахВнешнихПользователей,
		ВерсияПараметров.ДляШаблоновВСеансахПользователей);
	
	Если ТипЗнч(ХранилищеДляШаблоновОграниченияДоступа) = Тип("ХранилищеЗначения") Тогда
		ДляШаблоновОграниченияДоступа = СтруктураХранимыхПараметровШаблонов(
			ХранилищеДляШаблоновОграниченияДоступа.Получить());
		
		Если ДляШаблоновОграниченияДоступа.ВерсияСтруктурыКэша <> ВерсияСтруктурыКэша() Тогда
			ВерсияПараметров = НоваяВерсияПараметровОграниченияДоступа();
			УстановитьВерсиюПараметров(ВерсияПараметров, ИдентификаторТранзакции, КлючКэша);
			Возврат;
		КонецЕсли;
	Иначе
		ДляШаблоновОграниченияДоступа = СтруктураХранимыхПараметровШаблонов();
	КонецЕсли;
	
	ПараметрыСеанса.ВерсииШаблоновОграниченияДоступа = ДляШаблоновОграниченияДоступа.ВерсииШаблонов;
	ПараметрыШаблонов = СтруктураПараметровШаблонов(ДляШаблоновОграниченияДоступа.ПараметрыШаблонов);
	ЗаполнитьЗначенияСвойств(ПараметрыСеанса, ПараметрыШаблонов);
	
	УточнитьВерсииШаблоновОграниченияДоступа();
	
	ПараметрыСеанса.ГруппыДоступаАвторизованногоПользователя =
		Новый ФиксированныйМассив(ГруппыДоступаАвторизованногоПользователя());
	
	ПараметрыОграничения = Новый Структура;
	ПараметрыОграничения.Вставить("Версия",    ВерсияПараметров.Версия);
	ПараметрыОграничения.Вставить("ХешСумма",  ВерсияПараметров.ХешСумма);
	ПараметрыОграничения.Вставить("Параметры", ДляЗаписиОбъектовИПроверкиПрав);
	ПараметрыОграничения.Вставить("КлючКэша",  КлючКэша);
	
	ФиксированныеПараметрыОграничения = Новый ФиксированнаяСтруктура(ПараметрыОграничения);
	ПараметрыСеанса.ПараметрыОграниченияДоступа = ФиксированныеПараметрыОграничения;
	
КонецПроцедуры

// Для процедуры УстановитьВерсиюПараметров.
Процедура УточнитьВерсииШаблоновОграниченияДоступа()
	
	Если ПараметрыСеанса.ВерсииШаблоновОграниченияДоступа = ВерсииШаблоновОграниченияДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ВерсииШаблонов = СтрРазделить(ВерсииШаблоновОграниченияДоступа(), ",", Ложь);
	УточненныеВерсииШаблонов = "";
	Для Каждого ВерсияШаблона Из ВерсииШаблонов Цикл
		УточненныеВерсииШаблонов = "," + ВерсияШаблона;
		Если СтрНайти(ПараметрыСеанса.ВерсииШаблоновОграниченияДоступа, "," + ВерсияШаблона + ",") = 0 Тогда
			УточненныеВерсииШаблонов = УточненныеВерсииШаблонов + "ТребуетсяПерезапуститьСеанс";
		КонецЕсли;
	КонецЦикла;
	УточненныеВерсииШаблонов = УточненныеВерсииШаблонов + ",";
	
	ПараметрыСеанса.ВерсииШаблоновОграниченияДоступа = УточненныеВерсииШаблонов;
	
КонецПроцедуры

// Для процедуры УстановитьВерсиюПараметров.
Функция ГруппыДоступаАвторизованногоПользователя()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ ГруппыДоступа.ПометкаУдаления
	|	И НЕ ГруппыДоступа.Профиль.ПометкаУдаления
	|	И (ГруппыДоступа.Профиль <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
	|			ГДЕ
	|				ПользователиГруппДоступа.Ссылка = ГруппыДоступа.Ссылка
	|				И НЕ(ПользователиГруппДоступа.Пользователь <> &Пользователь
	|						И НЕ ПользователиГруппДоступа.Пользователь В
	|								(ВЫБРАТЬ
	|									СоставыГруппПользователей.ГруппаПользователей
	|								ИЗ
	|									РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|								ГДЕ
	|									СоставыГруппПользователей.Пользователь = &Пользователь)))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Для функции НоваяВерсияПараметровОграниченияДоступа.
Функция ХранимыеПараметрыОграниченияДоступа(ВерсииОграниченийСписков = Неопределено)
	
	ОписанияОграничений = Новый Соответствие;
	ОбщийКонтекст = ОбщийКонтекстРасчетаПараметровОграничения();
	ДополнительныйКонтекстДляПользователей        = НовыйДополнительныйКонтекст();
	ДополнительныйКонтекстДляВнешнихПользователей = НовыйДополнительныйКонтекст();
	
	ПолныеИменаСписков = Новый Массив;
	Для Каждого ОписаниеСписка Из ОбщийКонтекст.СпискиСОграничением Цикл
		ПолноеИмя = ОписаниеСписка.Ключ;
		ПолныеИменаСписков.Добавить(ПолноеИмя);
		ОписаниеОграничения = ОписаниеОграниченияДанных(ОбщийКонтекст, ПолноеИмя);
		
		ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекстДляПользователей,
			ОписаниеОграничения.Текст,
			ОписаниеОграничения.ТекстВМодулеМенеджера,
			ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступа);
		
		ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекстДляВнешнихПользователей,
			ОписаниеОграничения.ТекстДляВнешнихПользователей,
			ОписаниеОграничения.ТекстВМодулеМенеджера,
			ОписаниеОграничения.ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей);
	КонецЦикла;
	
	СпискиСДатой = Новый Соответствие;
	ИдентификаторыСписков = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(ПолныеИменаСписков);
	
	// Заполнение для пользователей.
	КонтекстДляПользователей = Новый Структура;
	КонтекстДляПользователей.Вставить("ДляВнешнихПользователей",  Ложь);
	КонтекстДляПользователей.Вставить("ОбщийКонтекст",            ОбщийКонтекст);
	КонтекстДляПользователей.Вставить("ДополнительныйКонтекст",   ДополнительныйКонтекстДляПользователей);
	КонтекстДляПользователей.Вставить("ВедущиеСписки",            Новый Соответствие);
	КонтекстДляПользователей.Вставить("УровниЗависимости",        Новый Соответствие);
	КонтекстДляПользователей.Вставить("ВерсииОграниченийСписков", Новый Соответствие);
	КонтекстДляПользователей.Вставить("ПараметрыШаблонов",        СтруктураПараметровШаблонов());
	КонтекстДляПользователей.Вставить("СпискиСДатой",             СпискиСДатой);
	КонтекстДляПользователей.Вставить("ИдентификаторыСписков",    ИдентификаторыСписков);
	
	ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей(КонтекстДляПользователей);
	
	// Заполнение для внешних пользователей.
	КонтекстДляВнешнихПользователей = Новый Структура;
	КонтекстДляВнешнихПользователей.Вставить("ДляВнешнихПользователей",  Истина);
	КонтекстДляВнешнихПользователей.Вставить("ОбщийКонтекст",            ОбщийКонтекст);
	КонтекстДляВнешнихПользователей.Вставить("ДополнительныйКонтекст",   ДополнительныйКонтекстДляВнешнихПользователей);
	КонтекстДляВнешнихПользователей.Вставить("ВедущиеСписки",            Новый Соответствие);
	КонтекстДляВнешнихПользователей.Вставить("УровниЗависимости",        Новый Соответствие);
	КонтекстДляВнешнихПользователей.Вставить("ВерсииОграниченийСписков", Новый Соответствие);
	КонтекстДляВнешнихПользователей.Вставить("ПараметрыШаблонов",        СтруктураПараметровШаблонов());
	КонтекстДляВнешнихПользователей.Вставить("СпискиСДатой",             СпискиСДатой);
	КонтекстДляВнешнихПользователей.Вставить("ИдентификаторыСписков",    ИдентификаторыСписков);
	
	ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей(КонтекстДляВнешнихПользователей);
	
	// Заполнение общей и отдельной частей ведущих списков для пользователей и внешних пользователей.
	ВедущиеСписки = Новый Соответствие;
	Для Каждого ОписаниеВедущихСписков Из КонтекстДляПользователей.ВедущиеСписки Цикл
		ДобавитьВедущиеСписки(ВедущиеСписки,
			"ДляПользователей", ОписаниеВедущихСписков.Ключ, ОписаниеВедущихСписков.Значение);
	КонецЦикла;
	Для Каждого ОписаниеВедущихСписков Из КонтекстДляВнешнихПользователей.ВедущиеСписки Цикл
		ДобавитьВедущиеСписки(ВедущиеСписки,
			"ДляВнешнихПользователей", ОписаниеВедущихСписков.Ключ, ОписаниеВедущихСписков.Значение);
	КонецЦикла;
	Для Каждого ВедущийСписок Из ВедущиеСписки Цикл
		Свойства = ВедущийСписок.Значение;
		Если Свойства.ПоЗначениямПолей <> Неопределено Тогда
			ПоЗначениямПолей = Свойства.ПоЗначениямПолей;
			Если ПоЗначениямПолей.ЭтоСсылочныйТип Тогда
				ТабличныеЧасти = Новый Массив;
				Для Каждого ОписаниеТабличнойЧасти Из ПоЗначениямПолей.ТабличныеЧасти Цикл
					ТабличныеЧасти.Добавить(ОписаниеТабличнойЧасти.Значение);
				КонецЦикла;
				ПоЗначениямПолей.ТабличныеЧасти = ТабличныеЧасти;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение уровней зависимости от ведущих списков.
	УровниЗависимости = Новый Соответствие;
	Для Каждого ОписаниеУровняЗависимости Из КонтекстДляПользователей.УровниЗависимости Цикл
		ДобавитьУровеньЗависимости(УровниЗависимости,
			"ДляПользователей", ОписаниеУровняЗависимости.Ключ, ОписаниеУровняЗависимости.Значение);
	КонецЦикла;
	Для Каждого ОписаниеУровняЗависимости Из КонтекстДляВнешнихПользователей.УровниЗависимости Цикл
		ДобавитьУровеньЗависимости(УровниЗависимости,
			"ДляВнешнихПользователей", ОписаниеУровняЗависимости.Ключ, ОписаниеУровняЗависимости.Значение);
	КонецЦикла;
	
	// Расчет версий ограничения доступа.
	ВерсииОграниченийСписков = Новый Соответствие;
	Версии = Новый СписокЗначений;
	Версии.Добавить(ВерсияСтруктурыКэша());
	Для Каждого ОписаниеВерсии Из КонтекстДляПользователей.ВерсииОграниченийСписков Цикл
		ОбщаяВерсия = ОбщаяВерсия(ОбщийКонтекст, ОписаниеВерсии.Ключ, ОписаниеВерсии.Значение,
			КонтекстДляВнешнихПользователей.ВерсииОграниченийСписков.Получить(ОписаниеВерсии.Ключ));
		ВерсииОграниченийСписков.Вставить(ОписаниеВерсии.Ключ, ОбщаяВерсия);
		Версии.Добавить(ОбщаяВерсия);
	КонецЦикла;
	Версии.СортироватьПоЗначению();
	ВерсииСтрокой = СтрСоединить(Версии.ВыгрузитьЗначения(), Символы.ПС);
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ВерсииСтрокой);
	
	// Подготовка дополнительного контекста для расчета параметров ограничения отдельного списка.
	ХранимыеСвойства = "СпискиСОтключеннымОграничением, СвойстваОграниченияСписков, СпискиСЗаписьюКлючейДоступа";
	ДляПользователей = Новый Структура(ХранимыеСвойства);
	ЗаполнитьЗначенияСвойств(ДляПользователей, КонтекстДляПользователей.ДополнительныйКонтекст);
	ДляВнешнихПользователей = Новый Структура(ХранимыеСвойства);
	ЗаполнитьЗначенияСвойств(ДляВнешнихПользователей, КонтекстДляВнешнихПользователей.ДополнительныйКонтекст);
	ДополнительныйКонтекст = Новый Структура;
	ДополнительныйКонтекст.Вставить("ДляПользователей", ДляПользователей);
	ДополнительныйКонтекст.Вставить("ДляВнешнихПользователей", ДляВнешнихПользователей);
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ВерсияСтруктурыКэша",       ВерсияСтруктурыКэша());
	ПараметрыЗаписи.Вставить("ВерсииОграниченийСписков",  ВерсииОграниченийСписков);
	ПараметрыЗаписи.Вставить("ВедущиеСписки",             ВедущиеСписки);
	ПараметрыЗаписи.Вставить("ДополнительныйКонтекст",    ДополнительныйКонтекст);
	ПараметрыЗаписи.Вставить("УровниЗависимости",         УровниЗависимости);
	ПараметрыЗаписи.Вставить("СпискиСДатой",              СпискиСДатой);
	
	ХранимыеПараметры = Новый Структура;
	
	ХранимыеПараметрыШаблоновДляПользователей = СтруктураХранимыхПараметровШаблонов();
	ХранимыеПараметрыШаблоновДляПользователей.ПараметрыШаблонов = КонтекстДляПользователей.ПараметрыШаблонов;
	ХранимыеПараметры.Вставить("ДляШаблоновВСеансахПользователей",
		Новый ХранилищеЗначения(ОбщегоНазначения.ФиксированныеДанные(ХранимыеПараметрыШаблоновДляПользователей)));
	
	ХранимыеПараметрыШаблоновДляВнешнихПользователей = СтруктураХранимыхПараметровШаблонов();
	ХранимыеПараметрыШаблоновДляВнешнихПользователей.ПараметрыШаблонов = КонтекстДляВнешнихПользователей.ПараметрыШаблонов;
	ХранимыеПараметры.Вставить("ДляШаблоновВСеансахВнешнихПользователей",
		Новый ХранилищеЗначения(ОбщегоНазначения.ФиксированныеДанные(ХранимыеПараметрыШаблоновДляВнешнихПользователей)));
	
	ХранимыеПараметры.Вставить("ДляЗаписиОбъектовИПроверкиПрав",
		Новый ХранилищеЗначения(ОбщегоНазначения.ФиксированныеДанные(ПараметрыЗаписи)));
	
	ХранимыеПараметры.Вставить("ХешСумма", Base64Строка(ХешированиеДанных.ХешСумма));
	
	Возврат ХранимыеПараметры;
	
КонецФункции

// Для функций РассчитанныеПараметрыОграничения и ХранимыеПараметрыОграниченияДоступа.
Функция НовыйДополнительныйКонтекст()
	
	ДополнительныйКонтекст = Новый Структура;
	ДополнительныйКонтекст.Вставить("ОписанияОграничений",             Новый Соответствие);
	ДополнительныйКонтекст.Вставить("СпискиСОграничениемПоВладельцу",  Новый Соответствие);
	ДополнительныйКонтекст.Вставить("СпискиСОтключеннымОграничением",  Новый Соответствие);
	ДополнительныйКонтекст.Вставить("СпискиСЗаписьюКлючейДоступа",     Неопределено);
	ДополнительныйКонтекст.Вставить("СвойстваОграниченияСписков",      Новый Соответствие);
	
	Возврат ДополнительныйКонтекст;
	
КонецФункции

// Для функций РассчитанныеПараметрыОграничения и ХранимыеПараметрыОграниченияДоступа.
Процедура ДобавитьДополнительныйКонтекст(ПолноеИмя, ДополнительныйКонтекст, Текст, ВМодулеМенеджера, ПоВладельцу)
	
	ОписаниеОграничения = Новый Структура("Текст, ВМодулеМенеджера", Текст, ВМодулеМенеджера);
	ДополнительныйКонтекст.ОписанияОграничений.Вставить(ПолноеИмя, ОписаниеОграничения);
	
	Если ПоВладельцу <> Неопределено Тогда
		ДополнительныйКонтекст.СпискиСОграничениемПоВладельцу.Вставить(ПолноеИмя, ПоВладельцу);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ХранимыеПараметрыОграниченияДоступа.
Процедура ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей(Контекст)
	
	// Подготовка параметров с учетом зависимостей только по ключам доступа.
	ТаблицаСвойств = Новый ТаблицаЗначений;
	ТаблицаСвойств.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	ТаблицаСвойств.Колонки.Добавить("Зависимый", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Ведущие",   Новый ОписаниеТипов("Массив"));
	ТаблицаСвойств.Колонки.Добавить("Уровень",   Новый ОписаниеТипов("Число"));
	ТаблицаСвойств.Колонки.Добавить("Ведущий",   Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("Зависимые", Новый ОписаниеТипов("Массив"));
	ТаблицаСвойств.Колонки.Добавить("Параметры", Новый ОписаниеТипов("Структура"));
	ТаблицаСвойств.Колонки.Добавить("Обработан", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ЗаписыватьКлючиДоступа",          Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ОграничениеПоВладельцуВозможно",  Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ОграничениеПоВладельцуВключено",  Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ОграничениеПоВладельцуОтключено", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("ОграничениеПоВладельцуСокращено", Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("КлючиДоступаПользователей",       Новый ОписаниеТипов("Булево"));
	ТаблицаСвойств.Колонки.Добавить("КлючиДоступаПользователейИГруппДоступа", Новый ОписаниеТипов("Булево"));
	
	СпискиСОграничением = Новый Соответствие(Контекст.ОбщийКонтекст.СпискиСОграничением);
	СпискиСОтключеннымОграничением = Новый Соответствие;
	
	Для Каждого ОписаниеСписка Из СпискиСОграничением Цикл
		ПолноеИмя = ОписаниеСписка.Ключ;
		Параметры = ПараметрыОграниченияДляВидаПользователей(ПолноеИмя, Контекст);
		
		Если Параметры.ОграничениеОтключено Тогда
			СпискиСОтключеннымОграничением.Вставить(ПолноеИмя, Истина);
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеСписка.Значение) = Тип("Булево") Тогда
			Свойства = ТаблицаСвойств.Добавить();
			Свойства.ПолноеИмя = ПолноеИмя;
			СпискиСОграничением.Вставить(ПолноеИмя, Свойства);
		Иначе
			Свойства = ОписаниеСписка.Значение;
		КонецЕсли;
		Свойства.Параметры = Параметры;
		
		Если Контекст.ДляВнешнихПользователей
		   И Параметры.ЕстьОграничениеПоВидуДоступаВнешниеПользователи
		 Или Не Контекст.ДляВнешнихПользователей
		   И Параметры.ЕстьОграничениеПоВидуДоступаПользователи Тогда
			
			Свойства.КлючиДоступаПользователей = Истина;
		КонецЕсли;
		
		ВедущиеСписки = Параметры.ВедущиеСписки;
		Если ВедущиеСписки.ПоКлючамДоступа.Количество() > 0 Тогда
			Свойства.Зависимый = Истина;
			Для Каждого КлючИЗначение Из ВедущиеСписки.ПоКлючамДоступа Цикл
				ВедущийСписок = КлючИЗначение.Ключ;
				Свойства.Ведущие.Добавить(ВедущийСписок);
				СвойстваВедущего = СпискиСОграничением.Получить(ВедущийСписок);
				Если СвойстваВедущего = Неопределено Или ТипЗнч(СвойстваВедущего) = Тип("Булево") Тогда
					СвойстваВедущего = ТаблицаСвойств.Добавить();
					СвойстваВедущего.ПолноеИмя = ВедущийСписок;
					СвойстваВедущего.Параметры = ПараметрыОграниченияДляВидаПользователей(ВедущийСписок, Контекст);
					СпискиСОграничением.Вставить(ВедущийСписок, СвойстваВедущего);
				КонецЕсли;
				СвойстваВедущего.Ведущий = Истина;
				СвойстваВедущего.Зависимые.Добавить(ПолноеИмя);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	МаксимальныйУровень = 0;
	Строки = ТаблицаСвойств.НайтиСтроки(Новый Структура("Зависимый, Ведущий", Ложь, Истина));
	Для Каждого Строка Из Строки Цикл
		УстановитьУровеньЗависимыхСписков(Строка, СпискиСОграничением, Новый Массив, МаксимальныйУровень);
	КонецЦикла;
	// Обработка зависимых списков, ведущих для самих себя (зацикленных на себя).
	Строки = ТаблицаСвойств.НайтиСтроки(Новый Структура("Обработан", Ложь));
	Для Каждого Строка Из Строки Цикл
		УстановитьУровеньЗависимыхСписков(Строка, СпискиСОграничением, Новый Массив, МаксимальныйУровень);
	КонецЦикла;
	
	Строки = ТаблицаСвойств.НайтиСтроки(Новый Структура("Зависимый, Ведущий", Истина, Ложь));
	Для Каждого Строка Из Строки Цикл
		НастроитьОптимизациюПоПолюВладельцу(Строка, СпискиСОграничением, Контекст);
	КонецЦикла;
	
	// Сокращение зависимостей по ключам доступа зависимых объектов.
	СпискиСЗаписьюКлючейДоступа = Новый Соответствие;
	Строки = ТаблицаСвойств.НайтиСтроки(Новый Структура("ЗаписыватьКлючиДоступа", Истина));
	Для Каждого Строка Из Строки Цикл
		СпискиСЗаписьюКлючейДоступа.Вставить(Строка.ПолноеИмя, Истина);
	КонецЦикла;
	Контекст.ДополнительныйКонтекст.СпискиСОтключеннымОграничением = СпискиСОтключеннымОграничением;
	Контекст.ДополнительныйКонтекст.СпискиСЗаписьюКлючейДоступа    = СпискиСЗаписьюКлючейДоступа;
	
	СвойстваСписковПоУровням = Новый Массив;
	Для Уровень = 1 По МаксимальныйУровень - 1 Цикл
		СвойстваСписков = ТаблицаСвойств.НайтиСтроки(Новый Структура("Уровень", Уровень));
		СвойстваСписковПоУровням.Добавить(СвойстваСписков);
	КонецЦикла;
	
	Для Каждого СвойстваСписков Из СвойстваСписковПоУровням Цикл
		Для Каждого СвойстваСписка Из СвойстваСписков Цикл
			
			Если СвойстваСписка.ОграничениеПоВладельцуВключено Тогда
				КлючиДоступаПользователей = Ложь;
				КлючиДоступаГруппДоступа = Ложь;
				Для Каждого Ведущий Из СвойстваСписка.Ведущие Цикл
					СвойстваВедущего = СпискиСОграничением.Получить(Ведущий);
					Если СвойстваВедущего.КлючиДоступаПользователей Тогда
						КлючиДоступаПользователей = Истина;
					Иначе
						КлючиДоступаГруппДоступа = Истина;
					КонецЕсли;
				КонецЦикла;
				Если КлючиДоступаПользователей И КлючиДоступаГруппДоступа Тогда
					СвойстваСписка.КлючиДоступаПользователейИГруппДоступа = Истина;
				ИначеЕсли КлючиДоступаПользователей Тогда
					СвойстваСписка.КлючиДоступаПользователей = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ВсеВедущиеСпискиСОграничением = Истина;
			Для Каждого Ведущий Из СвойстваСписка.Ведущие Цикл
				Если СпискиСОграничением.Получить(Ведущий) = Неопределено
				 Или СпискиСОтключеннымОграничением.Получить(Ведущий) <> Неопределено Тогда
					ВсеВедущиеСпискиСОграничением = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВсеВедущиеСпискиСОграничением Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваСписка.Параметры =
				ПараметрыОграниченияДляВидаПользователей(СвойстваСписка.ПолноеИмя, Контекст);
			
			СвойстваСписка.ОграничениеПоВладельцуСокращено =
				СвойстваСписка.ОграничениеПоВладельцуВозможно
				И СвойстваСписка.Параметры.ПолеВладельца = Неопределено;
			
			ВедущиеСписки = СвойстваСписка.Параметры.ВедущиеСписки.ПоКлючамДоступа;
			Если ВедущиеСписки.Количество() = СвойстваСписка.Ведущие.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Ведущий Из СвойстваСписка.Ведущие Цикл
				Если ВедущиеСписки.Получить(Ведущий) = Неопределено Тогда
					СвойстваВедущего = СпискиСОграничением.Получить(Ведущий);
					ИндексЭлемента = СвойстваВедущего.Зависимые.Найти(СвойстваСписка.ПолноеИмя);
					СвойстваВедущего.Зависимые.Удалить(ИндексЭлемента);
					СвойстваВедущего.Ведущий = СвойстваВедущего.Зависимые.Количество() > 0;
				КонецЕсли;
			КонецЦикла;
			
			Если СвойстваСписка.Параметры.ОграничениеОтключено Тогда
				СпискиСОтключеннымОграничением.Вставить(СвойстваСписка.ПолноеИмя, Истина);
			КонецЕсли;
			
			НовыйУровеньЗависимости = 0;
			Для Каждого Ведущий Из СвойстваСписка.Ведущие Цикл
				СвойстваВедущего = СпискиСОграничением.Получить(Ведущий);
				Если НовыйУровеньЗависимости < СвойстваВедущего.Уровень + 1 Тогда
					НовыйУровеньЗависимости = СвойстваВедущего.Уровень + 1;
				КонецЕсли;
				Если СвойстваВедущего.КлючиДоступаПользователей Тогда
					СвойстваСписка.КлючиДоступаПользователей = Истина;
				КонецЕсли;
			КонецЦикла;
			СвойстваСписка.Уровень = НовыйУровеньЗависимости;
			СвойстваСписка.Зависимый = СвойстваСписка.Ведущие.Количество() > 0;
		КонецЦикла;
	КонецЦикла;
	
	// Заполнение хранимых свойств списков.
	Для Каждого СвойстваСписка Из ТаблицаСвойств Цикл
		ПолноеИмя = СвойстваСписка.ПолноеИмя;
		
		Если СвойстваСписка.Параметры.ДоступЗапрещен Тогда
			УстановитьСвойствоОграничения(ПолноеИмя, "ДоступЗапрещен", Истина, Контекст);
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваСписка.Параметры.ИмяОтдельногоРегистраКлючей) Тогда
			УстановитьСвойствоОграничения(ПолноеИмя,
				"ИмяОтдельногоРегистраКлючей", СвойстваСписка.Параметры.ИмяОтдельногоРегистраКлючей, Контекст);
		КонецЕсли;
		Если ЗначениеЗаполнено(СвойстваСписка.Параметры.ОпорныеПоля) Тогда
			ОпорныеПоля = Новый Структура("Все, ТипыВсех");
			ЗаполнитьЗначенияСвойств(ОпорныеПоля, СвойстваСписка.Параметры.ОпорныеПоля);
			УстановитьСвойствоОграничения(ПолноеИмя, "ОпорныеПоля", ОпорныеПоля, Контекст);
		КонецЕсли;
		Если СвойстваСписка.КлючиДоступаПользователей Тогда
			УстановитьСвойствоОграничения(ПолноеИмя,
				"ОграничениеЧерезКлючиДоступаПользователей", Истина, Контекст);
		КонецЕсли;
		Если СвойстваСписка.КлючиДоступаПользователейИГруппДоступа Тогда
			УстановитьСвойствоОграничения(ПолноеИмя,
				"ОграничениеЧерезКлючиДоступаПользователейИГруппДоступа", Истина, Контекст);
		КонецЕсли;
		Если СвойстваСписка.ОграничениеПоВладельцуВключено Тогда
			УстановитьСвойствоОграничения(ПолноеИмя,
				"ПолеВладельца", СвойстваСписка.Параметры.ПолеВладельца, Контекст);
		КонецЕсли;
		Если СвойстваСписка.Параметры.ОграничениеОтключено Тогда
			СпискиСОтключеннымОграничением.Вставить(ПолноеИмя, Истина);
		КонецЕсли;
		
		Контекст.ВерсииОграниченийСписков.Вставить(ПолноеИмя, СвойстваСписка.Параметры.Версия);
		
		ВедущиеСписки = СвойстваСписка.Параметры.ВедущиеСписки;
		
		Если ВедущиеСписки.ПоЗначениямПолей.Количество() > 0
		 Или ВедущиеСписки.ПоКлючамДоступа.Количество() > 0
		 Или ВедущиеСписки.ПоЗначениямСГруппами.Количество() > 0 Тогда
			
			Контекст.ВедущиеСписки.Вставить(ПолноеИмя, ВедущиеСписки);
		КонецЕсли;
		
		НастроитьПараметрыШаблонов(СвойстваСписка, Контекст.ПараметрыШаблонов);
		
		Если СвойстваСписка.Уровень > 0 Тогда
			ИдентификаторСписка = Контекст.ИдентификаторыСписков.Получить(СвойстваСписка.ПолноеИмя);
			Контекст.УровниЗависимости.Вставить(ИдентификаторСписка, Уровень);
		КонецЕсли;
		
		Если СвойстваСписка.Параметры.СписокСДатой Тогда
			Контекст.СпискиСДатой.Вставить(СвойстваСписка.ПолноеИмя, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ХранимыеПараметрыОграниченияДляВидаПользователей.
Функция ПараметрыОграниченияДляВидаПользователей(ПолноеИмя, Контекст)
	
	ОписаниеОграничения = Контекст.ДополнительныйКонтекст.ОписанияОграничений.Получить(ПолноеИмя);
	
	Если ОписаниеОграничения = Неопределено Тогда
		СтруктураОграничения = Неопределено;
	Иначе
		СтруктураОграничения = РассчитаннаяСтруктураОграничения(ПолноеИмя,
			ОписаниеОграничения.Текст, ОписаниеОграничения.ВМодулеМенеджера, Контекст.ДляВнешнихПользователей);
	КонецЕсли;
	
	Возврат ПараметрыОграниченияПоСтруктуреОграничения(ПолноеИмя,
		СтруктураОграничения,
		Контекст.ДляВнешнихПользователей,
		Контекст.ОбщийКонтекст,
		Контекст.ДополнительныйКонтекст);
	
КонецФункции

// Для процедуры ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей.
Процедура УстановитьУровеньЗависимыхСписков(СвойстваВедущегоСписка, СвойстваСписков, ПредыдущиеВедущие,
			МаксимальныйУровень)
	
	ПредыдущиеВедущие.Добавить(СвойстваВедущегоСписка.ПолноеИмя);
	
	Для Каждого ЗависимыйСписок Из СвойстваВедущегоСписка.Зависимые Цикл
		Если ПредыдущиеВедущие.Найти(ЗависимыйСписок) <> Неопределено Тогда
			УчастникиЦикла = "";
			Индекс = ПредыдущиеВедущие.Количество() - 1;
			Пока Истина Цикл
				УчастникиЦикла = "- " + ПредыдущиеВедущие[Индекс] + Символы.ПС + УчастникиЦикла;
				Если ПредыдущиеВедущие[Индекс] = ЗависимыйСписок Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
			УчастникиЦикла = УчастникиЦикла + "(!) " + ЗависимыйСписок;
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ограничения доступа, заполненные в процедурах ПриЗаполненииОграниченияДоступа
				           |модулей менеджеров или общем модуле УправлениеДоступомПереопределяемый,
				           |содержат недопустимую циклическую зависимость при использовании функции
				           |ЧтениеОбъектаРазрешено или ИзменениеОбъектаРазрешено в одном или нескольких
				           |списках-участниках цикла:
				           |%1'"), УчастникиЦикла);
		КонецЕсли;
		СвойстваЗависимогоСписка = СвойстваСписков.Получить(ЗависимыйСписок);
		Если СвойстваЗависимогоСписка.Уровень < СвойстваВедущегоСписка.Уровень + 1 Тогда
			СвойстваЗависимогоСписка.Уровень = СвойстваВедущегоСписка.Уровень + 1;
			Если МаксимальныйУровень < СвойстваЗависимогоСписка.Уровень Тогда
				МаксимальныйУровень = СвойстваЗависимогоСписка.Уровень;
			КонецЕсли;
		КонецЕсли;
		Если Не СвойстваЗависимогоСписка.Ведущий Тогда
			СвойстваЗависимогоСписка.Обработан = Истина;
			Продолжить;
		КонецЕсли;
		УстановитьУровеньЗависимыхСписков(СвойстваЗависимогоСписка, СвойстваСписков, ПредыдущиеВедущие, МаксимальныйУровень);
	КонецЦикла;
	
	ПредыдущиеВедущие.Удалить(ПредыдущиеВедущие.Количество() - 1);
	СвойстваВедущегоСписка.Обработан = Истина;
	
КонецПроцедуры

// Для процедуры ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей.
Процедура НастроитьОптимизациюПоПолюВладельцу(СвойстваЗависимогоСписка, СвойстваСписков, Контекст)
	
	СвойстваЗависимогоСписка.ОграничениеПоВладельцуВозможно =
		СвойстваЗависимогоСписка.Параметры.ПолеВладельца <> Неопределено;
	
	СвойстваЗависимогоСписка.ОграничениеПоВладельцуВключено =
		     СвойстваЗависимогоСписка.ОграничениеПоВладельцуВозможно
		И Не СвойстваЗависимогоСписка.ОграничениеПоВладельцуОтключено;
	
	ЗависимыйСписокСОптимизацией = СвойстваЗависимогоСписка.ОграничениеПоВладельцуВключено;
	
	Для Каждого ВедущийСписок Из СвойстваЗависимогоСписка.Ведущие Цикл
		СвойстваВедущегоСписка = СвойстваСписков.Получить(ВедущийСписок);
		Если Не СвойстваВедущегоСписка.Зависимый Тогда
			Если ЗависимыйСписокСОптимизацией И СвойстваВедущегоСписка.Параметры.ОграничениеОтключено Тогда
				СвойстваВедущегоСписка.ЗаписыватьКлючиДоступа = Истина;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ЗависимыйСписокСОптимизацией Тогда
			Если СвойстваВедущегоСписка.Параметры.ПолеВладельца <> Неопределено Тогда
				Если СвойстваВедущегоСписка.Параметры.ТребуетсяОграничениеПоВладельцу Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Установлен признак оптимизации ограничения %1, но такая
						           |оптимизация невозможна, так как она требуется для зависимого списка ""%2"".'"),
						"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""),
						СвойстваЗависимогоСписка.ПолноеИмя);
					КонтекстОшибки = Новый Структура("СпискиСОграничением, ОписанияОграничений");
					КонтекстОшибки.Вставить("Список",                  СвойстваВедущегоСписка.ПолноеИмя);
					КонтекстОшибки.Вставить("ОписанияОграничений",     Контекст.ОбщийКонтекст.ОписанияОграничений);
					КонтекстОшибки.Вставить("ДляВнешнихПользователей", Контекст.ДляВнешнихПользователей);
					ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, КонтекстОшибки);
					ВызватьИсключение ТекстОшибки;
				Иначе
					СвойстваВедущегоСписка.ОграничениеПоВладельцуОтключено = Истина;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваВедущегоСписка.Параметры.ОграничениеОтключено Тогда
				СвойстваВедущегоСписка.ЗаписыватьКлючиДоступа = Истина;
			КонецЕсли;
		КонецЕсли;
		НастроитьОптимизациюПоПолюВладельцу(СвойстваВедущегоСписка, СвойстваСписков, Контекст);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей.
Процедура УстановитьСвойствоОграничения(ПолноеИмя, ИмяСвойства, ЗначениеСвойства, Контекст)
	
	Свойства = СвойстваОграниченияСписка(ПолноеИмя, Контекст.ДополнительныйКонтекст, Истина);
	
	Свойства[ИмяСвойства] = ЗначениеСвойства;
	
КонецПроцедуры

// Для процедур УстановитьСвойствоОграничения, ЗаполнитьЗапросыПроверкиПравЧтениеИзменение.
Функция СвойстваОграниченияСписка(ПолноеИмя, Контекст, ДобавлятьВКоллекцию = Ложь)
	
	Свойства = Контекст.СвойстваОграниченияСписков.Получить(ПолноеИмя);
	
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		Свойства.Вставить("ДоступЗапрещен", Ложь);
		Свойства.Вставить("ПолеВладельца",  Неопределено);
		Свойства.Вставить("ОпорныеПоля",    Неопределено);
		Свойства.Вставить("ИмяОтдельногоРегистраКлючей", "");
		Свойства.Вставить("ОграничениеЧерезКлючиДоступаПользователей", Ложь);
		Свойства.Вставить("ОграничениеЧерезКлючиДоступаПользователейИГруппДоступа", Ложь);
		Если ДобавлятьВКоллекцию Тогда
			Контекст.СвойстваОграниченияСписков.Вставить(ПолноеИмя, Свойства);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Для функции ХранимыеПараметрыОграниченияДоступа.
Процедура ДобавитьВедущиеСписки(ВедущиеСписки, ИмяСвойстваВидаПользователей, ЗависимыйСписок,
			ВедущиеСпискиЗависимогоСписка)
	
	Для Каждого ОписаниеВедущегоСписка Из ВедущиеСпискиЗависимогоСписка.ПоЗначениямПолей Цикл
		ВедущийСписок = ТекущиеСвойстваВедущегоСписка(ВедущиеСписки, ОписаниеВедущегоСписка.Ключ);
		ВедущийСписок.ЗависимыеСписки.Вставить(ЗависимыйСписок, Истина);
		
		Если ВедущийСписок.ПоЗначениямПолей = Неопределено Тогда
			ПоЗначениямПолей = Новый Структура;
			ПоЗначениямПолей.Вставить("ЭтоСсылочныйТип", ОписаниеВедущегоСписка.Значение.ЭтоСсылочныйТип);
			Если ПоЗначениямПолей.ЭтоСсылочныйТип Тогда
				ПоЗначениямПолей.Вставить("ПоляШапки", Новый Соответствие);
				ПоЗначениямПолей.Вставить("ТабличныеЧасти",  Новый Соответствие);
			Иначе
				ПоЗначениямПолей.Вставить("ПоляРегистра", Новый Структура);
				ПоЗначениямПолей.ПоляРегистра.Вставить("Поля",            Новый Массив);
				ПоЗначениямПолей.ПоляРегистра.Вставить("ЗависимыеСписки", Новый Соответствие);
			КонецЕсли;
			ВедущийСписок.ПоЗначениямПолей = ПоЗначениямПолей;
		КонецЕсли;
		
		ДобавитьПоляВедущегоСписка(ВедущийСписок.ПоЗначениямПолей,
			ОписаниеВедущегоСписка.Значение, ЗависимыйСписок, ИмяСвойстваВидаПользователей);
	КонецЦикла;
	
	ДобавитьВедущиеСпискиПоВидуЗависимости(ВедущиеСписки,
		ИмяСвойстваВидаПользователей, ЗависимыйСписок, ВедущиеСпискиЗависимогоСписка, "ПоКлючамДоступа");
	
	ДобавитьВедущиеСпискиПоВидуЗависимости(ВедущиеСписки,
		ИмяСвойстваВидаПользователей, ЗависимыйСписок, ВедущиеСпискиЗависимогоСписка, "ПоЗначениямСГруппами");
	
КонецПроцедуры

// Для процедуры ДобавитьВедущиеСписки.
Процедура ДобавитьВедущиеСпискиПоВидуЗависимости(ВедущиеСписки, ИмяСвойстваВидаПользователей,
			ЗависимыйСписок, ВедущиеСпискиЗависимогоСписка, ВидЗависимости)
	
	Для Каждого ОписаниеВедущегоСписка Из ВедущиеСпискиЗависимогоСписка[ВидЗависимости] Цикл
		ВедущийСписок = ТекущиеСвойстваВедущегоСписка(ВедущиеСписки, ОписаниеВедущегоСписка.Ключ);
		ВедущийСписок.ЗависимыеСписки.Вставить(ЗависимыйСписок, Истина);
		
		Если ВедущийСписок[ВидЗависимости] = Неопределено Тогда
			Свойства = Новый Структура;
			Свойства.Вставить("ДляПользователей",        Неопределено);
			Свойства.Вставить("ДляВнешнихПользователей", Неопределено);
			ВедущийСписок[ВидЗависимости] = Свойства;
		Иначе
			Свойства = ВедущийСписок[ВидЗависимости];
		КонецЕсли;
		
		Если Свойства[ИмяСвойстваВидаПользователей] = Неопределено Тогда
			Свойства[ИмяСвойстваВидаПользователей] = Новый Массив;
		КонецЕсли;
		
		Свойства[ИмяСвойстваВидаПользователей].Добавить(ЗависимыйСписок);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьВедущиеСписки.
Функция ТекущиеСвойстваВедущегоСписка(ВедущиеСписки, ПолноеИмя)
	
	ВедущийСписок = ВедущиеСписки.Получить(ПолноеИмя);
	Если ВедущийСписок = Неопределено Тогда
		ВедущийСписок = Новый Структура;
		ВедущийСписок.Вставить("ЗависимыеСписки",      Новый Соответствие);
		ВедущийСписок.Вставить("ПоЗначениямПолей",     Неопределено);
		ВедущийСписок.Вставить("ПоКлючамДоступа",      Неопределено);
		ВедущийСписок.Вставить("ПоЗначениямСГруппами", Неопределено);
		ВедущиеСписки.Вставить(ПолноеИмя, ВедущийСписок)
	КонецЕсли;
	
	Возврат ВедущийСписок;
	
КонецФункции

// Для процедуры ДобавитьВедущиеСписки.
Процедура ДобавитьПоляВедущегоСписка(ТекущиеПоля, ДобавляемыеПоля, ЗависимыйСписок,
			ИмяСвойстваВидаПользователей)
	
	Если Не ТекущиеПоля.ЭтоСсылочныйТип Тогда
		Для Каждого Поле Из ДобавляемыеПоля.ПоляШапки Цикл
			Если ТекущиеПоля.ПоляРегистра.Поля.Найти(Поле) = Неопределено Тогда
				ТекущиеПоля.ПоляРегистра.Поля.Добавить(Поле);
			КонецЕсли;
			Уточнение = ТекущиеПоля.ПоляРегистра.ЗависимыеСписки.Получить(ЗависимыйСписок);
			Если Уточнение = Неопределено Тогда
				Уточнение = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
				ТекущиеПоля.ПоляРегистра.ЗависимыеСписки.Вставить(ЗависимыйСписок, Уточнение);
			КонецЕсли;
			Уточнение[ИмяСвойстваВидаПользователей] = Истина;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из ДобавляемыеПоля.ПоляШапки Цикл
		ЗависимыеСписки = ТекущиеПоля.ПоляШапки.Получить(Поле);
		Если ЗависимыеСписки = Неопределено Тогда
			ЗависимыеСписки = Новый Соответствие;
			ТекущиеПоля.ПоляШапки.Вставить(Поле, ЗависимыеСписки);
		КонецЕсли;
		Уточнение = ЗависимыеСписки.Получить(ЗависимыйСписок);
		Если Уточнение = Неопределено Тогда
			Уточнение = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
			ЗависимыеСписки.Вставить(ЗависимыйСписок, Уточнение);
		КонецЕсли;
		Уточнение[ИмяСвойстваВидаПользователей] = Истина;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ДобавляемыеПоля.ТабличныеЧасти Цикл
		ОписаниеТабличнойЧасти = ТекущиеПоля.ТабличныеЧасти.Получить(ТабличнаяЧасть.Ключ);
		Если ОписаниеТабличнойЧасти = Неопределено Тогда
			ОписаниеТабличнойЧасти = Новый Структура;
			ОписаниеТабличнойЧасти.Вставить("Имя",  ТабличнаяЧасть.Ключ);
			ОписаниеТабличнойЧасти.Вставить("Поля", Новый Массив);
			ОписаниеТабличнойЧасти.Вставить("ЗависимыеСписки", Новый Соответствие);
			ТекущиеПоля.ТабличныеЧасти.Вставить(ТабличнаяЧасть.Ключ, ОписаниеТабличнойЧасти);
		КонецЕсли;
		Для Каждого Поле Из ТабличнаяЧасть.Значение Цикл
			Если ОписаниеТабличнойЧасти.Поля.Найти(Поле) = Неопределено Тогда
				ОписаниеТабличнойЧасти.Поля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
		Уточнение = ОписаниеТабличнойЧасти.ЗависимыеСписки.Получить(ЗависимыйСписок);
		Если Уточнение = Неопределено Тогда
			Уточнение = Новый Структура("ДляПользователей, ДляВнешнихПользователей", Ложь, Ложь);
			ОписаниеТабличнойЧасти.ЗависимыеСписки.Вставить(ЗависимыйСписок, Уточнение);
		КонецЕсли;
		Уточнение[ИмяСвойстваВидаПользователей] = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Для функции ХранимыеПараметрыОграниченияДоступа.
Процедура ДобавитьУровеньЗависимости(УровниЗависимости, ИмяСвойстваВидаПользователей, ЗависимыйСписок, Уровень)
	
	ОписаниеУровняЗависимости = УровниЗависимости.Получить(ЗависимыйСписок);
	Если ОписаниеУровняЗависимости = Неопределено Тогда
		ОписаниеУровняЗависимости = Новый Структура("ДляПользователей, ДляВнешнихПользователей", 0, 0);
		УровниЗависимости.Вставить(ЗависимыйСписок, ОписаниеУровняЗависимости);
	КонецЕсли;
	ОписаниеУровняЗависимости[ИмяСвойстваВидаПользователей] = Уровень;
	
КонецПроцедуры

// Для процедуры ДобавитьХранимыеПараметрыОграниченияДляВидаПользователей.
Процедура НастроитьПараметрыШаблонов(СвойстваСписка, ПараметрыШаблонов)
	
	Параметры = СвойстваСписка.Параметры;
	Если Параметры.ДоступЗапрещен Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОграничениеЧтенияОтключено Тогда
		ПараметрыШаблонов.СпискиСОтключеннымОграничениемЧтения =
			ПараметрыШаблонов.СпискиСОтключеннымОграничениемЧтения
				+ СвойстваСписка.ПолноеИмя + Символы.ПС;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ПолеВладельца <> Неопределено Тогда
		Поля = ":" + Параметры.ПолеВладельца.Имя;
		
	ИначеЕсли Параметры.ЭтоСсылочныйТип Тогда
		Поля = ":";
	Иначе
		ОпорныеПоля = Параметры.ОпорныеПоля;
		Если ЗначениеЗаполнено(Параметры.ИмяОтдельногоРегистраКлючей) Тогда
			Поля = "КлючиДоступаКРегистру" + СтрРазделить(СвойстваСписка.ПолноеИмя, ".")[1];
		Иначе
			Поля = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПредопределенногоИдентификатораОбъектаМетаданных(
				СвойстваСписка.ПолноеИмя);
		КонецЕсли;
		Поля = ":[" + Поля + "]";
		Для Каждого ИмяПоля Из ОпорныеПоля.Все Цикл
			Поля = Поля + ":" + ИмяПоля;
			Если ОпорныеПоля.Используемые.Найти(ИмяПоля) = Неопределено Тогда
				ПараметрыШаблонов.СпискиСОтключеннымОграничениемПоПолям =
					ПараметрыШаблонов.СпискиСОтключеннымОграничениемПоПолям
						+ СвойстваСписка.ПолноеИмя + ":" + ИмяПоля + ";" + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		НомерПустогоПоля = ОпорныеПоля.Все.Количество() + 1;
		Для Номер = НомерПустогоПоля По ОпорныеПоля.МаксимальноДопустимоеКоличество Цикл
			Поля = Поля + ":";
		КонецЦикла;
		Для Номер = ОпорныеПоля.МаксимальноеКоличество + 1 По ОпорныеПоля.МаксимальноДопустимоеКоличество Цикл
			ПараметрыШаблонов.СпискиССокращеннымНаборомПолейВРегистрахКлючей =
				ПараметрыШаблонов.СпискиССокращеннымНаборомПолейВРегистрахКлючей
					+ СвойстваСписка.ПолноеИмя + ":Поле" + Номер + ";" + Символы.ПС;
		КонецЦикла;
	КонецЕсли;
	
	Если СвойстваСписка.КлючиДоступаПользователейИГруппДоступа Тогда
		ИмяПараметра = "СпискиСОграничениемЧерезКлючиДоступаПользователейИГруппДоступа";
		
	ИначеЕсли СвойстваСписка.КлючиДоступаПользователей Тогда
		ИмяПараметра = "СпискиСОграничениемЧерезКлючиДоступаПользователей";
	Иначе
		ИмяПараметра = "СпискиСОграничениемЧерезКлючиДоступаГруппДоступа";
	КонецЕсли;
	
	ПараметрыШаблонов[ИмяПараметра] = ПараметрыШаблонов[ИмяПараметра]
		+ СвойстваСписка.ПолноеИмя + Поля + ";" + Символы.ПС;
	
КонецПроцедуры

// Для процедуры УстановитьВерсиюПараметров, и для функции ХранимыеПараметрыОграниченияДоступа.
Функция СтруктураХранимыхПараметровШаблонов(Значения = Неопределено)
	
	ХранимыеПараметрыШаблонов = Новый Структура;
	ХранимыеПараметрыШаблонов.Вставить("ВерсияСтруктурыКэша", ВерсияСтруктурыКэша());
	ХранимыеПараметрыШаблонов.Вставить("ВерсииШаблонов",      ВерсииШаблоновОграниченияДоступа());
	ХранимыеПараметрыШаблонов.Вставить("ПараметрыШаблонов",   СтруктураПараметровШаблонов());
	
	Если ТипЗнч(Значения)                     = Тип("ФиксированнаяСтруктура")
	   И ТипЗнч(Значения.ВерсияСтруктурыКэша) = Тип("Строка")
	   И ТипЗнч(Значения.ВерсииШаблонов)      = Тип("Строка")
	   И ТипЗнч(Значения.ПараметрыШаблонов)   = Тип("ФиксированнаяСтруктура") Тогда
		
		ЗаполнитьЗначенияСвойств(ХранимыеПараметрыШаблонов, Значения);
	КонецЕсли;
	
	Возврат ХранимыеПараметрыШаблонов;
	
КонецФункции

// Для процедуры УстановитьВерсиюПараметров и для функций ХранимыеПараметрыОграниченияДоступа,
// СтруктураХранимыхПараметровШаблонов.
Функция СтруктураПараметровШаблонов(Значения = Неопределено)
	
	ПараметрыШаблонов = Новый Структура;
	ПараметрыШаблонов.Вставить("СпискиСОграничениемЧерезКлючиДоступаГруппДоступа", "");
	ПараметрыШаблонов.Вставить("СпискиСОграничениемЧерезКлючиДоступаПользователей", "");
	ПараметрыШаблонов.Вставить("СпискиСОграничениемЧерезКлючиДоступаПользователейИГруппДоступа", "");
	ПараметрыШаблонов.Вставить("СпискиСОтключеннымОграничениемПоПолям", "");
	ПараметрыШаблонов.Вставить("СпискиСОтключеннымОграничениемЧтения",  "");
	ПараметрыШаблонов.Вставить("СпискиССокращеннымНаборомПолейВРегистрахКлючей", "");
	
	Если ТипЗнч(Значения) <> Тип("ФиксированнаяСтруктура")
	 Или Значения.Количество() <> ПараметрыШаблонов.Количество() Тогда
		
		Возврат ПараметрыШаблонов;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыШаблонов Цикл
		Если Не Значения.Свойство(КлючИЗначение.Ключ)
		 Или Не ТипЗнч(Значения[КлючИЗначение.Ключ]) = ТипЗнч(КлючИЗначение.Значение) Тогда
			Возврат ПараметрыШаблонов;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ПараметрыШаблонов, Значения);
	
	Возврат ПараметрыШаблонов;
	
КонецФункции

#КонецОбласти

#Область ПараметрыОграниченияДоступаДляСпискаОтдельно

// Основная функция области, возвращающая параметры ограничения доступа
// для вида пользователей списка без учета зависимости от других списков,
// как по ключам доступа, так и по наличию видов доступа Пользователи и ВнешниеПользователи.
//
Функция ПараметрыОграниченияПоСтруктуреОграничения(Список, СтруктураОграничения,
			ДляВнешнихПользователей, ОбщийКонтекст, ДополнительныйКонтекст)
	
	ВедущиеСписки = Новый Структура;
	// Списки с полями, от которых зависит ограничение доступа (для регистрации заданий обновления).
	ВедущиеСписки.Вставить("ПоЗначениямПолей", Новый Соответствие);
	// Списки от ключей доступа которых зависит ограничение доступа (для установки параметров сеанса и
	// регистрации заданий обновления).
	ВедущиеСписки.Вставить("ПоКлючамДоступа",  Новый Соответствие);
	// Списки значений доступа с группами, от которых зависит ограничение доступа (для регистрации заданий обновления).
	ВедущиеСписки.Вставить("ПоЗначениямСГруппами", Новый Соответствие);
	
	Результат = Новый Структура;
	// Полное имя таблицы объекта метаданных.
	Результат.Вставить("Список", Список);
	// Вид пользователей, для которых предназначены параметры.
	Результат.Вставить("ДляВнешнихПользователей", ДляВнешнихПользователей);
	// Хеш-сумма параметров ограничения доступа для отслеживания их изменения.
	Результат.Вставить("Версия", "");
	// Списки с полями от которых зависит ограничение доступа.
	Результат.Вставить("ВедущиеСписки", ВедущиеСписки);
	// Истина, если текст ограничения "ГДЕ ЛОЖЬ", а также не указан для внешних пользователей.
	Результат.Вставить("ДоступЗапрещен", ДляВнешнихПользователей);
	// Истина, если текст ограничения не указан или указан, но ограничение отключено
	// из-за отключения использования видов доступа, задействованных в нем.
	Результат.Вставить("ОграничениеОтключено", Не ДляВнешнихПользователей);
	// Истина, если текст ограничения чтения не указан или указан, но ограничение отключено
	// из-за отключения использования видов доступа, задействованных в нем.
	Результат.Вставить("ОграничениеЧтенияОтключено", Не ДляВнешнихПользователей);
	
	// Поле владельца, когда возможно ограничение только по объекту-владельцу.
	Результат.Вставить("ПолеВладельца");
	// Признак оптимизации, указанный разработчиком рядом с текстом ограничения.
	Результат.Вставить("ТребуетсяОграничениеПоВладельцу", Ложь);
	// Признак использования оптимизации, вычисленный на втором проходе графа.
	Результат.Вставить("ИспользуетсяОграничениеПоВладельцу", Ложь);
	
	Результат.Вставить("ИмяОтдельногоРегистраКлючей", ""); // Для регистров.
	Результат.Вставить("ОпорныеПоля"); // Для регистров.
	
	// Число, описывающее реквизиты, используемые в ключе.
	Результат.Вставить("СоставПолей");
	
	// Установлено, если ограничение чтения отличается от "ГДЕ ИСТИНА".
	Результат.Вставить("ЕстьОграничениеЧтения", Ложь);
	// Установлено, если ограничение изменения отличается от "ГДЕ ИСТИНА".
	Результат.Вставить("ЕстьОграничениеИзменения", Ложь);
	
	// Установлено, если проверяются значения Пользователь или ГруппаПользователей
	// для функций ЗначениеРазрешено или ЭтоАвторизованныйПользователь.
	Результат.Вставить("ЕстьОграничениеПоВидуДоступаПользователи", Ложь);
	// Установлено, если проверяются значения ВнешнийПользователь или ГруппаВнешнихПользователей
	// для функций ЗначениеРазрешено или ЭтоАвторизованныйПользователь.
	Результат.Вставить("ЕстьОграничениеПоВидуДоступаВнешниеПользователи", Ложь);
	
	ИмяКоллекцииТипа = "";
	Результат.Вставить("ЭтоСсылочныйТип", ЭтоСсылочныйТипТаблицы(Список, ИмяКоллекцииТипа));
	Результат.Вставить("СписокСДатой",
		    ИмяКоллекцииТипа = "Документы"
		Или ИмяКоллекцииТипа = "БизнесПроцессы"
		Или ИмяКоллекцииТипа = "Задачи");
	
	Контекст = Новый Структура;
	Результат.Вставить("Контекст", Контекст);
	
	Для Каждого КлючИЗначение Из ОбщийКонтекст Цикл
		Контекст.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ДополнительныйКонтекст Цикл
		Контекст.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Контекст.Вставить("Список",                  Список);
	Контекст.Вставить("ДляВнешнихПользователей", ДляВнешнихПользователей);
	Контекст.Вставить("ЭтоСсылочныйТип",         Результат.ЭтоСсылочныйТип);
	Контекст.Вставить("СписокСДатой",            Результат.СписокСДатой);
	Контекст.Вставить("ИмяКоллекцииТипа",        ИмяКоллекцииТипа);
	Контекст.Вставить("СвойстваВерсии",          Новый Массив);
	
	ДобавитьСвойствоВерсии(Контекст, Контекст, "Список");
	ДобавитьСвойствоВерсии(Контекст, Контекст, "ДляВнешнихПользователей");
	
	ОписаниеОграничения = Контекст.ОписанияОграничений.Получить(Контекст.Список);
	Если ОписаниеОграничения = Неопределено Тогда
		ОписаниеОграничения = Новый Структура("Текст", "");
	КонецЕсли;
	ДобавитьСвойствоВерсии(Контекст, ОписаниеОграничения, "Текст");
	
	ДобавитьСвойствоВерсии(Контекст, Контекст, "ЭтоСсылочныйТип");
	ДобавитьСвойствоВерсии(Контекст, Контекст, "СписокСДатой");
	
	// Опорные поля не требуется для ссылочных типов данных (всегда Ссылка).
	ЗаполнитьНовоеОписаниеОпорныхПолей(Результат, Контекст);
	
	Свойства = СвойстваОграниченияСписка(Контекст.Список, Контекст, Ложь);
	Если Свойства <> Неопределено Тогда
		Результат.ИспользуетсяОграничениеПоВладельцу = Свойства.ПолеВладельца <> Неопределено;
	КонецЕсли;
	Контекст.Вставить("ИспользуетсяОграничениеПоВладельцу",
		Результат.ИспользуетсяОграничениеПоВладельцу);
	
	Если СтруктураОграничения = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДоступЗапрещен = Ложь;
	Результат.ОграничениеОтключено = Истина;
	Результат.ОграничениеЧтенияОтключено = Истина;
	
	ЗаполнитьНаличиеОграниченияПоПравам(Контекст, Результат, СтруктураОграничения);
	
	Контекст.Вставить("СтруктураОграничения",              СтруктураОграничения);
	Контекст.Вставить("ВедущиеСпискиПоЗначениямПолей",     Новый Соответствие);
	Контекст.Вставить("ВедущиеСпискиПоКлючамДоступа",      Новый Соответствие);
	Контекст.Вставить("ВедущиеСпискиПоЗначениямСГруппами", Новый Соответствие);
	
	ЗаполнитьСвойстваПолей(Контекст);
	ЗаполнитьОграничениеПоОбъектуВладельцу(Контекст, Результат);
	УдалитьПоляНеиспользуемыхВидовДоступа(Контекст);
	ЗаполнитьНаличиеОграниченияПоВидуДоступаПользователи(Результат, Контекст.СвойстваПолей);
	ЗаполнитьНаличиеОграниченияЧтения(Результат, Контекст.СвойстваПолей);
	
	Если Контекст.СвойстваПолей.Количество() = 0 Тогда // Ограничение отключено.
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОграничениеОтключено = Ложь;
	
	Контекст.Вставить("ГруппыПолей");
	Контекст.Вставить("ПсевдонимыТабличныхЧастейОбъекта");
	Контекст.Вставить("ГруппыДополнительныхТаблиц");
	Контекст.Вставить("КоличествоТабличныхЧастейКлюча");
	
	ЗаполнитьГруппыПолейИДополнительныхТаблиц(Контекст);
	
	Результат.СоставПолей = Контекст.СоставПолей;
	
	Если Не Контекст.ЭтоСсылочныйТип Тогда
		Результат.ИмяОтдельногоРегистраКлючей = Контекст.ИмяОтдельногоРегистраКлючей;
	КонецЕсли;
	
	ВедущиеСписки.ПоЗначениямПолей     = Контекст.ВедущиеСпискиПоЗначениямПолей;
	ВедущиеСписки.ПоКлючамДоступа      = Контекст.ВедущиеСпискиПоКлючамДоступа;
	ВедущиеСписки.ПоЗначениямСГруппами = Контекст.ВедущиеСпискиПоЗначениямСГруппами;
	
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	СтрокаСвойствВерсии = СтрСоединить(Контекст.СвойстваВерсии, Символы.ПС);
	ХешированиеДанных.Добавить(СтрокаСвойствВерсии);
	Результат.Версия = Base64Строка(ХешированиеДанных.ХешСумма);
	
	Возврат Результат;
	
КонецФункции

// Для процедуры УдалитьПоляНеиспользуемыхВидовДоступа и функции ГруппыДополнительныхТаблиц.
Процедура ДобавитьСвойстваВерсии(Контекст, Структура, ИменаПолей = "")
	
	Если ЗначениеЗаполнено(ИменаПолей) Тогда
		СохраняемаяСтруктура = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(СохраняемаяСтруктура, Структура);
	Иначе
		СохраняемаяСтруктура = Структура;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из СохраняемаяСтруктура Цикл
		СписокЗначений.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ)
	КонецЦикла;
	СписокЗначений.СортироватьПоПредставлению();
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		ДобавитьЭлементВерсии(Контекст, ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПараметрыОграниченияПоСтруктуреОграничения.
Процедура ДобавитьСвойствоВерсии(Контекст, Структура, ИмяПоля)
	
	ДобавитьЭлементВерсии(Контекст, ИмяПоля, Структура[ИмяПоля]);
	
КонецПроцедуры

// Для процедур ДобавитьСвойстваВерсии, ДобавитьСвойствоВерсии.
Процедура ДобавитьЭлементВерсии(Контекст, ИмяПоля, Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Контекст.СвойстваВерсии.Добавить(ИмяПоля + " = " + Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Контекст.СвойстваВерсии.Добавить(ИмяПоля + " = " + Формат(Значение, "ЧГ="));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево")
	      Или ТипЗнч(Значение) = Тип("Неопределено") Тогда
		
		Контекст.СвойстваВерсии.Добавить(ИмяПоля + " = " + Строка(Значение));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ОписаниеТипов")
	      Или ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Контекст.СвойстваВерсии.Добавить(ИмяПоля + " = " + СтрокаДанныхДляХеширования(Значение));
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип данных для версии ограничения доступа.'");
	КонецЕсли;
	
КонецПроцедуры

// Для функции ПараметрыОграниченияПоСтруктуреОграничения и формы ОбновлениеДоступаРучноеУправление.
Функция ЭтоСсылочныйТипТаблицы(ПолноеИмя, ИмяКоллекцииТипа = "") Экспорт
	
	СинтаксисЯзыка = УправлениеДоступомСлужебныйПовтИсп.СинтаксисЯзыка();
	СоставИмени = СтрРазделить(ПолноеИмя, ".", Ложь);
	
	ТипТаблицы = СинтаксисЯзыка.ТипыТаблиц.ПоИменам.Получить(ВРег(СоставИмени[0]));
	Если ТипТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяКоллекцииТипа = ТипТаблицы.ИмяКоллекции;
	
	Возврат ТипТаблицы.ЭтоСсылочныйТип;
	
КонецФункции

// Для функции ПараметрыОграниченияПоСтруктуреОграничения.
Процедура ЗаполнитьНовоеОписаниеОпорныхПолей(Результат, Контекст)
	
	ОпорныеПоля = Новый Структура;
	ОпорныеПоля.Вставить("Список",           Новый СписокЗначений);
	ОпорныеПоля.Вставить("Все",              Новый Массив);
	ОпорныеПоля.Вставить("ТипыВсех",         Новый Массив);
	ОпорныеПоля.Вставить("Используемые",     Новый Массив);
	ОпорныеПоля.Вставить("ТипыИспользуемых", Новый Массив);
	ОпорныеПоля.Вставить("МаксимальноеКоличество", 0);
	ОпорныеПоля.Вставить("МаксимальноДопустимоеКоличество", 0);
	
	Контекст.Вставить("ОпорныеПоля", ОпорныеПоля);
	
	Если Контекст.ЭтоСсылочныйТип Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОтдельногоРегистраКлючей = "КлючиДоступаКРегистру" + СтрРазделить(Контекст.Список, ".")[1];
	Если Метаданные.РегистрыСведений.Найти(ИмяОтдельногоРегистраКлючей) = Неопределено Тогда
		ИмяОтдельногоРегистраКлючей = "";
	КонецЕсли;
	Контекст.Вставить("ИмяОтдельногоРегистраКлючей", ИмяОтдельногоРегистраКлючей);
	
	ОпорныеПоля.МаксимальноеКоличество =
		УправлениеДоступомСлужебныйПовтИсп.КоличествоОпорныхПолейРегистра(ИмяОтдельногоРегистраКлючей);
	
	ОпорныеПоля.МаксимальноДопустимоеКоличество =
		УправлениеДоступомСлужебныйПовтИсп.МаксимальноеКоличествоОпорныхПолейРегистра();
	
	Если ОпорныеПоля.МаксимальноеКоличество > ОпорныеПоля.МаксимальноДопустимоеКоличество Тогда
		// Превышение количества опорных полей в отдельном регистре.
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Количество опорных полей в регистре сведений %1
			           |превышает максимально допустимое количество: %2'"),
			?(ИмяОтдельногоРегистраКлючей = "", "КлючиДоступаКРегистрам", ИмяОтдельногоРегистраКлючей),
			ОпорныеПоля.МаксимальноДопустимоеКоличество);
	КонецЕсли;
	
	ДобавитьСвойствоВерсии(Контекст, ОпорныеПоля, "МаксимальноеКоличество");
	
	Результат.ОпорныеПоля = Новый Структура("Все, ТипыВсех, Используемые, ТипыИспользуемых,
	|МаксимальноеКоличество, МаксимальноДопустимоеКоличество");
	ЗаполнитьЗначенияСвойств(Результат.ОпорныеПоля, Контекст.ОпорныеПоля);
	
КонецПроцедуры

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьНаличиеОграниченияПоПравам(Контекст, Результат, СтруктураОграничения)
	
	Результат.ЕстьОграничениеЧтения =
		ЗначениеЗаполнено(СтруктураОграничения.ОграничениеЧтения)
		И (    СтруктураОграничения.ОграничениеЧтения.Узел <> "Константа"
		   Или СтруктураОграничения.ОграничениеЧтения.Значение <> Истина);
	
	Результат.ЕстьОграничениеИзменения =
		ЗначениеЗаполнено(СтруктураОграничения.ОграничениеИзменения)
		И (    СтруктураОграничения.ОграничениеИзменения.Узел <> "Константа"
		   Или СтруктураОграничения.ОграничениеИзменения.Значение <> Истина);
	
	ДобавитьСвойствоВерсии(Контекст, Результат, "ЕстьОграничениеЧтения");
	ДобавитьСвойствоВерсии(Контекст, Результат, "ЕстьОграничениеИзменения");
	
КонецПроцедуры

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьОграничениеПоОбъектуВладельцу(Контекст, Результат)
	
	ОграничениеПоВладельцу = Контекст.СпискиСОграничениемПоВладельцу.Получить(Контекст.Список);
	Если ТипЗнч(ОграничениеПоВладельцу) = Тип("Булево") И Не ОграничениеПоВладельцу Тогда
		Возврат;
	КонецЕсли;

	ТребуетсяОграничениеПоВладельцу = ?(ТипЗнч(ОграничениеПоВладельцу) = Тип("Булево"),
		ОграничениеПоВладельцу, Ложь);
	
	Результат.ТребуетсяОграничениеПоВладельцу = ТребуетсяОграничениеПоВладельцу;
	ПолеВладельца = Новый Структура("Имя, ИзменениеКакЧтение", "", Ложь);
	
	ОграничениеЧтения = Контекст.СтруктураОграничения.ОграничениеЧтения;
	Если Результат.ЕстьОграничениеЧтения Тогда
		
		Если ОграничениеЧтения.Узел <> "ЧтениеОбъектаРазрешено" Тогда
			Если ТребуетсяОграничениеПоВладельцу Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен признак оптимизации ограничения %1,
					           |но ограничение указано и не представлено одной функцией ЧтениеОбъектаРазрешено'"),
					"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""));
				ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Не ФункцияБезУточненийТиповСПолемБезВложений(ОграничениеЧтения) Тогда
			Если ТребуетсяОграничениеПоВладельцу Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен признак оптимизации ограничения %1,
					           |но параметры функции ЧтениеОбъектаРазрешено не представлены
					           |только одним параметром - полем владельцем без других параметров'"),
					"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""));
				ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПолеВладельца.Имя = ОграничениеЧтения.Поле.Имя;
	КонецЕсли;
	
	ОграничениеИзменения = Контекст.СтруктураОграничения.ОграничениеИзменения;
	Если Результат.ЕстьОграничениеИзменения Тогда
		
		Если ОграничениеИзменения.Узел <> "ЧтениеОбъектаРазрешено"
		   И ОграничениеИзменения.Узел <> "ИзменениеОбъектаРазрешено" Тогда
			
			Если ТребуетсяОграничениеПоВладельцу Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен признак оптимизации ограничения %1,
					           |но ограничение указано и не представлено одной функцией
					           |ЧтениеОбъектаРазрешено или ИзменениеОбъектаРазрешено'"),
					"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""));
				ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если Не ФункцияБезУточненийТиповСПолемБезВложений(ОграничениеИзменения) Тогда
			Если ТребуетсяОграничениеПоВладельцу Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен признак оптимизации ограничения %1,
					           |но параметры функции %2 не представлены
					           |только одним параметром - полем владельцем без других параметров'"),
					"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""),
					ОграничениеИзменения.Узел);
				ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПолеВладельца.Имя = "" Тогда
			ПолеВладельца.Имя = ОграничениеИзменения.Поле.Имя;
			
		ИначеЕсли ПолеВладельца.Имя <> ОграничениеИзменения.Поле.Имя Тогда
			Если ТребуетсяОграничениеПоВладельцу Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Установлен признак оптимизации ограничения %1,
					           |но поле владельца не совпадает в ограничениях чтения и изменения'"),
					"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""),
					ОграничениеИзменения.Узел);
				ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
				ВызватьИсключение ТекстОшибки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПолеВладельца.ИзменениеКакЧтение =
			ОграничениеИзменения.Узел <> "ИзменениеОбъектаРазрешено";
	Иначе
		ПолеВладельца.ИзменениеКакЧтение = Истина;
	КонецЕсли;
	
	СвойстваПолей = Контекст.СвойстваПолей;
	
	Если СвойстваПолей.Количество() <> 1 Тогда
		Если ТребуетсяОграничениеПоВладельцу И СвойстваПолей.Количество() <> 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установлен признак оптимизации ограничения %1,
				           |но количество полей, используемых в ограничении более одного.'"),
				"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""));
			ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СвойстваПоля = СвойстваПолей[0];
	
	Если СвойстваПоля.ТипКонечногоПоля.Типы().Количество()
	  <> СвойстваПоля.ТипыСохраненияКлючейДоступа.Количество() Тогда
		
		НекорректныеТипы = Новый Массив;
		Для Каждого Тип Из СвойстваПоля.ТипКонечногоПоля.Типы() Цикл
			Если СвойстваПоля.ТипыСохраненияКлючейДоступа.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НекорректныеТипы.Добавить(ИмяТипаНаЯзыкеЗапросов(Тип));
		КонецЦикла;
		Если ТребуетсяОграничениеПоВладельцу Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Установлен признак оптимизации ограничения %1,
				           |но для следующих типов невозможно записать ключи доступа:
				           |%2'"),
				"ПоВладельцуБезЗаписиКлючейДоступа" + ?(Контекст.ДляВнешнихПользователей, "ДляВнешнихПользователей", ""),
				СтрСоединить(НекорректныеТипы, Символы.ПС));
			ТекстОшибки = ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст);
			ВызватьИсключение ТекстОшибки;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ПолеВладельца = ПолеВладельца;
	
	ДобавитьСвойствоВерсии(Контекст, ПолеВладельца, "ИзменениеКакЧтение");
	ДобавитьСвойствоВерсии(Контекст, ПолеВладельца, "Имя");
	
КонецПроцедуры

// Для функции ЗаполнитьОграничениеПоОбъектуВладельцу и процедуры НастроитьОптимизациюПоПолюВладельцу.
Функция ТекстОшибкиСЗаголовком(ТекстОшибки, Контекст)
	
	ОписаниеОшибок = Новый Структура;
	ОписаниеОшибок.Вставить("ЕстьОшибки", Истина);
	ОписаниеОшибок.Вставить("Ошибки", Новый Массив(1));
	ОписаниеОшибок.Вставить("ТекстОшибок", ТекстОшибки);
	ОписаниеОшибок.Вставить("Ограничение", "");
	ОписаниеОшибок.Вставить("Дополнение", "");
	
	ОписаниеОграничения = Контекст.ОписанияОграничений.Получить(Контекст.Список);
	
	ОписаниеОшибок.Ограничение =
		ПронумерованныйТекстОграниченияСОтметкамиОшибок(ОписаниеОграничения.Текст,
			Новый Массив, СтрДлина(Формат(СтрЧислоСтрок(ОписаниеОграничения.Текст), "ЧГ=")));
	
	Возврат СокрЛП(ТекстОшибокДляВызоваИсключения(Контекст.Список,
		ОписаниеОшибок, Контекст.ДляВнешнихПользователей, ОписаниеОграничения.ВМодулеМенеджера));
	
КонецФункции

// Для процедуры ЗаполнитьОграничениеПоОбъектуВладельцу.
Функция ФункцияБезУточненийТиповСПолемБезВложений(Ограничение)
	
	Если Ограничение.Типы.Количество() <> 0
	 Или Ограничение.УточненияСравнения.Количество() <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Поле = Ограничение.Поле;
	
	Возврат Не ЗначениеЗаполнено(Поле.Выразить)
	      И Не ЗначениеЗаполнено(Поле.Вложение)
	      И Не ЗначениеЗаполнено(Поле.ЕстьNull);
	
КонецФункции

// Для функции ПараметрыОграниченияДоступа.
Процедура УдалитьПоляНеиспользуемыхВидовДоступа(Контекст)
	
	СвойстваПолей = Контекст.СвойстваПолей;
	
	Индекс = СвойстваПолей.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СвойстваПоля = СвойстваПолей.Получить(Индекс);
		
		Если СвойстваПоля.ТипКонечногоПоля.Типы().Количество()
				= СвойстваПоля.НеиспользуемыеТипыЗначенийДоступа.Количество() Тогда
			
			СвойстваПолей.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		УстановитьИспользованиеОпорногоПоля(Контекст.ОпорныеПоля, СвойстваПоля);
		ДобавитьСвойстваВерсии(Контекст, СвойстваПоля,
		"ЕстьУточнениеNull,
		|ЕстьУточнениеНеопределено,
		|ИмяПоляДляЗапроса,
		|НесколькоГруппЗначений,
		|ТипКонечногоПоля,
		|ТипыСохраненияГруппЗначений,
		|ТипыСохраненияЗначений,
		|ТипыСохраненияКлючейДоступа,
		|ТипыСохраненияПусто,
		|ТипыСохраненияПустойСсылки,
		|ТипыСохраненияТипаЗапрещенный,
		|ТипыСохраненияТипов,
		|ТипыСохраненияТиповКонфигурации,
		|ТипыСохраненияТиповПростых,
		|ТипыСохраненияТиповРасширений,
		|ТипыСтрокой");
	КонецЦикла;
	
КонецПроцедуры

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьНаличиеОграниченияПоВидуДоступаПользователи(Результат, СвойстваПолей)
	
	Для Каждого СвойстваПоля Из СвойстваПолей Цикл
		ОписаниеТипов = СвойстваПоля.ТипКонечногоПоля;
		
		Если ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.Пользователи"))
		 Или ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.ГруппыПользователей")) Тогда
			
			Результат.ЕстьОграничениеПоВидуДоступаПользователи = Истина;
		КонецЕсли;
		Если ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.ВнешниеПользователи"))
		 Или ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.ГруппыВнешнихПользователей")) Тогда
			
			Результат.ЕстьОграничениеПоВидуДоступаВнешниеПользователи = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьНаличиеОграниченияЧтения(Результат, СвойстваПолей)
	
	Для Каждого СвойстваПоля Из СвойстваПолей Цикл
		Если СвойстваПоля.Чтение Тогда
			Результат.ОграничениеЧтенияОтключено = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьГруппыПолейИДополнительныхТаблиц(Контекст)
	
	// Поля шапки (начинаются от шапки - группировка по пустому псевдониму, если нет имени табличной части).
	// Поля каждой ТЧ (начинаются от табличной части - группировка по имени табличной части).
	// Поля группы связанных дополнительных таблиц (начинаются от экземпляра доп. таблицы - группировка
	// по псевдониму, но если одна таблица ссылается на другую в соединении, тогда образуется группа таблиц).
	
	НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа = 0;
	НомерПоследнейТабличнойЧастиОбъекта = 0;
	НомераТабличныхЧастейОбъекта = Новый Соответствие;
	
	Для Каждого СвойстваПоля Из Контекст.СвойстваПолей Цикл
		Если СвойстваПоля.ПсевдонимТаблицы = "ТекущийСписок"
		   И СвойстваПоля.НесколькоГруппЗначений Тогда
			
			НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа =
				НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа + 1;
			
		ИначеЕсли СвойстваПоля.ПсевдонимТаблицы <> "ТекущийСписок"
		        И СтрНачинаетсяС(СвойстваПоля.ПсевдонимТаблицы, "ТекущийСписок")
			    И НомераТабличныхЧастейОбъекта.Получить(СвойстваПоля.ПсевдонимТаблицы) = Неопределено Тогда
			
			НомерПоследнейТабличнойЧастиОбъекта = НомерПоследнейТабличнойЧастиОбъекта + 1;
			НомераТабличныхЧастейОбъекта.Вставить(СвойстваПоля.ПсевдонимТаблицы, НомерПоследнейТабличнойЧастиОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	РазмерностьКлючаДоступа = УправлениеДоступомСлужебныйПовтИсп.РазмерностьКлючаДоступа();
	
	КоличествоТабличныхЧастейКлючаДляРеквизитовШапкиОбъекта = Цел(
		(НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа
			+ РазмерностьКлючаДоступа.КоличествоРеквизитовТабличнойЧасти - 1)
		/ РазмерностьКлючаДоступа.КоличествоРеквизитовТабличнойЧасти);
	
	ГруппыДополнительныхТаблиц = ГруппыДополнительныхТаблиц(Контекст);
	КоличествоТабличныхЧастейКлюча = НомерПоследнейТабличнойЧастиОбъекта
		+ ГруппыДополнительныхТаблиц.ТаблицыПоГруппам.Количество()
		+ КоличествоТабличныхЧастейКлючаДляРеквизитовШапкиОбъекта;
	
	ЗавершитьПодготовкуОпорныхПолей(Контекст);
	
	Если КоличествоТабличныхЧастейКлюча > РазмерностьКлючаДоступа.КоличествоТабличныхЧастей Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ограничении доступа списка %1
			           |количество полей, требующих отдельных табличных частей в ключе доступа,
			           |более, чем количество доступных табличных частей в ключе доступа.
			           |
			           |К таким полям относятся:
			           |- поля табличных частей,
			           |- поля дополнительных таблиц, присоединенных к списку,
			           |- поля шапки, у которых значение доступа может иметь более одной группы значений доступа.'"),
			Контекст.Список);
	КонецЕсли;
	
	Если Не Контекст.ЭтоСсылочныйТип
	   И Контекст.ОпорныеПоля.Все.Количество() > Контекст.ОпорныеПоля.МаксимальноеКоличество Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ограничении доступа списка %1
			           |количество полей списка, используемых в ограничении доступа,
			           |превышает максимально допустимое количество опорных полей: %2.'"),
			Контекст.Список,
			Контекст.ОпорныеПоля.МаксимальноеКоличество);
	КонецЕсли;
	
	ГруппыПолей = Новый Соответствие;
	ПсевдонимыТабличныхЧастейОбъекта = Новый Соответствие;
	НомерПоследнегоРеквизитаШапки = 0;
	НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа = 0;
	
	Для Каждого СвойстваПоля Из Контекст.СвойстваПолей Цикл
		Если СвойстваПоля.ПсевдонимТаблицы = "ТекущийСписок" Тогда
			
			Если СвойстваПоля.НесколькоГруппЗначений Тогда
				НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа =
					НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа + 1;
				
				НомерТабличнойЧастиКлюча = Цел(НомерПоследнегоРеквизитаШапкиСНесколькимиГруппамиЗначенийДоступа
					/ РазмерностьКлючаДоступа.КоличествоРеквизитовТабличнойЧасти) + 1;
				
				ИмяГруппыПолей = "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча;
			Иначе
				НомерПоследнегоРеквизитаШапки = НомерПоследнегоРеквизитаШапки + 1;
				Если НомерПоследнегоРеквизитаШапки < 6 Тогда
					ИмяГруппыПолей = "Шапка0";
				ИначеЕсли НомерПоследнегоРеквизитаШапки < 11 Тогда
					ИмяГруппыПолей = "Шапка1";
				ИначеЕсли НомерПоследнегоРеквизитаШапки < 16 Тогда
					ИмяГруппыПолей = "Шапка2";
				Иначе
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В ограничении доступа списка %1
						           |количество полей списка, используемых в ограничении доступа,
						           |превышает максимально допустимое количество: 15.'"),
						Контекст.Список);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СвойстваПоля.ПсевдонимТаблицы <> "ТекущийСписок"
			   И СтрНачинаетсяС(СвойстваПоля.ПсевдонимТаблицы, "ТекущийСписок") Тогда
				
				НомерТабличнойЧастиКлюча = КоличествоТабличныхЧастейКлючаДляРеквизитовШапкиОбъекта
					+ НомераТабличныхЧастейОбъекта.Получить(СвойстваПоля.ПсевдонимТаблицы);
				
				Если ПсевдонимыТабличныхЧастейОбъекта.Получить(НомерТабличнойЧастиКлюча) = Неопределено Тогда
					ПсевдонимыТабличныхЧастейОбъекта.Вставить(НомерТабличнойЧастиКлюча, СвойстваПоля.ПсевдонимТаблицы)
				КонецЕсли;
			Иначе
				НомерТабличнойЧастиКлюча = КоличествоТабличныхЧастейКлючаДляРеквизитовШапкиОбъекта
					+ НомераТабличныхЧастейОбъекта.Количество()
					+ ГруппыДополнительныхТаблиц.НомераПоПсевдонимам.Получить(СвойстваПоля.ПсевдонимТаблицы);
			КонецЕсли;
			ИмяГруппыПолей = "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча;
		КонецЕсли;
		ГруппаПолей = ГруппыПолей.Получить(ИмяГруппыПолей);
		Если ГруппаПолей = Неопределено Тогда
			ГруппаПолей = Новый Массив;
			ГруппыПолей.Вставить(ИмяГруппыПолей, ГруппаПолей);
		КонецЕсли;
		ГруппаПолей.Добавить(СвойстваПоля);
		
		Если Не СтрНачинаетсяС(ИмяГруппыПолей, "Шапка")
		   И ГруппаПолей.Количество() > РазмерностьКлючаДоступа.КоличествоРеквизитовТабличнойЧасти Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В ограничении доступа списка %1
				           |количество полей одной табличной части, используемых в ограничении доступа,
				           |превышает максимально допустимое количество: %2.'"),
				Контекст.Список,
				РазмерностьКлючаДоступа.КоличествоРеквизитовТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;
	
	Контекст.Вставить("ГруппыПолей",                      ГруппыПолей);
	Контекст.Вставить("ПсевдонимыТабличныхЧастейОбъекта", ПсевдонимыТабличныхЧастейОбъекта);
	Контекст.Вставить("ГруппыДополнительныхТаблиц",       ГруппыДополнительныхТаблиц);
	Контекст.Вставить("КоличествоТабличныхЧастейКлюча",   КоличествоТабличныхЧастейКлюча);
	
	// Расчет числа СоставПолей.
	
	// Шапка и табличные части:    ТЧ4  ТЧ3  ТЧ2  ТЧ1    Ш.
	// Двоичный формат:           0000 0000 0000 0000 0000.
	// Шестнадцатеричный формат:    x0   x0   x0   x0   x0.
	//
	// Например: Ш0=1, ТЧ1=1.
	// Двоичный формат:           0000 0000 0000 0001 0001.
	// Шестнадцатеричный формат:    x0   x0   x0   x1   x1.
	// Число = 1*16^0 + 1*16^1 = 1 + 16 = 17.
	
	СоставПолей = НомерПоследнегоРеквизитаШапки;
	
	Для НомерТабличнойЧастиКлюча = 1 По КоличествоТабличныхЧастейКлюча Цикл
		ИмяТабличнойЧастиКлюча = "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча;
		ГруппаПолей = ГруппыПолей.Получить(ИмяТабличнойЧастиКлюча);
		СоставПолей = СоставПолей + ГруппаПолей.Количество() * Степень16(НомерТабличнойЧастиКлюча);
	КонецЦикла;
	
	Контекст.Вставить("СоставПолей", СоставПолей);
	
КонецПроцедуры

// Для процедуры ЗаполнитьГруппыПолейИДополнительныхТаблиц.
Функция Степень16(Степень)
	
	Степень16 = 1;
	
	Для Счетчик = 1 По Степень Цикл
		Степень16 = Степень16 * 16;
	КонецЦикла;
	
	Возврат Степень16;
	
КонецФункции

// Для функции ЗаполнитьГруппыПолейИДополнительныхТаблиц.
Функция ГруппыДополнительныхТаблиц(Контекст)
	
	ДополнительныеТаблицы = Контекст.СтруктураОграничения.ДополнительныеТаблицы;
	НомераГруппПоПсевдонимам = Новый Соответствие;
	
	ОпорныеПоля = Контекст.ОпорныеПоля;
	ОпорныеПоля.Вставить("ПоДополнительнымТаблицам", Новый Соответствие);
	
	Контекст.Вставить("ПоляУсловияСоединенияДополнительныхТаблиц", Новый Массив);
	
	ПоследняяГруппа = 0;
	Для Каждого ДополнительнаяТаблица Из ДополнительныеТаблицы Цикл
		ДополнительнаяТаблица.Вставить("ПсевдонимыТребуемыхТаблиц", Новый Массив);
		ДополнительнаяТаблица.Вставить("ПолеПроверкиСоединения", "");
		
		ТекстУсловияСоединения = ТекстУсловияСоединения(ДополнительнаяТаблица, Контекст);
		ДополнительнаяТаблица.Вставить("ТекстУсловияСоединения", ?(Лев(ТекстУсловияСоединения, 1) = "(",
			ТекстУсловияСоединения, "(" + ТекстУсловияСоединения + ")"));
		
		Если Не ЗначениеЗаполнено(ДополнительнаяТаблица.ПолеПроверкиСоединения) Тогда
			ПоляКлючаДоступа = Контекст.СтруктураОграничения.ВнутренниеДанные.ПоляКлючаДоступа;
			Для Каждого ОписаниеПоля Из ПоляКлючаДоступа Цикл
				Если ОписаниеПоля.Поле.Псевдоним = ДополнительнаяТаблица.Псевдоним Тогда
					ДополнительнаяТаблица.ПолеПроверкиСоединения =
						ДополнительнаяТаблица.Псевдоним + "." + ОписаниеПоля.Поле.Имя;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекущаяГруппа = НомераГруппПоПсевдонимам.Получить(ДополнительнаяТаблица.Псевдоним);
		Если ТекущаяГруппа = Неопределено Тогда
			ПоследняяГруппа = ПоследняяГруппа + 1;
			ТекущаяГруппа = ПоследняяГруппа;
			НомераГруппПоПсевдонимам.Вставить(ДополнительнаяТаблица.Псевдоним, ТекущаяГруппа);
		КонецЕсли;
		
		Для Каждого Псевдоним Из ДополнительнаяТаблица.ПсевдонимыТребуемыхТаблиц Цикл
			ГруппаТребуемойТаблицы = НомераГруппПоПсевдонимам.Получить(Псевдоним);
			Если ГруппаТребуемойТаблицы = Неопределено Тогда
				НомераГруппПоПсевдонимам.Вставить(Псевдоним, ТекущаяГруппа);
				Продолжить;
			КонецЕсли;
			Если ГруппаТребуемойТаблицы = ТекущаяГруппа Тогда
				Продолжить;
			КонецЕсли;
			ПсевдонимыЗаменяемойГруппы = Новый Массив;
			Для Каждого КлючИЗначение Из НомераГруппПоПсевдонимам Цикл
				Если КлючИЗначение.Значение <> ГруппаТребуемойТаблицы Тогда
					Продолжить;
				КонецЕсли;
				ПсевдонимыЗаменяемойГруппы.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
			Для Каждого Псевдоним Из ПсевдонимыЗаменяемойГруппы Цикл
				НомераГруппПоПсевдонимам.Вставить(Псевдоним, ТекущаяГруппа);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПсевдонимыТаблицСПолями = Новый Соответствие;
	Для Каждого СвойстваПоля Из Контекст.СвойстваПолей Цикл
		Если СвойстваПоля.ПсевдонимТаблицы = "ТекущийСписок" Тогда
			Продолжить;
		КонецЕсли;
		ПсевдонимыТаблицСПолями.Вставить(СвойстваПоля.ПсевдонимТаблицы, Истина);
	КонецЦикла;
	
	ИспользованиеГрупп = Новый Соответствие;
	Для Группа = 1 По ПоследняяГруппа Цикл
		Для Каждого КлючИЗначение Из НомераГруппПоПсевдонимам Цикл
			Если КлючИЗначение.Значение <> Группа Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользованиеГрупп.Получить(Группа) = Неопределено Тогда
				ИспользованиеГрупп.Вставить(Группа, Ложь);
			КонецЕсли;
			Если ПсевдонимыТаблицСПолями.Получить(КлючИЗначение.Ключ) <> Неопределено Тогда
				ИспользованиеГрупп.Вставить(Группа, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НоваяГруппа = 1;
	НовыеГруппы = Новый Соответствие;
	Для Каждого ДополнительнаяТаблица Из ДополнительныеТаблицы Цикл
		СтараяГруппа = НомераГруппПоПсевдонимам.Получить(ДополнительнаяТаблица.Псевдоним);
		Если Не ИспользованиеГрупп.Получить(СтараяГруппа) Тогда
			Продолжить;
		КонецЕсли;
		Если НовыеГруппы.Получить(СтараяГруппа) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыеГруппы.Вставить(СтараяГруппа, НоваяГруппа);
		НоваяГруппа = НоваяГруппа + 1;
	КонецЦикла;
	
	Группы = Новый Структура;
	Группы.Вставить("НомераПоПсевдонимам",     Новый Соответствие);
	Группы.Вставить("ТаблицыПоГруппам",        Новый Соответствие);
	Группы.Вставить("ПсевдонимыТаблицСПолями", ПсевдонимыТаблицСПолями);
	
	Для Каждого ДополнительнаяТаблица Из ДополнительныеТаблицы Цикл
		СтараяГруппа = НомераГруппПоПсевдонимам.Получить(ДополнительнаяТаблица.Псевдоним);
		Если Не ИспользованиеГрупп.Получить(СтараяГруппа) Тогда
			Продолжить;
		КонецЕсли;
		УстановитьИспользованиеОпорногоПоля(ОпорныеПоля, , ДополнительнаяТаблица);
		Группа = НовыеГруппы.Получить(СтараяГруппа);
		Группы.НомераПоПсевдонимам.Вставить(ДополнительнаяТаблица.Псевдоним, Группа);
		ГруппаТаблиц = Группы.ТаблицыПоГруппам.Получить(Группа);
		Если ГруппаТаблиц = Неопределено Тогда
			ГруппаТаблиц = Новый Массив;
			Группы.ТаблицыПоГруппам.Вставить(Группа, ГруппаТаблиц);
		КонецЕсли;
		ГруппаТаблиц.Добавить(ДополнительнаяТаблица);
	КонецЦикла;
	
	Для Каждого УзелПоле Из Контекст.ПоляУсловияСоединенияДополнительныхТаблиц Цикл
		Если ПсевдонимыТаблицСПолями.Получить(УзелПоле.Псевдоним) <> Неопределено Тогда
			ДобавитьВедущиеСпискиПоЗначениямПолей(Контекст, УзелПоле);
		КонецЕсли;
		Если Группы.НомераПоПсевдонимам.Получить(УзелПоле.Псевдоним) <> Неопределено Тогда
			ДобавитьСвойстваВерсии(Контекст, УзелПоле, "Псевдоним, Имя, ТипыСтрокой");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Группы;
	
КонецФункции

// Для функции ГруппыДополнительныхТаблиц.
Функция ТекстУсловияСоединения(ДополнительнаяТаблица, Контекст, Условие = Null)
	
	Если Условие = Null Тогда
		Условие = ДополнительнаяТаблица.УсловиеСоединения;
	КонецЕсли;
	
	// Возможные узлы: "Поле", "Значение", "Константа", "И", "=".
	
	Если Условие.Узел = "Поле" Тогда
		Если Условие.Псевдоним = Контекст.СтруктураОграничения.ПсевдонимОсновнойТаблицы Тогда
			ДобавитьОпорноеПоле(Контекст, Условие, , ДополнительнаяТаблица);
			Возврат ИмяПоляСРазверткойОпорногоПоляПоТипам("ТекущийСписок", Условие);
		КонецЕсли;
		Псевдоним = Условие.Псевдоним;
		Если Псевдоним = ДополнительнаяТаблица.Псевдоним Тогда
			Если ДополнительнаяТаблица.ПолеПроверкиСоединения = "" Тогда
				ДополнительнаяТаблица.ПолеПроверкиСоединения = Псевдоним + "." + Условие.Имя;
			КонецЕсли;
		ИначеЕсли ДополнительнаяТаблица.ПсевдонимыТребуемыхТаблиц.Найти(Псевдоним) = Неопределено Тогда
			ДополнительнаяТаблица.ПсевдонимыТребуемыхТаблиц.Добавить(Псевдоним);
		КонецЕсли;
		Контекст.ПоляУсловияСоединенияДополнительныхТаблиц.Добавить(Условие);
		Возврат Псевдоним + "." + Условие.Имя;
	КонецЕсли;
	
	Если Условие.Узел = "Значение"
	 Или Условие.Узел = "Константа" Тогда
		
		Возврат ВыражениеУзлаЗначениеИлиКонстанта(Условие);
	КонецЕсли;
	
	Если Условие.Узел = "И" Тогда
		Текст = "";
		Для Каждого Аргумент Из Условие.Аргументы Цикл
			Текст = Текст + ?(Текст = "", "", Символы.ПС + "И ");
			Текст = Текст + ТекстУсловияСоединения(ДополнительнаяТаблица, Контекст, Аргумент);
		КонецЦикла;
		Возврат Текст;
	КонецЕсли;
	
	Если Условие.Узел = "=" Тогда
		ПервыйАргумент = ТекстУсловияСоединения(ДополнительнаяТаблица,
			Контекст, Условие.ПервыйАргумент);
		
		ВторойАргумент = ТекстУсловияСоединения(ДополнительнаяТаблица,
			Контекст, Условие.ВторойАргумент);
		
		Если СтрНайти(ВторойАргумент, "ТекущийСписок.") > 0 Тогда
			Возврат "(" + ПервыйАргумент + " = " + ВторойАргумент + ")";
		Иначе
			Возврат "(" + ВторойАргумент + " = " + ПервыйАргумент + ")";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не определена обработка узла ""%1""'"), Условие.Узел);
	
КонецФункции

// Для функций СвойстваПоля, ТекстУсловияСоединения.
Процедура ДобавитьОпорноеПоле(Контекст, УзелПоле, СвойстваПоля = Неопределено, ДополнительнаяТаблица = Неопределено)
	
	Если Не УзелПоле.Свойство("ОсновнойПорядок") Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = СтрНайти(УзелПоле.Имя, ".");
	Если Позиция = 0 Тогда
		ИмяОпорногоПоля = УзелПоле.Имя;
	Иначе
		ИмяОпорногоПоля = Лев(УзелПоле.Имя, Позиция - 1);
	КонецЕсли;
	
	ОпорныеПоля = Контекст.ОпорныеПоля;
	
	Если СвойстваПоля <> Неопределено Тогда
		ОпорныеПоля.ПоСвойствамПолей.Вставить(СвойстваПоля, ИмяОпорногоПоля);
	КонецЕсли;
	
	Если ДополнительнаяТаблица <> Неопределено Тогда
		ОпорныеПоля.ПоДополнительнымТаблицам.Вставить(ДополнительнаяТаблица, ИмяОпорногоПоля);
	КонецЕсли;
	
	Если ОпорныеПоля.Список.НайтиПоЗначению(ИмяОпорногоПоля) = Неопределено Тогда
		ОпорныеПоля.Список.Добавить(ИмяОпорногоПоля, УзелПоле.ОсновнойПорядок);
		ТипыОпорногоПоля = УзелПоле.ТипыПоля[0];
		ОпорныеПоля.ТипыПоИменамПолей.Вставить(ИмяОпорногоПоля, ТипыОпорногоПоля);
		Если Не ЗначениеЗаполнено(Контекст.ИмяОтдельногоРегистраКлючей) Тогда
			ЗапрещенныеТипы = Новый Массив;
			Если ЕстьПростойТип(ТипыОпорногоПоля) Тогда
				Для Каждого Тип Из ТипыОпорногоПоля.Типы() Цикл
					Если ЭтоПростойТип(Тип) Тогда
						ЗапрещенныеТипы.Добавить(Строка(Тип));
					КонецЕсли;
				КонецЦикла;
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В ограничении доступа списка %1
					           |опорное поле %2 содержит простые типы: %3.
					           |
					           |Это недопустимо при использовании общего регистра сведений КлючиДоступаКРегистрам.
					           |Требуется либо исключить простые типы из состава типов опорного поля,
					           |либо создать отдельного регистр ключей доступа для этого списка.'"),
					Контекст.Список,
					ИмяОпорногоПоля,
					СтрСоединить(ЗапрещенныеТипы, ", "));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для процедур УдалитьПоляНеиспользуемыхВидовДоступа, ГруппыДополнительныхТаблиц.
Процедура УстановитьИспользованиеОпорногоПоля(ОпорныеПоля, СвойстваПоля = Неопределено, ДополнительнаяТаблица = Неопределено)
	
	Если СвойстваПоля <> Неопределено Тогда
		ИмяОпорногоПоля = ОпорныеПоля.ПоСвойствамПолей.Получить(СвойстваПоля);
	Иначе
		ИмяОпорногоПоля = ОпорныеПоля.ПоДополнительнымТаблицам.Получить(ДополнительнаяТаблица);
	КонецЕсли;
	
	Если ИмяОпорногоПоля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОпорныеПоля.Список.НайтиПоЗначению(ИмяОпорногоПоля).Пометка = Истина;
	
КонецПроцедуры

// Для процедуры ЗаполнитьГруппыПолейИДополнительныхТаблиц.
Процедура ЗавершитьПодготовкуОпорныхПолей(Контекст)
	
	Контекст.ОпорныеПоля.Список.СортироватьПоПредставлению();
	
	Для Каждого ЭлементСписка Из Контекст.ОпорныеПоля.Список Цикл
		Контекст.ОпорныеПоля.Все.Добавить(ЭлементСписка.Значение);
		Контекст.ОпорныеПоля.ТипыВсех.Добавить(Новый ХранилищеЗначения(
			Контекст.ОпорныеПоля.ТипыПоИменамПолей.Получить(ЭлементСписка.Значение)));
		
		Если ЭлементСписка.Пометка Тогда
			Контекст.ОпорныеПоля.Используемые.Добавить(ЭлементСписка.Значение);
			Контекст.ОпорныеПоля.ТипыИспользуемых.Добавить(Новый ХранилищеЗначения(
				Контекст.ОпорныеПоля.ТипыПоИменамПолей.Получить(ЭлементСписка.Значение)));
		КонецЕсли;
	КонецЦикла;
	
	Контекст.ОпорныеПоля.Удалить("Список");
	Контекст.ОпорныеПоля.Удалить("ТипыПоИменамПолей");
	Контекст.ОпорныеПоля.Удалить("ПоСвойствамПолей");
	Контекст.ОпорныеПоля.Удалить("ПоДополнительнымТаблицам");
	
КонецПроцедуры

// Для функций ТекстУсловияСоединения, СвойстваПоля.
Функция ИмяПоляСРазверткойОпорногоПоляПоТипам(Псевдоним, УзелПоле)
	
	Если Не УзелПоле.Свойство("ОсновнойПорядок")
	 Или Не УзелПоле.Свойство("ТаблицыСледующегоПоля") Тогда
		
		Возврат Псевдоним + "." + УзелПоле.Имя;
	КонецЕсли;
	
	Позиция = СтрНайти(УзелПоле.Имя, ".");
	ОпорноеПоле = Псевдоним + "." + Лев(УзелПоле.Имя, Позиция - 1);
	ОстальныеПоля = Сред(УзелПоле.Имя, Позиция + 1);
	
	ИмяПоля = "";
	Для Каждого ИмяТипа Из УзелПоле.ТаблицыСледующегоПоля[0] Цикл
		ТекущееИмяПоля = "ВЫРАЗИТЬ(" + ОпорноеПоле + " КАК " + ИмяТипа + ")." + ОстальныеПоля;
		Если ЗначениеЗаполнено(ИмяПоля) Тогда
			ИмяПоля =
				"ЕСТЬNULL(" + ТекущееИмяПоля + ",
				|	" + ТекстСОтступом(ИмяПоля, "	") + ")";
		Иначе
			ИмяПоля = ТекущееИмяПоля;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяПоля;
	
КонецФункции

// Для функции ПараметрыОграниченияДоступа.
Процедура ЗаполнитьСвойстваПолей(Контекст)
	
	// 1. Для полей-аргументов узлов сравнения  =, <>, В, ЕстьNull
	// вычисляется результат сравнения и сохраняется в ключе.
	
	// 2. Для значений типа Булево сохраняются значения:
	// - Перечисления.ДополнительныеЗначенияДоступа.ЗначениеИстина,
	// - Перечисления.ДополнительныеЗначенияДоступа.ЗначениеЛожь.
	
	// 3. Для значений типов Число, Дата, Строка сохраняется результат
	//    сравнения со значением Истина, как указано в пункте 2.
	
	Контекст.ОпорныеПоля.Вставить("ТипыПоИменамПолей", Новый Соответствие);
	Контекст.ОпорныеПоля.Вставить("ПоСвойствамПолей",  Новый Соответствие);
	
	ДобавленныеПоля = Новый Соответствие;
	ИменаПолейДляЗапроса = Новый Массив;
	ПоляКлючаДоступа = Контекст.СтруктураОграничения.ВнутренниеДанные.ПоляКлючаДоступа;
	Для Каждого ОписаниеПоля Из ПоляКлючаДоступа Цикл
		СвойстваПоля = СвойстваПоля(ОписаниеПоля.Поле, Контекст);
		СвойстваПоля.Вставить("Чтение", ОписаниеПоля.Чтение);
		УточнитьСвойстваПоляСравнения(СвойстваПоля, ОписаниеПоля);
		НаборПолей = НаборПолейУсловияКогда(СвойстваПоля, ОписаниеПоля);
		Для Каждого СвойстваПоля Из НаборПолей Цикл
			ДобавитьСвойстваТиповПоля(СвойстваПоля, ОписаниеПоля, Контекст);
			ОдинаковыеПоля = ДобавленныеПоля.Получить(ВРег(СвойстваПоля.ИмяПоляДляЗапроса));
			Если ОдинаковыеПоля = Неопределено Тогда
				ОдинаковыеПоля = Новый Массив;
				ДобавленныеПоля.Вставить(ВРег(СвойстваПоля.ИмяПоляДляЗапроса), ОдинаковыеПоля);
				ИменаПолейДляЗапроса.Добавить(СвойстваПоля.ИмяПоляДляЗапроса);
			КонецЕсли;
			ОдинаковыеПоля.Добавить(СвойстваПоля);
		КонецЦикла;
	КонецЦикла;
	
	СвойстваПолей = Новый Массив;
	Для Каждого ИмяПоляДляЗапроса Из ИменаПолейДляЗапроса Цикл
		ОдинаковыеПоля = ДобавленныеПоля.Получить(ВРег(ИмяПоляДляЗапроса));
		ОбработанныеОдинаковыеПоля = Новый Массив;
		Для Каждого СвойстваПоля Из ОдинаковыеПоля Цикл
			Если ПолеСовмещеноСОбработанным(ОбработанныеОдинаковыеПоля, СвойстваПоля) Тогда
				Продолжить;
			КонецЕсли;
			ОбработанныеОдинаковыеПоля.Добавить(СвойстваПоля);
		КонецЦикла;
		Для Каждого СвойстваПоля Из ОбработанныеОдинаковыеПоля Цикл
			СвойстваПолей.Добавить(СвойстваПоля);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СвойстваПоля Из СвойстваПолей Цикл
		СвойстваПоля.Вставить("ТипыСохраненияТиповКонфигурации", Новый Массив);
		СвойстваПоля.Вставить("ТипыСохраненияТиповРасширений",   Новый Массив);
		СвойстваПоля.Вставить("ТипыСохраненияТиповПростых",      Новый Массив);
		
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияТипов Цикл
			ОбъектМетаданных = Неопределено;
			ИмяТипа = ИмяТипаНаЯзыкеЗапросов(Тип, ОбъектМетаданных);
			
			Если СтрНайти(ИмяТипа, ".") = 0 Тогда
				СвойстваПоля.ТипыСохраненияТиповПростых.Добавить(Тип);
				
			ИначеЕсли ОбъектМетаданных.РасширениеКонфигурации() = Неопределено Тогда
				СвойстваПоля.ТипыСохраненияТиповКонфигурации.Добавить(Тип);
			Иначе
				СвойстваПоля.ТипыСохраненияТиповРасширений.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Контекст.Вставить("СвойстваПолей", СвойстваПолей);
	
КонецПроцедуры

// Для процедуры ЗаполнитьСвойстваПолей.
Функция ПолеСовмещеноСОбработанным(ОбработанныеОдинаковыеПоля, СвойстваПоля)
	
	Для Каждого Поле Из ОбработанныеОдинаковыеПоля Цикл
		Совместимо = Истина;
		Если Поле.ПсевдонимТаблицы = "ТекущийСписок"
		   И Поле.НесколькоГруппЗначений <> СвойстваПоля.НесколькоГруппЗначений Тогда
			Продолжить;
		КонецЕсли;
		// По пустой ссылке на ключ доступа или значению Null невозможно определить тип значения,
		// поэтому сохранение ключа доступа несовместимо с остальными вариантами.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияКлючейДоступа Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип)        <> Неопределено
			 Или Поле.ТипыСохраненияГруппЗначений.Найти(Тип)   <> Неопределено
			 Или Поле.ТипыСохраненияТипов.Найти(Тип)           <> Неопределено
			 Или Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип) <> Неопределено
			 Или Поле.ТипыСохраненияПусто.Найти(Тип)           <> Неопределено Тогда
				Совместимо = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не Совместимо Тогда
			Продолжить;
		КонецЕсли;
		// По значению Null вместо группы значений невозможно определить тип значения,
		// поэтому сохранение группы значений несовместимо с остальными вариантами.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияГруппЗначений Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип)        <> Неопределено
			 Или Поле.ТипыСохраненияТипов.Найти(Тип)           <> Неопределено
			 Или Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип) <> Неопределено
			 Или Поле.ТипыСохраненияПусто.Найти(Тип)           <> Неопределено Тогда
				Совместимо = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не Совместимо Тогда
			Продолжить;
		КонецЕсли;
		// Объединение уточнений специальных значений.
		Поле.ЕстьУточнениеNull =
			Поле.ЕстьУточнениеNull Или СвойстваПоля.ЕстьУточнениеNull;
		Поле.ЕстьУточнениеНеопределено =
			Поле.ЕстьУточнениеНеопределено Или СвойстваПоля.ЕстьУточнениеНеопределено;
		// Объединение типов сохранения пустой ссылки.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияПустойСсылки Цикл
			Если Поле.ТипыСохраненияПустойСсылки.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Поле.ТипыСохраненияПустойСсылки.Добавить(Тип);
		КонецЦикла;
		// Объединение типов сохранения значения Пусто.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияПусто Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип) <> Неопределено
			 Или Поле.ТипыСохраненияТипов.Найти(Тип)    <> Неопределено
			 Или Поле.ТипыСохраненияПусто.Найти(Тип)    <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияТипаЗапрещенный.Удалить(Индекс);
				Поле.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			Поле.ТипыСохраненияПусто.Добавить(Тип);
		КонецЦикла;
		// Объединение типов сохранения значения ТипЗапрещенный.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияТипаЗапрещенный Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип)        <> Неопределено
			 Или Поле.ТипыСохраненияТипов.Найти(Тип)           <> Неопределено
			 Или Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияПусто.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияПусто.Удалить(Индекс);
				Поле.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			Поле.ТипыСохраненияТипаЗапрещенный.Добавить(Тип);
		КонецЦикла;
		// Объединение типов сохранения типа значения.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияТипов Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип) <> Неопределено
			 Или Поле.ТипыСохраненияТипов.Найти(Тип)    <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияТипаЗапрещенный.Удалить(Индекс);
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияПусто.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияПусто.Удалить(Индекс);
			КонецЕсли;
			Поле.ТипыСохраненияТипов.Добавить(Тип);
		КонецЦикла;
		// Объединение типов сохранения значения.
		Для Каждого Тип Из СвойстваПоля.ТипыСохраненияЗначений Цикл
			Если Поле.ТипыСохраненияЗначений.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияТипов.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияТипов.Удалить(Индекс);
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияТипаЗапрещенный.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияТипаЗапрещенный.Удалить(Индекс);
			КонецЕсли;
			Индекс = Поле.ТипыСохраненияПусто.Найти(Тип);
			Если Индекс <> Неопределено Тогда
				Поле.ТипыСохраненияПусто.Удалить(Индекс);
			КонецЕсли;
			Поле.ТипыСохраненияЗначений.Добавить(Тип);
		КонецЦикла;
		// Объединение неиспользуемых типов значений доступа.
		Для Каждого Тип Из СвойстваПоля.НеиспользуемыеТипыЗначенийДоступа Цикл
			Если Поле.НеиспользуемыеТипыЗначенийДоступа.Найти(Тип) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Поле.НеиспользуемыеТипыЗначенийДоступа.Добавить(Тип);
		КонецЦикла;
		Поле.Чтение = Поле.Чтение Или СвойстваПоля.Чтение;
		Если Поле.ТипыСтрокой <> СвойстваПоля.ТипыСтрокой Тогда
			Поле.ТипыСтрокой = Поле.ТипыСтрокой + Символы.ПС + СвойстваПоля.ТипыСтрокой;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Для процедуры ЗаполнитьСвойстваПолей.
Процедура УточнитьСвойстваПоляСравнения(Свойства, ОписаниеПоля)
	
	Родитель = ОписаниеПоля.Родители[0];
	
	Узлы = ",ТипЗначения,=,<>,В,ЕстьNull,"; // В ключ сохраняется результат сравнения.
	Если СтрНайти(Узлы, "," + Родитель.Узел + ",") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Родитель.Узел = "ТипЗначения" Тогда
		
		РодительУзлаСравнения = ОписаниеПоля.Родители[1];
		УзелТип = ?(РодительУзлаСравнения.ВторойАргумент = Родитель,
			РодительУзлаСравнения.ПервыйАргумент, РодительУзлаСравнения.ВторойАргумент);
		
		ВыражениеТипаЗначения = "ТИПЗНАЧЕНИЯ(" + Свойства.ИмяПоляДляЗапроса + ")";
		ВыражениеТипа = "ТИП(" + УзелТип.Имя + ")";
		ОднойСтрокой = СтрДлина(ВыражениеТипаЗначения) + СтрДлина(ВыражениеТипа) < 60;
		
		Свойства.ИмяПоляДляЗапроса = ВыражениеТипаЗначения + ?(ОднойСтрокой, " ", "
		|			") + РодительУзлаСравнения.Узел + " " + ВыражениеТипа;
		
	ИначеЕсли Родитель.Узел = "="
	      Или Родитель.Узел = "<>" Тогда
		
		УзелЗначениеИлиКонстанта = ?(Родитель.ВторойАргумент = ОписаниеПоля.Поле,
			Родитель.ПервыйАргумент, Родитель.ВторойАргумент);
		
		ВыражениеУзла = ВыражениеУзлаЗначениеИлиКонстанта(УзелЗначениеИлиКонстанта);
		ОднойСтрокой = СтрДлина(Свойства.ИмяПоляДляЗапроса) + СтрДлина(ВыражениеУзла) < 60;
		
		Свойства.ИмяПоляДляЗапроса = Свойства.ИмяПоляДляЗапроса + ?(ОднойСтрокой, " ", "
		|			") + Родитель.Узел + " " + ВыражениеУзла;
		
	ИначеЕсли Родитель.Узел = "В" Тогда
		
		СписокЗначений = "";
		Для Каждого УзелЗначениеИлиКонстанта Из Родитель.Значения Цикл
			СписокЗначений = СписокЗначений + ?(СписокЗначений = "", "", ",");
			ПоследняяСтрока = СтрПолучитьСтроку(СписокЗначений, СтрЧислоСтрок(СписокЗначений));
			Если СтрДлина(ПоследняяСтрока) > 40 Тогда
				СписокЗначений = СписокЗначений + "
				|			";
			Иначе
				СписокЗначений = СписокЗначений + " ";
			КонецЕсли;
			СписокЗначений = СписокЗначений
				+ ВыражениеУзлаЗначениеИлиКонстанта(УзелЗначениеИлиКонстанта);
		КонецЦикла;
		Свойства.ИмяПоляДляЗапроса = Свойства.ИмяПоляДляЗапроса + "
		|	В (" + СписокЗначений + ")";
	
	Иначе // Родитель.Узел = "ЕстьNull".
		Свойства.ИмяПоляДляЗапроса = Свойства.ИмяПоляДляЗапроса + " ЕСТЬ NULL";
	КонецЕсли;
	
	Свойства.ТипКонечногоПоля = Новый ОписаниеТипов("Булево");
	
КонецПроцедуры

// Для процедуры ЗаполнитьСвойстваПолей.
Функция НаборПолейУсловияКогда(ИсходныеСвойстваПоля, ОписаниеПоля)
	
	Родитель = ОписаниеПоля.Родители[0];
	НаборПолей = Новый Массив;
	
	Если Родитель.Узел <> "Выбор"
	 Или Родитель.Выбор = Неопределено Тогда
		
		НаборПолей.Добавить(ИсходныеСвойстваПоля);
		Возврат НаборПолей;
	КонецЕсли;
	
	// Для "ВЫБОР <Поле> КОГДА <Значение>" в ключ сохраняется
	// результат сравнения "<Поле> = <Значение>".
	
	Для Каждого УзелЗначение Из Родитель.Выбор.Когда Цикл
		ФиксированныеСвойства = Новый ФиксированнаяСтруктура(ИсходныеСвойстваПоля);
		Свойства = Новый Структура(ФиксированныеСвойства);
		
		ВыражениеУзла = ВыражениеУзлаЗначениеИлиКонстанта(УзелЗначение);
		ОднойСтрокой = СтрДлина(Свойства.ИмяПоляДляЗапроса) + СтрДлина(ВыражениеУзла) < 60;
		
		Свойства.ИмяПоляДляЗапроса = Свойства.ИмяПоляДляЗапроса + ?(ОднойСтрокой, " = ", "
		|			= ") + ВыражениеУзла;
		
		Свойства.ТипКонечногоПоля = Новый ОписаниеТипов("Булево");
		НаборПолей.Добавить(Свойства);
	КонецЦикла;
	
	Возврат НаборПолей;
	
КонецФункции

// Для функций СвойстваПоля, УточнитьСвойстваПоляСравнения, НаборПолейУсловияКогда.
Функция БезЗначенияNull(СвойстваПоля, ВГруппеОднаДополнительнаяТаблицаСПолями)
	
	Возврат СтрЧислоВхождений(СвойстваПоля.ИмяПоляДляЗапроса, ".") = 1
	      И Не СвойстваПоля.Свойство("ПолеСодержитNull")
	      И (    СтрНачинаетсяС(СвойстваПоля.ИмяПоляДляЗапроса, "ТекущийСписок")
	         Или ВГруппеОднаДополнительнаяТаблицаСПолями);
	
КонецФункции

// Для процедуры ЗаполнитьСвойстваПолей.
Процедура ДобавитьСвойстваТиповПоля(Свойства, ОписаниеПоля, Контекст)
	
	Свойства.Вставить("ТипыСохраненияКлючейДоступа",       Новый Массив);
	Свойства.Вставить("ТипыСохраненияГруппЗначений",       Новый Массив);
	Свойства.Вставить("ТипыСохраненияЗначений",            Новый Массив);
	Свойства.Вставить("ТипыСохраненияПустойСсылки",        Новый Массив);
	Свойства.Вставить("ТипыСохраненияТипов",               Новый Массив);
	Свойства.Вставить("ТипыСохраненияТипаЗапрещенный",     Новый Массив);
	Свойства.Вставить("ТипыСохраненияПусто",               Новый Массив);
	Свойства.Вставить("НеиспользуемыеТипыЗначенийДоступа", Новый Массив);
	Свойства.Вставить("НесколькоГруппЗначений",            Ложь);
	Свойства.Вставить("ЕстьУточнениеNull",                 Ложь);
	Свойства.Вставить("ЕстьУточнениеНеопределено",         Ложь);
	
	Родитель = ОписаниеПоля.Родители[0];
	
	Если Родитель.Узел = "ЧтениеОбъектаРазрешено"
	 Или Родитель.Узел = "ИзменениеОбъектаРазрешено"
	 Или Родитель.Узел = "ЧтениеСпискаРазрешено"
	 Или Родитель.Узел = "ИзменениеСпискаРазрешено"
	 Или Родитель.Узел = "ЗначениеРазрешено"
	 Или Родитель.Узел = "ЭтоАвторизованныйПользователь" Тогда
		
		ЕстьУточнениеПустойСсылки          = ТипУточнен(Родитель, "ПустаяСсылка");
		Свойства.ЕстьУточнениеNull         = ТипУточнен(Родитель, "Null") Или Свойства.Свойство("ЕстьВыразить");
		Свойства.ЕстьУточнениеНеопределено = ТипУточнен(Родитель, "Неопределено");
	КонецЕсли;
	
	Если Родитель.Узел = "ЧтениеОбъектаРазрешено"
	 Или Родитель.Узел = "ИзменениеОбъектаРазрешено"
	 Или Родитель.Узел = "ЧтениеСпискаРазрешено"
	 Или Родитель.Узел = "ИзменениеСпискаРазрешено" Тогда
		
		Для Каждого Тип Из Свойства.ТипКонечногоПоля.Типы() Цикл
			ИмяТипа = ИмяТипаНаЯзыкеЗапросов(Тип);
			
			Если ТипУточнен(Родитель, ИмяТипа) Тогда
				Свойства.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Не ТипПроверяется(Родитель, ИмяТипа) Или ЭтоПростойТип(Тип) Тогда
				Свойства.ТипыСохраненияПусто.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			 Или Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
				Свойства.ТипыСохраненияЗначений.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Контекст.СпискиСЗаписьюКлючейДоступа <> Неопределено
			   И Не Контекст.ИспользуетсяОграничениеПоВладельцу
			   И (    Контекст.СпискиСОграничением.Получить(ИмяТипа) = Неопределено
			      Или Контекст.СпискиСОтключеннымОграничением.Получить(ИмяТипа) <> Неопределено) Тогда
				
				Свойства.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если ЕстьУточнениеПустойСсылки Тогда
				Свойства.ТипыСохраненияПустойСсылки.Добавить(Тип);
			КонецЕсли;
			
			Значение = Контекст.ТипыВладельцевНастроекПрав.Получить(Тип);
			Если Значение <> Неопределено
			   И ВРег(Контекст.Список) = ВРег(Значение[0].ВладелецПрав) Тогда
				
				Свойства.ТипыСохраненияЗначений.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Родитель.Узел = "ЧтениеСпискаРазрешено"
			 Или Родитель.Узел = "ИзменениеСпискаРазрешено" Тогда
				
				Свойства.ТипыСохраненияТипов.Добавить(Тип);
			Иначе
				Свойства.ТипыСохраненияКлючейДоступа.Добавить(Тип);
				Контекст.ВедущиеСпискиПоКлючамДоступа.Вставить(ИмяТипа, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если Родитель.Узел = "ЗначениеРазрешено" Тогда
		СвойстваВидовДоступа = Контекст.СвойстваВидовДоступа;
		
		Для Каждого Тип Из Свойства.ТипКонечногоПоля.Типы() Цикл
			ИмяТипа = ИмяТипаНаЯзыкеЗапросов(Тип);
			
			Если ТипУточнен(Родитель, ИмяТипа) Тогда
				Свойства.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Не ТипПроверяется(Родитель, ИмяТипа)
			 Или СвойстваВидовДоступа.ПоТипамЗначений.Получить(Тип) = Неопределено
			 Или Контекст.ИспользуемыеТипыЗначений.Получить(Тип) = Неопределено Тогда
				
				Если СвойстваВидовДоступа.ПоТипамЗначений.Получить(Тип) <> Неопределено
				   И Контекст.ИспользуемыеТипыЗначений.Получить(Тип) = Неопределено Тогда
					
					Свойства.НеиспользуемыеТипыЗначенийДоступа.Добавить(Тип);
				КонецЕсли;
				Свойства.ТипыСохраненияПусто.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если ЕстьУточнениеПустойСсылки Тогда
				Свойства.ТипыСохраненияПустойСсылки.Добавить(Тип);
			КонецЕсли;
			
			Если СвойстваВидовДоступа.ТипыЗначенийДоступаСГруппами.Получить(Тип) = Неопределено
			 Или Контекст.ТипыПользователя.Найти(Тип) <> Неопределено Тогда
				
				Свойства.ТипыСохраненияЗначений.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			Свойства.ТипыСохраненияГруппЗначений.Добавить(Тип);
			Контекст.ВедущиеСпискиПоЗначениямСГруппами.Вставить(ИмяТипа, Истина);
			
			Если СвойстваВидовДоступа.СОднойГруппойДляЗначенияДоступа.Найти(Тип) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Свойства.НесколькоГруппЗначений = Истина;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если Родитель.Узел = "ЭтоАвторизованныйПользователь" Тогда
		
		Для Каждого Тип Из Свойства.ТипКонечногоПоля.Типы() Цикл
			ИмяТипа = ИмяТипаНаЯзыкеЗапросов(Тип);
			
			Если ТипУточнен(Родитель, ИмяТипа) Тогда
				Свойства.ТипыСохраненияТипов.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Не ТипПроверяется(Родитель, ИмяТипа) Тогда
				Свойства.ТипыСохраненияПусто.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если Тип <> Тип("СправочникСсылка.Пользователи")
			   И Тип <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				
				Свойства.ТипыСохраненияТипаЗапрещенный.Добавить(Тип);
				Продолжить;
			КонецЕсли;
			
			Если ЕстьУточнениеПустойСсылки Тогда
				Свойства.ТипыСохраненияПустойСсылки.Добавить(Тип);
			КонецЕсли;
			
			Свойства.ТипыСохраненияЗначений.Добавить(Тип);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	// Остались только узлы Поле для получения значения Булево.
	Свойства.ТипыСохраненияЗначений.Добавить(Тип("Булево"));
	
	Если Свойства.ТипКонечногоПоля.Типы().Количество() = 1
	   И Свойства.ТипКонечногоПоля.СодержитТип(Тип("Булево")) Тогда
		Возврат;
	КонецЕсли;
	Свойства.ТипКонечногоПоля = Новый ОписаниеТипов("Булево");
	Свойства.ИмяПоляДляЗапроса = Свойства.ИмяПоляДляЗапроса + " = ИСТИНА";
	
КонецПроцедуры

// Для функций СвойстваПоля, ДобавитьСвойстваТиповПоля.
Функция ИмяТипаНаЯзыкеЗапросов(Тип, ОбъектМетаданных = Неопределено)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	Если ОбъектМетаданных <> Неопределено Тогда
		Возврат ОбъектМетаданных.ПолноеИмя();
	КонецЕсли;
	
	Возврат Строка(Тип);
	
КонецФункции

// Для процедуры ЗаполнитьСвойстваПолей.
Функция СвойстваПоля(УзелПоле, Контекст, СвойстваПоля = Неопределено)
	
	Свойства = Новый Структура;
	ЭтоКорневойУзел = СвойстваПоля = Неопределено;
	
	Если ЭтоКорневойУзел Тогда
		СвойстваПоля = Свойства;
		// Внутри функции ЕстьNull() может быть только поле, т.е. функции Выразить() не может быть.
		Если ЗначениеЗаполнено(УзелПоле.Выразить) Тогда
			Типы = Новый Массив;
			Типы.Добавить(ТипСсылкиПоПолномуИмениМетаданных(УзелПоле.Выразить));
			ТипКонечногоПоля = Новый ОписаниеТипов(Типы);
		Иначе
			ТипКонечногоПоля = УзелПоле.ТипыПоля[УзелПоле.ТипыПоля.Количество() - 1];
			Если ЗначениеЗаполнено(УзелПоле.ЕстьNull) Тогда
				Типы = Новый Массив;
				Типы.Добавить(ТипЗначенияУзлаЗначениеИлиКонстанта(УзелПоле.ЕстьNull));
				ТипКонечногоПоля = Новый ОписаниеТипов(ТипКонечногоПоля, Типы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УзелПоле.Вложение <> Неопределено Тогда
		СвойстваВложения = СвойстваПоля(УзелПоле.Вложение, Контекст, СвойстваПоля);
		ПсевдонимТаблицы  = СвойстваВложения.ПсевдонимТаблицы;
		ИмяПоляДляЗапроса = СвойстваВложения.ИмяПоляДляЗапроса + "." + УзелПоле.Имя;
		ТипыСтрокой       = СвойстваВложения.ТипыСтрокой + Символы.ПС + УзелПоле.ТипыСтрокой;
	Иначе
		Если ТипЗнч(УзелПоле.ТипыПоля[0]) = Тип("ОписаниеТипов") Тогда
			
			Если ЗначениеЗаполнено(УзелПоле.Псевдоним)
			   И УзелПоле.Псевдоним <> Контекст.СтруктураОграничения.ПсевдонимОсновнойТаблицы Тогда
				
				ПсевдонимТаблицы = УзелПоле.Псевдоним;
				ИмяПоляДляЗапроса = ПсевдонимТаблицы + "." + УзелПоле.Имя;
			Иначе
				ПсевдонимТаблицы = "ТекущийСписок";
				ДобавитьОпорноеПоле(Контекст, УзелПоле, СвойстваПоля);
				Если Не ЗначениеЗаполнено(УзелПоле.Выразить) Тогда
					ИмяПоляДляЗапроса = ТекстСОтступом(
						ИмяПоляСРазверткойОпорногоПоляПоТипам(ПсевдонимТаблицы, УзелПоле), "		");
				Иначе
					ИмяПоляДляЗапроса = ПсевдонимТаблицы + "." + УзелПоле.Имя;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Первая часть имени поля - это имя табличной части.
			ПсевдонимТаблицы = "ТекущийСписок" + УзелПоле.ТипыПоля[0];
			ЧастиИмени = СтрРазделить(УзелПоле.Имя, ".");
			ЧастиИмени.Удалить(0);
			ИмяПоляДляЗапроса = ПсевдонимТаблицы + "." + СтрСоединить(ЧастиИмени);
		КонецЕсли;
		ТипыСтрокой = УзелПоле.ТипыСтрокой;
	КонецЕсли;
	
	// Внутри функции ЕстьNull() может быть только поле, т.е. функции Выразить() не может быть.
	Если ЗначениеЗаполнено(УзелПоле.ЕстьNull) Тогда
		ИмяПоляДляЗапроса = "ЕСТЬNULL(" + ИмяПоляДляЗапроса + ", "
			+ ВыражениеУзлаЗначениеИлиКонстанта(УзелПоле.ЕстьNull) + ")";
		
		Если ЭтоКорневойУзел Тогда
			Свойства.Вставить("БезЗначенияNull", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелПоле.Выразить) Тогда
		ИмяПоляДляЗапроса = "ВЫРАЗИТЬ(" + ИмяПоляДляЗапроса + " КАК " + УзелПоле.Выразить + ")";
		СвойстваПоля.Вставить("ЕстьВыразить");
		Если ЭтоКорневойУзел Тогда
			ИмяПоляДляЗапроса = ИмяПоляДляЗапроса + ".Ссылка";
		КонецЕсли;
	КонецЕсли;
	
	Свойства.Вставить("ПсевдонимТаблицы",  ПсевдонимТаблицы);
	Свойства.Вставить("ИмяПоляДляЗапроса", ИмяПоляДляЗапроса);
	Свойства.Вставить("ТипКонечногоПоля",  ТипКонечногоПоля);
	Свойства.Вставить("ТипыСтрокой",       ТипыСтрокой);
	
	Если УзелПоле.Свойство("ПолеСодержитNull") Тогда
		Свойства.Вставить("ПолеСодержитNull");
	КонецЕсли;
	
	ДобавитьВедущиеСпискиПоЗначениямПолей(Контекст, УзелПоле);
	
	Возврат Свойства;
	
КонецФункции

// Для функций ГруппыДополнительныхТаблиц, СвойстваПоля.
Процедура ДобавитьВедущиеСпискиПоЗначениямПолей(Контекст, УзелПоле)
	
	ИменаПолей = СтрРазделить(УзелПоле.Имя, ".");
	
	Если УзелПоле.Вложение <> Неопределено Тогда
		ДобавитьПолеВедущегоСписка(Контекст, УзелПоле.Таблица, ИменаПолей[0], Истина, Истина);
		
	ИначеЕсли ЗначениеЗаполнено(УзелПоле.Псевдоним)
	        И УзелПоле.Псевдоним <> Контекст.СтруктураОграничения.ПсевдонимОсновнойТаблицы Тогда
		
		ДобавитьПолеВедущегоСписка(Контекст, УзелПоле.Таблица, ИменаПолей[0]);
	КонецЕсли;
	
	ИменаПолей = СтрРазделить(УзелПоле.Имя, ".");
	ИндексПервогоПоля = ?(ТипЗнч(УзелПоле.ТипыПоля[0]) = Тип("ОписаниеТипов"), 0, 1);
	
	Для Индекс = ИндексПервогоПоля + 1 По ИменаПолей.Количество()-1 Цикл
		Поле = ИменаПолей[Индекс];
		Для Каждого Таблица Из УзелПоле.ТаблицыСледующегоПоля[Индекс-1] Цикл
			ДобавитьПолеВедущегоСписка(Контекст, Таблица, Поле, Истина, Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ДобавитьВедущиеСпискиПоЗначениямПолей.
Процедура ДобавитьПолеВедущегоСписка(Контекст, Таблица, Поле, ЭтоТаблицаСписка = Неопределено, ЭтоСсылочныйТипТаблицы = Неопределено)
	
	Если ЭтоТаблицаСписка = Неопределено
	   И СтрЧислоВхождений(Таблица, ".") = 2 Тогда
		
		СоставИмени = СтрРазделить(Таблица, ".");
		ТабличнаяЧасть = СоставИмени[2];
		СоставИмени.Удалить(2);
		ПолноеИмя = СтрСоединить(СоставИмени, ".");
	Иначе
		ИмяТабличнойЧасти = "";
		ПолноеИмя = Таблица;
	КонецЕсли;
	
	Если ВРег(Контекст.Список) = ВРег(ПолноеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПолей = Контекст.ВедущиеСпискиПоЗначениямПолей.Получить(ПолноеИмя);
	Если ОписаниеПолей = Неопределено Тогда
		Если ЭтоСсылочныйТипТаблицы = Неопределено Тогда
			СоставИмени = СтрРазделить(Таблица, ".");
			ТипТаблицы = Контекст.СтруктураОграничения.ВнутренниеДанные.ТипыТаблицПоИменам.Получить(ВРег(СоставИмени[0]));
			ЭтоСсылочныйТипТаблицы = ТипТаблицы.ЭтоСсылочныйТип;
		КонецЕсли;
		ОписаниеПолей = Новый Структура("ПоляШапки, ТабличныеЧасти, ЭтоСсылочныйТип",
			Новый Массив, Новый Соответствие, ЭтоСсылочныйТипТаблицы);
		Контекст.ВедущиеСпискиПоЗначениямПолей.Вставить(ПолноеИмя, ОписаниеПолей);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТабличнаяЧасть) Тогда
		Поля = ОписаниеПолей.ТабличныеЧасти.Получить(ТабличнаяЧасть);
		Если Поля = Неопределено Тогда
			Поля = Новый Массив;
			ОписаниеПолей.ТабличныеЧасти.Вставить(ТабличнаяЧасть, Поля);
		КонецЕсли;
	Иначе
		Поля = ОписаниеПолей.ПоляШапки;
	КонецЕсли;
	
	Если Поля.Найти(Поле) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВРег(Поле) = ВРег("Ссылка") Или ВРег(Поле) = ВРег("Ref") Тогда
		Если ЭтоСсылочныйТипТаблицы = Неопределено Тогда
			СоставИмени = СтрРазделить(Таблица, ".");
			ТипТаблицы = Контекст.СтруктураОграничения.ВнутренниеДанные.ТипыТаблицПоИменам.Получить(ВРег(СоставИмени[0]));
			ЭтоСсылочныйТипТаблицы = ТипТаблицы.ЭтоСсылочныйТип;
		КонецЕсли;
		Если ЭтоСсылочныйТипТаблицы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Поля.Добавить(Поле);
	
КонецПроцедуры

// Для процедур ДобавитьОпорноеПоле, ДобавитьТипыИзмерения, ДобавитьСвойстваТиповПоля,
// ДобавитьПроверкуПоТипам и функции СвойстваПоля.
//
Функция ЭтоПростойТип(Тип)
	
	Возврат Тип = Тип("Булево")
	    Или Тип = Тип("Дата")
	    Или Тип = Тип("Строка")
	    Или Тип = Тип("Число")
	    Или Тип = Тип("УникальныйИдентификатор")
	    Или Тип = Тип("ХранилищеЗначения");
	
КонецФункции

// Для функции ДобавитьСвойстваТиповПоля.
Функция ТипПроверяется(Узел, ПолноеИмя)
	
	Если Узел.Типы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипУказан = Ложь;
	Для Каждого ИмяТаблицы Из Узел.Типы Цикл
		Если ВРег(ИмяТаблицы) = ВРег(ПолноеИмя) Тогда
			ТипУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Узел.ПроверятьТипыКромеУказанных И Не ТипУказан
	 Или Не Узел.ПроверятьТипыКромеУказанных И    ТипУказан;
	
КонецФункции

// Для функции ДобавитьСвойстваТиповПоля.
Функция ТипУточнен(Узел, ИмяТипаНаЯзыкеЗапросов)
	
	ТипУточнен = Ложь;
	Для Каждого УточнениеСравнения Из Узел.УточненияСравнения Цикл
		Если ВРег(УточнениеСравнения.Ключ) = ВРег(ИмяТипаНаЯзыкеЗапросов) Тогда
			ТипУточнен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипУточнен;
	
КонецФункции

// Для функции СвойстваПоля.
Функция ТипЗначенияУзлаЗначениеИлиКонстанта(Узел)
	
	Если Узел.Узел = "Значение" Тогда
		Возврат ТипСсылкиПоПолномуИмениПредопределенного(Узел.Имя);
	КонецЕсли;
	
	Возврат ТипЗнч(Узел.Значение);
	
КонецФункции

// Для функций ТекстУсловияСоединения, СвойстваПоля, НаборПолейУсловияКогда и
// процедуры УточнитьСвойстваПоляСравнения.
//
Функция ВыражениеУзлаЗначениеИлиКонстанта(Узел)
	
	Если Узел.Узел = "Значение" Тогда
		Выражение = "Значение(" + Узел.Имя + ")";
	
	ИначеЕсли ТипЗнч(Узел.Значение) = Тип("Булево") Тогда
		Выражение = ?(Узел.Значение, "Истина", "Ложь");
		
	ИначеЕсли ТипЗнч(Узел.Значение) = Тип("Число") Тогда
		Выражение = Формат(Узел.Значение, "ЧГ=");
		
	ИначеЕсли ТипЗнч(Узел.Значение) = Тип("Неопределено") Тогда
		Выражение = "Неопределено";
	Иначе
		Выражение = """" + Узел.Значение + """";
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

// Для функции ТипЗначенияУзлаЗначениеИлиКонстанта.
Функция ТипСсылкиПоПолномуИмениПредопределенного(ПолноеИмяПредопределенного)
	
	ЧастиИмени = СтрРазделить(ПолноеИмяПредопределенного, ".");
	ЧастиИмени.Удалить(2);
	
	ПолноеИмя = СтрСоединить(ЧастиИмени, ".");
	
	Возврат ТипСсылкиПоПолномуИмениМетаданных(ПолноеИмя);
	
КонецФункции

// Для функций СвойстваПоля, ТипСсылкиПоПолномуИмениПредопределенного.
Функция ТипСсылкиПоПолномуИмениМетаданных(ПолноеИмя)
	
	Если ЭтоРусскийВариантВидаОбъектаМетаданных(ПолноеИмя) Тогда
		ИмяТипаСсылки = СтрЗаменить(ПолноеИмя, ".", "Ссылка.");
	Иначе
		ИмяТипаСсылки = СтрЗаменить(ПолноеИмя, ".", "Ref.");
	КонецЕсли;
	
	Возврат Тип(ИмяТипаСсылки);
	
КонецФункции

// Для функции ТипСсылкиПоПолномуИмениМетаданных.
Функция ЭтоРусскийВариантВидаОбъектаМетаданных(ПолноеИмя)
	
	ПервыйСимвол = Лев(ПолноеИмя, 1);
	
	Возврат ПервыйСимвол > "А" И ПервыйСимвол < "Я"
	    Или ПервыйСимвол > "а" И ПервыйСимвол < "я";
	
КонецФункции

#КонецОбласти

#Область ПараметрыОграниченияДоступаТекстыЗапросовДляСписка

// Основная функция области, которая является второй частью
// функции ПараметрыОграниченияПоСтруктуреОграничения, но
// не используется при подготовке хранимых параметров ограничения доступа,
// а используется при вызове функции ПараметрыОграничения.
//
Процедура ДобавитьТекстыЗапросовВПараметрыОграничения(Результат)
	
	Контекст = Результат.Контекст;
	Результат.Удалить("Контекст");
	
	ДобавитьТекстЗапросаДатыСледующегоЭлементаДанных(Результат, Контекст); 
	
	Если Результат.ОграничениеОтключено
	 Или Результат.ДоступЗапрещен
	 Или Результат.ИспользуетсяОграничениеПоВладельцу Тогда
		
		Если Контекст.СпискиСЗаписьюКлючейДоступа.Получить(Результат.Список) = Неопределено
		 Или Результат.ИспользуетсяОграничениеПоВладельцу Тогда
			// Запрос объектов или отборов записей.
			Результат.Вставить("ТекстЗапросаЭлементовДанныхДляОчисткиКлючей");
			ДобавитьТекстЗапросаЭлементовДанныхДляОчисткиКлючей(Результат, Контекст);
		Иначе
			// Запрос объектов или отборов записей.
			Результат.Вставить("ТекстЗапросаЭлементовДанныхСУстаревшимРазрешеннымКлючом");
			ДобавитьТекстЗапросаЭлементовДанныхСУстаревшимРазрешеннымКлючом(Результат, Контекст);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Имена таблиц ключа, содержащих используемые реквизиты ключа.
	Результат.Вставить("ТаблицыКлюча");
	// Запрос объектов или отборов записей.
	Результат.Вставить("ТекстЗапросаЭлементовДанныхСУстаревшимиКлючами");
	// Запрос значений объектов или отборов записей.
	Результат.Вставить("ТекстЗапросаЗначенийЭлементовДанныхДляКлючейДоступа");
	// Запрос значений из ключей доступа для сравнения со значениями из объектов или отборов записей.
	Результат.Вставить("ТекстЗапросаЗначенийИзКлючейДоступа");
	// Проверка прав Чтение и Изменение объекта или набора записей в базе данных.
	Результат.Вставить("ТекстЗапросаПроверкиПравЧтениеИзменение");
	// Проверка права Чтение объекта или набора записей в базе данных.
	Результат.Вставить("ТекстЗапросаПроверкиПраваЧтение");
	// Запрос отборов записей, которых нет в регистре ключей доступа регистров.
	Результат.Вставить("ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей");
	
	Контекст.Вставить("ОтдельныйРегистр", Истина); // Уточнение регистра ключей для нессылочных типов.
	
	Контекст.Вставить("ТаблицыКлюча",                   Новый Массив);
	Контекст.Вставить("ЧастиЗапросаПроверки",           Новый Массив);
	Контекст.Вставить("ЧастиЗапросаЗначенийИзОбъектов", Новый Массив);
	Контекст.Вставить("ЧастиЗапросаЗначенийИзКлючей",   Новый Массив);
	
	// Формирование запроса элементов данных с устаревшими ключами.
	ЗаполнитьШаблоныЧастейЗапросаПроверки(Контекст);
	
	ДобавитьПроверкуШапкиКлюча(Контекст, 0);
	ДобавитьПроверкуШапкиКлюча(Контекст, 1);
	ДобавитьПроверкуШапкиКлюча(Контекст, 2);
	
	Для НомерТабличнойЧастиКлюча = 1 По Контекст.КоличествоТабличныхЧастейКлюча Цикл
		ДобавитьПроверкуТабличнойЧастиКлюча(Контекст, НомерТабличнойЧастиКлюча);
	КонецЦикла;
	СобратьЧастиЗапросаПроверки(Результат, Контекст);
	
	// Формирование запросов значений из элементов данных и из ключей.
	ДобавитьЗаполнениеШапкиКлюча(Контекст, 0);
	ДобавитьЗаполнениеШапкиКлюча(Контекст, 1);
	ДобавитьЗаполнениеШапкиКлюча(Контекст, 2);
	
	Для НомерТабличнойЧастиКлюча = 1 По Контекст.КоличествоТабличныхЧастейКлюча Цикл
		ДобавитьЗаполнениеТабличнойЧастиКлюча(Контекст, НомерТабличнойЧастиКлюча);
	КонецЦикла;
	ДобавитьВыборПустыхКлючей(Контекст);
	СобратьЧастиЗапросовЗаполнения(Результат, Контекст);
	
	Результат.ТаблицыКлюча = Контекст.ТаблицыКлюча;
	
	// Формирование запросов проверки прав.
	ЗаполнитьЗапросыПроверкиПравЧтениеИзменение(Результат, Контекст);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьТекстЗапросаДатыСледующегоЭлементаДанных(Результат, Контекст)
	
	Если Не Результат.ЭтоСсылочныйТип Или Не Результат.СписокСДатой Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущийСписок.Дата КАК Дата
	|ИЗ
	|	&ТекущийСписок КАК ТекущийСписок
	|ГДЕ
	|	ТекущийСписок.Дата < &ДатаНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущийСписок.Дата УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийСписок", Результат.Список);
	
	Результат.Вставить("ТекстЗапросаДатыСледующегоЭлементаДанных", ТекстЗапроса);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьТекстЗапросаЭлементовДанныхДляОчисткиКлючей(Результат, Контекст)
	
	Если Результат.ЭтоСсылочныйТип Тогда
		ЗаполнитьШаблоныЧастейЗапросаПроверкиОбъекта(Контекст);
		ТекстЗапроса = Контекст.ТекстЧастиЗапросаПроверки;
		
		Если Результат.БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей Тогда
			Условие = "НЕ КлючиДоступаКОбъектам.Объект ЕСТЬ NULL";
		Иначе
			Если Результат.ДляВнешнихПользователей Тогда
				Условие =
				"	НЕ КлючиДоступаКОбъектам.Объект ЕСТЬ NULL
				|	И КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей <> ЗНАЧЕНИЕ(Справочник.КлючиДоступа.ПустаяСсылка)";
			Иначе
				Условие =
				"	НЕ КлючиДоступаКОбъектам.Объект ЕСТЬ NULL
				|	И КлючиДоступаКОбъектам.КлючДоступаПользователей <> ЗНАЧЕНИЕ(Справочник.КлючиДоступа.ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Соединения", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Условие", Условие);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийСписок", Результат.Список);
		
		Результат.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей = ТекстЗапроса;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИмяОтдельногоРегистраКлючей) Тогда
		ИмяРегистра = Результат.ИмяОтдельногоРегистраКлючей;
		ОпорныеПоляДляУпорядочения = "";
		ОпорныеПоляДляОтбора = "";
	Иначе
		ИмяРегистра                = "КлючиДоступаКРегистрам";
		ОпорныеПоляДляОтбора       = "КлючиДоступаКРегистрам.Регистр = &ИдентификаторРегистра";
		ОпорныеПоляДляУпорядочения = "КлючиДоступаКРегистрам.Регистр";
	КонецЕсли;
	
	Если Результат.БезЗаписиКлючейДоступаДляПользователейИВнешнихПользователей Тогда
		ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
		|	И ") + "КлючиДоступаКРегистрам.ДляВнешнихПользователей >= ЛОЖЬ";
	Иначе
		Если Результат.ДляВнешнихПользователей Тогда
			ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
			|	И ") + "КлючиДоступаКРегистрам.ДляВнешнихПользователей = ИСТИНА";
		Иначе
			ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
			|	И ") + "КлючиДоступаКРегистрам.ДляВнешнихПользователей = ЛОЖЬ";
		КонецЕсли;
	КонецЕсли;
	
	ПоляВыбора = "КлючиДоступаКРегистрам.ДляВнешнихПользователей";
	Для НомерПоля = 1 По Контекст.ОпорныеПоля.МаксимальноеКоличество Цикл
		ПоляВыбора = ПоляВыбора + ?(ПоляВыбора = "", "", ",
		|	") + "КлючиДоступаКРегистрам.Поле" + НомерПоля + " КАК Поле" + НомерПоля;
		
		ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
		|	И ") + "КлючиДоступаКРегистрам.Поле" + НомерПоля + " >= &Поле" + НомерПоля;
		
		ОпорныеПоляДляУпорядочения = ОпорныеПоляДляУпорядочения + ?(ОпорныеПоляДляУпорядочения = "", "", ",
		|	") + "КлючиДоступаКРегистрам.Поле" + НомерПоля;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	" + ТекстСОтступом(СокрЛ(ПоляВыбора), "	") +"
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК КлючиДоступаКРегистрам
	|ГДЕ
	|	" + ОпорныеПоляДляОтбора + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + ОпорныеПоляДляУпорядочения;
	
	Результат.ТекстЗапросаЭлементовДанныхДляОчисткиКлючей = ТекстЗапроса;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьТекстЗапросаЭлементовДанныхСУстаревшимРазрешеннымКлючом(Результат, Контекст)
	
	Если Не Результат.ЭтоСсылочныйТип Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьШаблоныЧастейЗапросаПроверкиОбъекта(Контекст);
	ТекстЗапроса = Контекст.ТекстЧастиЗапросаПроверки;
	
	Условие = "КлючиДоступаКОбъектам.Объект ЕСТЬ NULL";
	Если Результат.ДляВнешнихПользователей Тогда
		УсловиеСоединения = "	И КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей = &РазрешенныйКлючДоступа";
	Иначе
		УсловиеСоединения = "	И КлючиДоступаКОбъектам.КлючДоступаПользователей = &РазрешенныйКлючДоступа";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Соединения", УсловиеСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Условие", Условие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийСписок", Результат.Список);
	
	Результат.ТекстЗапросаЭлементовДанныхСУстаревшимРазрешеннымКлючом = ТекстЗапроса;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ЗаполнитьШаблоныЧастейЗапросаПроверки(Контекст)
	
	Если Контекст.ЭтоСсылочныйТип Тогда
		ЗаполнитьШаблоныЧастейЗапросаПроверкиОбъекта(Контекст);
	Иначе
		ЗаполнитьШаблоныЧастейЗапросаПроверкиРегистра(Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ЗаполнитьШаблоныЧастейЗапросаПроверки.
Процедура ЗаполнитьШаблоныЧастейЗапросаПроверкиОбъекта(Контекст)
	
	Контекст.Вставить("ТекстПолногоЗапросаПроверки");
	Контекст.Вставить("ТекстОберткиЧастиЗапросаПроверки");
	Контекст.Вставить("ТекстЧастиЗапросаПроверки");
	
	Если Контекст.СписокСДатой Тогда
		Контекст.ТекстПолногоЗапросаПроверки =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ЧастиТекущегоСписка.ТекущаяСсылка КАК ТекущаяСсылка,
		|	ЧастиТекущегоСписка.Дата КАК Дата
		|ИЗ 
		|	(#ЗапросыОбъектовПоЧастям
		|	
		|	) КАК ЧастиТекущегоСписка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЧастиТекущегоСписка.Дата УБЫВ";
		
		Контекст.ТекстОберткиЧастиЗапросаПроверки =
		"ВЫБРАТЬ
		|	ЧастьТекущегоСписка.ТекущаяСсылка КАК ТекущаяСсылка,
		|	ЧастьТекущегоСписка.Дата КАК Дата
		|ИЗ
		|	(#ЗапросЧастиОбъектов) КАК ЧастьТекущегоСписка";
		
		Контекст.ТекстЧастиЗапросаПроверки =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ТекущийСписок.Ссылка КАК ТекущаяСсылка,
		|	ТекущийСписок.Дата КАК Дата
		|ИЗ
		|	&ТекущийСписок КАК ТекущийСписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
		|		ПО (КлючиДоступаКОбъектам.Объект = ТекущийСписок.Ссылка)
		|		#Соединения
		|ГДЕ
		|	#Условие
		|	И ТекущийСписок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущийСписок.Дата УБЫВ";
	Иначе
		Контекст.ТекстПолногоЗапросаПроверки =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ЧастиТекущегоСписка.ТекущаяСсылка КАК ТекущаяСсылка
		|ИЗ (
		|	#ЗапросыОбъектовПоЧастям
		|	
		|	) КАК ЧастиТекущегоСписка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЧастиТекущегоСписка.ТекущаяСсылка";
		
		Контекст.ТекстОберткиЧастиЗапросаПроверки =
		"ВЫБРАТЬ
		|	ЧастьТекущегоСписка.ТекущаяСсылка КАК ТекущаяСсылка
		|ИЗ
		|	(#ЗапросЧастиОбъектов) КАК ЧастьТекущегоСписка";
		
		Контекст.ТекстЧастиЗапросаПроверки =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
		|	ТекущийСписок.Ссылка КАК ТекущаяСсылка
		|ИЗ
		|	&ТекущийСписок КАК ТекущийСписок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
		|		ПО (КлючиДоступаКОбъектам.Объект = ТекущийСписок.Ссылка)
		|		#Соединения
		|ГДЕ
		|	#Условие
		|	И ТекущийСписок.Ссылка >= &ПоследняяОбработаннаяСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущийСписок.Ссылка";
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ЗаполнитьШаблоныЧастейЗапросаПроверки.
Процедура ЗаполнитьШаблоныЧастейЗапросаПроверкиРегистра(Контекст)
	
	ОпорныеПоля = Контекст.ОпорныеПоля;
	ОпорныеПоля.Вставить("ДляВыбора",         "");
	ОпорныеПоля.Вставить("УсловиеСоединения", "");
	ОпорныеПоля.Вставить("ДляУпорядочения",   "");
	
	// Для запроса новых комбинаций.
	ОпорныеПоляДляВыбора = "";
	ОпорныеПоляУсловиеСоединения = "";
	ОпорныеПоляДляОтбора = "";
	ОпорныеПоляДляУпорядочения = "";
	
	Если Не ЗначениеЗаполнено(Контекст.ИмяОтдельногоРегистраКлючей) Тогда
		Контекст.ОтдельныйРегистр = Ложь;
		// Для запроса новых комбинаций.
		ОпорныеПоляУсловиеСоединения  = "(КлючиДоступаКРегистрам.Регистр = &ИдентификаторРегистра)";
		ОпорныеПоляДляОтбора          = "ТекущийСписок.Регистр = &ИдентификаторРегистра";
		// Для остальных запросов.
		ОпорныеПоля.УсловиеСоединения = "(ТекущийСписокИсточник.Регистр = ТекущийСписок.Регистр)";
	КонецЕсли;
	
	ОтборПоТипуПользователей = ?(Контекст.ДляВнешнихПользователей, "ИСТИНА", "ЛОЖЬ");
	
	// Для запроса новых комбинаций.
	ОпорныеПоляУсловиеСоединения = ОпорныеПоляУсловиеСоединения + ?(ОпорныеПоляУсловиеСоединения = "", "", "
	|			И ") + "(КлючиДоступаКРегистрам.ДляВнешнихПользователей = " + ОтборПоТипуПользователей + ")";
	
	ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
	|	И ") + "ТекущийСписок.ДляВнешнихПользователей = " + ОтборПоТипуПользователей;
	
	// Для остальных запросов.
	ОпорныеПоля.УсловиеСоединения = ОпорныеПоля.УсловиеСоединения + ?(ОпорныеПоля.УсловиеСоединения = "", "", "
	|	И ") + "(ТекущийСписокИсточник.ДляВнешнихПользователей = " + ОтборПоТипуПользователей + ")";
	
	Номер = 0;
	Для Каждого ИмяОпорногоПоля Из ОпорныеПоля.Используемые Цикл
		Номер = Номер + 1;
		
		// Для запроса новых комбинаций.
		ОпорныеПоляДляВыбора = ОпорныеПоляДляВыбора + ?(ОпорныеПоляДляВыбора = "", "", ",
		|	") + "ТекущийРегистр." + ИмяОпорногоПоля + " КАК Поле" + Номер;
		
		ОпорныеПоляУсловиеСоединения = ОпорныеПоляУсловиеСоединения + ?(ОпорныеПоляУсловиеСоединения = "", "", "
		|			И ") + "(КлючиДоступаКРегистрам.Поле" + Номер + " = ТекущийРегистр." + ИмяОпорногоПоля + ")";
		
		ОпорныеПоляДляУпорядочения = ОпорныеПоляДляУпорядочения + ?(ОпорныеПоляДляУпорядочения = "", "", ", ") + ИмяОпорногоПоля;
		
		// Для остальных запросов.
		ОпорныеПоля.ДляВыбора = ОпорныеПоля.ДляВыбора + ?(ОпорныеПоля.ДляВыбора = "", "", ",
		|	") + "ТекущийСписок.Поле" + Номер + " КАК Поле" + Номер;
		
		ОпорныеПоля.УсловиеСоединения = ОпорныеПоля.УсловиеСоединения + ?(ОпорныеПоля.УсловиеСоединения = "", "", "
		|	И ") + "(ТекущийСписокИсточник.Поле" + Номер + " = ТекущийСписок.Поле" + Номер + ")";
		
		ОпорныеПоляДляОтбора = ОпорныеПоляДляОтбора + ?(ОпорныеПоляДляОтбора = "", "", "
		|	И ") + "ТекущийСписок.Поле" + Номер + " >= &Поле" + Номер;
		
		ОпорныеПоля.ДляУпорядочения = ОпорныеПоля.ДляУпорядочения + ?(ОпорныеПоля.ДляУпорядочения = "", "", ", ") + "Поле" + Номер;
	КонецЦикла;
	
	// Для запроса новых комбинаций.
	НачальныйНомер = Номер + 1;
	Для Номер = НачальныйНомер По ОпорныеПоля.МаксимальноеКоличество Цикл
		ОпорныеПоляУсловиеСоединения = ОпорныеПоляУсловиеСоединения + ?(ОпорныеПоляУсловиеСоединения = "", "", "
		|			И ") + "(КлючиДоступаКРегистрам.Поле" + Номер + " = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null))";
	КонецЦикла;
	
	// Добавление запроса новых комбинаций.
	ТекстЗапросаНовыхКомбинаций =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	" + ОпорныеПоляДляВыбора + "
	|ИЗ
	|	&ТекущийРегистр КАК ТекущийРегистр
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ТекущийСписок КАК КлючиДоступаКРегистрам
	|		ПО " + ОпорныеПоляУсловиеСоединения + "
	|ГДЕ
	|	КлючиДоступаКРегистрам.Поле1 ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + ОпорныеПоляДляУпорядочения;
	
	Контекст.ЧастиЗапросаПроверки.Добавить(ТекстЗапросаНовыхКомбинаций);
	
	// Установка шаблонов запросов.
	Контекст.Вставить("ТекстПолногоЗапросаПроверки");
	Контекст.Вставить("ТекстОберткиЧастиЗапросаПроверки");
	Контекст.Вставить("ТекстЧастиЗапросаПроверки");
	
	Контекст.ТекстПолногоЗапросаПроверки =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	" + ОпорныеПоля.ДляВыбора + "
	|ИЗ (
	|	#ЗапросыОбъектовПоЧастям
	|	
	|	) КАК ЧастиТекущегоСписка
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + ОпорныеПоля.ДляУпорядочения;
	
	Контекст.ТекстПолногоЗапросаПроверки = СтрЗаменить(Контекст.ТекстПолногоЗапросаПроверки,
		"ТекущийСписок.", "ЧастиТекущегоСписка.");
	
	Контекст.ТекстОберткиЧастиЗапросаПроверки =
	"ВЫБРАТЬ
	|	" + ОпорныеПоля.ДляВыбора + "
	|ИЗ
	|	(#ЗапросЧастиОбъектов) КАК ЧастьТекущегоСписка";
	
	Контекст.ТекстОберткиЧастиЗапросаПроверки = СтрЗаменить(Контекст.ТекстОберткиЧастиЗапросаПроверки,
		"ТекущийСписок.", "ЧастьТекущегоСписка.");
	
	Контекст.ТекстЧастиЗапросаПроверки =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	" + ОпорныеПоля.ДляВыбора + "
	|ИЗ
	|	&ТекущийСписок КАК ТекущийСписок
	|		#Соединения
	|ГДЕ
	|	#Условие
	|	И " + ОпорныеПоляДляОтбора + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	" + ОпорныеПоля.ДляУпорядочения;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура СобратьЧастиЗапросаПроверки(Результат, Контекст)
	
	Если Контекст.ЭтоСсылочныйТип Тогда
		СобратьЧастиЗапросаПроверкиОбъекта(Результат, Контекст);
	Иначе
		СобратьЧастиЗапросаПроверкиРегистра(Результат, Контекст);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура СобратьЧастиЗапросаПроверкиОбъекта(Результат, Контекст)
	
	Если Контекст.ЧастиЗапросаПроверки.Количество() = 1 Тогда
		Контекст.ТекстПолногоЗапросаПроверки = Контекст.ЧастиЗапросаПроверки[0];
	Иначе
		ЗапросыОбъектовПоЧастям = "";
		Для Каждого ТекстЧастиЗапроса Из Контекст.ЧастиЗапросаПроверки Цикл
			Если ЗначениеЗаполнено(ЗапросыОбъектовПоЧастям) Тогда
				ЗапросыОбъектовПоЧастям = ЗапросыОбъектовПоЧастям + "
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	";
			КонецЕсли;
			ТекстЧастиЗапроса = СтрЗаменить(Контекст.ТекстОберткиЧастиЗапросаПроверки,
				"#ЗапросЧастиОбъектов", ТекстСОтступом(ТекстЧастиЗапроса, "	"));
			ЗапросыОбъектовПоЧастям = ЗапросыОбъектовПоЧастям + ТекстСОтступом(ТекстЧастиЗапроса, "	");
		КонецЦикла;
		Контекст.ТекстПолногоЗапросаПроверки = СтрЗаменить(Контекст.ТекстПолногоЗапросаПроверки,
			"#ЗапросыОбъектовПоЧастям", ЗапросыОбъектовПоЧастям);
	КонецЕсли;
	
	ПодставитьОбщиеПараметрыВЗапрос(Контекст.ТекстПолногоЗапросаПроверки, Контекст);
	Результат.ТекстЗапросаЭлементовДанныхСУстаревшимиКлючами = Контекст.ТекстПолногоЗапросаПроверки;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура СобратьЧастиЗапросаПроверкиРегистра(Результат, Контекст)
	
	// Сборка частей запроса.
	ЗапросыОбъектовПоЧастям = "";
	Для Каждого ТекстЧастиЗапроса Из Контекст.ЧастиЗапросаПроверки Цикл
		Если ЗначениеЗаполнено(ЗапросыОбъектовПоЧастям) Тогда
			ЗапросыОбъектовПоЧастям = ЗапросыОбъектовПоЧастям + "
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	";
		КонецЕсли;
		ТекстЧастиЗапроса = СтрЗаменить(Контекст.ТекстОберткиЧастиЗапросаПроверки,
			"#ЗапросЧастиОбъектов", ТекстСОтступом(ТекстЧастиЗапроса, "	"));
		ЗапросыОбъектовПоЧастям = ЗапросыОбъектовПоЧастям + ТекстСОтступом(ТекстЧастиЗапроса, "	");
	КонецЦикла;
	Контекст.ТекстПолногоЗапросаПроверки = СтрЗаменить(Контекст.ТекстПолногоЗапросаПроверки,
		"#ЗапросыОбъектовПоЧастям", ЗапросыОбъектовПоЧастям);
	
	ПодставитьОбщиеПараметрыВЗапрос(Контекст.ТекстПолногоЗапросаПроверки, Контекст);
	Результат.ТекстЗапросаЭлементовДанныхСУстаревшимиКлючами = Контекст.ТекстПолногоЗапросаПроверки;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура СобратьЧастиЗапросовЗаполнения(Результат, Контекст)
	
	ТекстЗапроса = "";
	Для Каждого ТекстЧастиЗапроса Из Контекст.ЧастиЗапросаЗначенийИзОбъектов Цикл
		ТекстЗапроса = ТекстЗапроса
			+ ?(ЗначениеЗаполнено(ТекстЗапроса), ОбщегоНазначения.РазделительПакетаЗапросов(), "")
			+ ТекстЧастиЗапроса;
	КонецЦикла;
	ПодставитьОбщиеПараметрыВЗапрос(ТекстЗапроса, Контекст);
	Результат.ТекстЗапросаЗначенийЭлементовДанныхДляКлючейДоступа = ТекстЗапроса;
	
	ТекстЗапроса = "";
	Для Каждого ТекстЧастиЗапроса Из Контекст.ЧастиЗапросаЗначенийИзКлючей Цикл
		ТекстЗапроса = ТекстЗапроса
			+ ?(ЗначениеЗаполнено(ТекстЗапроса), ОбщегоНазначения.РазделительПакетаЗапросов(), "")
			+ ТекстЧастиЗапроса;
	КонецЦикла;
	ПодставитьОбщиеПараметрыВЗапрос(ТекстЗапроса, Контекст);
	Результат.ТекстЗапросаЗначенийИзКлючейДоступа = ТекстЗапроса;
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ЗаполнитьЗапросыПроверкиПравЧтениеИзменение(Результат, Контекст)
	
	Если Контекст.ИмяКоллекцииТипа = "ЖурналыДокументов" Тогда
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваОграниченияСписка(Контекст.Список, Контекст);
	
	Если Контекст.ЭтоСсылочныйТип
	 Или Свойства.ПолеВладельца <> Неопределено Тогда // ИспользуетсяОграничениеПоВладельцу.
		
		Если Свойства.ОграничениеЧерезКлючиДоступаПользователейИГруппДоступа Тогда
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|ГДЕ
				|	(КлючиДоступаКОбъектам.Объект = &Объект
				|				И ИСТИНА В
				|					(ВЫБРАТЬ ПЕРВЫЕ 1
				|						ИСТИНА
				|					ИЗ
				|						РегистрСведений.КлючиДоступаВнешнихПользователей КАК РазрешенныеКлючиДоступа
				|					ГДЕ
				|						РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей
				|						И РазрешенныеКлючиДоступа.ВнешнийПользователь = &АвторизованныйПользователь
				|						И РазрешенныеКлючиДоступа.Изменение)
				|			ИЛИ ИСТИНА В
				|				(ВЫБРАТЬ ПЕРВЫЕ 1
				|					ИСТИНА
				|				ИЗ
				|					РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
				|				ГДЕ
				|					РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей
				|					И РазрешенныеКлючиДоступа.ГруппаДоступа В (&ГруппыДоступаАвторизованногоПользователя)
				|					И РазрешенныеКлючиДоступа.Изменение))";
			Иначе
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаПользователей КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКОбъектам.Объект = &Объект)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаПользователей)
				|			И (РазрешенныеКлючиДоступа.Пользователь = &АвторизованныйПользователь)
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			КонецЕсли;
		ИначеЕсли Свойства.ОграничениеЧерезКлючиДоступаПользователей Тогда
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаВнешнихПользователей КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКОбъектам.Объект = &Объект)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей)
				|			И (РазрешенныеКлючиДоступа.ВнешнийПользователь = &АвторизованныйПользователь)
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			Иначе
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаПользователей КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКОбъектам.Объект = &Объект)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаПользователей)
				|			И (РазрешенныеКлючиДоступа.Пользователь = &АвторизованныйПользователь)
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			КонецЕсли;
		Иначе
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКОбъектам.Объект = &Объект)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаВнешнихПользователей)
				|			И (РазрешенныеКлючиДоступа.ГруппаДоступа В (&ГруппыДоступаАвторизованногоПользователя))
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			Иначе
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКОбъектам.Объект = &Объект)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКОбъектам.КлючДоступаПользователей)
				|			И (РазрешенныеКлючиДоступа.ГруппаДоступа В (&ГруппыДоступаАвторизованногоПользователя))
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			КонецЕсли;
		КонецЕсли;
		Если Контекст.ЭтоСсылочныйТип И Свойства.ПолеВладельца <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&Объект", "ВЫРАЗИТЬ(&Объект КАК " + Контекст.Список + ")." + Свойства.ПолеВладельца.Имя);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Контекст.ЭтоСсылочныйТип Тогда
		Если Свойства.ПолеВладельца <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&Объект", "ТекущаяТаблица." + Свойства.ПолеВладельца.Имя);
			
		ИначеЕсли Свойства.ОграничениеЧерезКлючиДоступаПользователей Тогда
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаВнешнихПользователей КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ИСТИНА)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКРегистрам.КлючДоступа)
				|			И (РазрешенныеКлючиДоступа.ВнешнийПользователь = &АвторизованныйПользователь)
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			Иначе
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаПользователей КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ЛОЖЬ)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКРегистрам.КлючДоступа)
				|			И (РазрешенныеКлючиДоступа.Пользователь = &АвторизованныйПользователь)
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			КонецЕсли;
		Иначе
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ИСТИНА)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКРегистрам.КлючДоступа)
				|			И (РазрешенныеКлючиДоступа.ГруппаДоступа В (&ГруппыДоступаАвторизованногоПользователя))
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			Иначе
				ТекстЗапроса =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ИСТИНА КАК ЗначениеИстина
				|ИЗ
				|	РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаГруппДоступа КАК РазрешенныеКлючиДоступа
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ЛОЖЬ)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|			И (РазрешенныеКлючиДоступа.КлючДоступа = КлючиДоступаКРегистрам.КлючДоступа)
				|			И (РазрешенныеКлючиДоступа.ГруппаДоступа В (&ГруппыДоступаАвторизованногоПользователя))
				|			И (РазрешенныеКлючиДоступа.Изменение)";
			КонецЕсли;
		КонецЕсли;
		
		Если Свойства.ПолеВладельца = Неопределено Тогда
			УточнитьРегистрКлючейИУсловиеСоединения(ТекстЗапроса, Результат, Контекст);
			
			Если Контекст.ДляВнешнихПользователей Тогда
				ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&ТекущаяТаблицаПоле1 КАК ТекущаяТаблицаПоле1
				|ИЗ
				|	&Список КАК ТекущаяТаблица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ИСТИНА)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|ГДЕ
				|	&ОтборПоИзмерениям
				|	И КлючиДоступаКРегистрам.ДляВнешнихПользователей ЕСТЬ NULL";
			Иначе
				ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	&ТекущаяТаблицаПоле1 КАК ТекущаяТаблицаПоле1
				|ИЗ
				|	&Список КАК ТекущаяТаблица
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаКРегистрам КАК КлючиДоступаКРегистрам
				|		ПО (КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))
				|			И (КлючиДоступаКРегистрам.ДляВнешнихПользователей = ЛОЖЬ)
				|			И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)
				|ГДЕ
				|	&ОтборПоИзмерениям
				|	И КлючиДоступаКРегистрам.ДляВнешнихПользователей ЕСТЬ NULL";
			КонецЕсли;
			УточнитьРегистрКлючейИУсловиеСоединения(ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей,
				Результат, Контекст, Истина);
			
			Результат.ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей =
				ТекстЗапросаНовыхКомбинацийЗначенийОпорныхПолей;
		КонецЕсли;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛОЖЬ КАК ЗначениеЛожь
		|ИЗ
		|	" + Контекст.Список + " КАК ТекущаяТаблица
		|ГДЕ
		|	&ОтборПоИзмерениям
		|	И НЕ ИСТИНА В
		|				(" + ТекстСОтступом(ТекстЗапроса, "				") + ")";
	КонецЕсли;
	
	Результат.ТекстЗапросаПроверкиПравЧтениеИзменение = ТекстЗапроса;
	Если Не Результат.ОграничениеЧтенияОтключено Тогда
		Результат.ТекстЗапросаПроверкиПраваЧтение = СтрЗаменить(ТекстЗапроса,
			"РазрешенныеКлючиДоступа.Изменение", "Истина");
	КонецЕсли;
	
	Если Свойства.ПолеВладельца <> Неопределено
	   И Свойства.ПолеВладельца.ИзменениеКакЧтение Тогда
		Результат.ТекстЗапросаПроверкиПравЧтениеИзменение = Результат.ТекстЗапросаПроверкиПраваЧтение;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ЗаполнитьЗапросыПроверкиПравЧтениеИзменение.
Процедура УточнитьРегистрКлючейИУсловиеСоединения(ТекстЗапроса, Результат, Контекст, ДобавитьПоляВыбора = Ложь)
	
	Если ЗначениеЗаполнено(Результат.ИмяОтдельногоРегистраКлючей) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрСведений.КлючиДоступаКРегистрам",
			"РегистрСведений." + Результат.ИмяОтдельногоРегистраКлючей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"КлючиДоступаКРегистрам.Регистр = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)",
			"ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"ИдентификаторыОбъектовМетаданных.ПустаяСсылка",
			УправлениеДоступомСлужебныйПовтИсп.ОписаниеПредопределенногоИдентификатораОбъектаМетаданных(
				Контекст.Список));
	КонецЕсли;
	
	УсловиеСоединения = "";
	НомерПоля = 1;
	Для Каждого Поле Из Результат.ОпорныеПоля.Используемые Цикл
		УсловиеСоединения = УсловиеСоединения + Символы.ПС
			+ "И (КлючиДоступаКРегистрам.Поле" + НомерПоля + " = ТекущаяТаблица." + Поле + ")";
		НомерПоля = НомерПоля + 1;
	КонецЦикла;
	Для ТекущийНомер = НомерПоля По Результат.ОпорныеПоля.МаксимальноеКоличество Цикл
		УсловиеСоединения = УсловиеСоединения + Символы.ПС
			+ "И (КлючиДоступаКРегистрам.Поле" + ТекущийНомер
			+ " = Значение(Перечисление.ДополнительныеЗначенияДоступа.Null))";
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"И (КлючиДоступаКРегистрам.Поле1 = &ТекущаяТаблицаПоле1)",
		ТекстСОтступом(СокрЛ(УсловиеСоединения), "			"));
	
	Если Не ДобавитьПоляВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ПоляВыбора = "";
	НомерПоля = 1;
	Для Каждого Поле Из Результат.ОпорныеПоля.Используемые Цикл
		ПоляВыбора = ПоляВыбора + ?(ПоляВыбора = "", "", "," + Символы.ПС)
			+ "ТекущаяТаблица." + Поле + " КАК Поле" + НомерПоля;
		НомерПоля = НомерПоля + 1;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекущаяТаблицаПоле1 КАК ТекущаяТаблицаПоле1",
		ТекстСОтступом(СокрЛ(ПоляВыбора), "	"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Список", Контекст.Список);
	
КонецПроцедуры

// Для функции СобратьЧастиЗапросов.
Процедура ПодставитьОбщиеПараметрыВЗапрос(ТекстЗапроса, Контекст)
	
	Если Контекст.ДляВнешнихПользователей Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючДоступаПользователейКОбъекту", "КлючДоступаВнешнихПользователей");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючДоступаПользователейКОбъекту", "КлючДоступаПользователей");
	КонецЕсли;
	
	Если Контекст.ЭтоСсылочныйТип Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийСписок", Контекст.Список);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючиДоступаКДанным", "КлючиДоступаКОбъектам");
		
		Если Контекст.ДляВнешнихПользователей Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючДоступаПользователей", "КлючДоступаВнешнихПользователей");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючДоступаПользователей", "КлючДоступаПользователей");
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийРегистр", Контекст.Список);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючиДоступаКДанным", "ТекущийСписок");
		Номер = 0;
		Для Каждого ИмяОпорногоПоля Из Контекст.ОпорныеПоля.Используемые Цикл
			Номер = Номер + 1;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекущийСписок."
				+ ИмяОпорногоПоля, "ТекущийСписок.Поле" + Номер);
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТекущийСписокИсточник."
				+ ИмяОпорногоПоля, "ТекущийСписокИсточник.Поле" + Номер);
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущийСписок", ?(Контекст.ИмяОтдельногоРегистраКлючей = "",
			"РегистрСведений.КлючиДоступаКРегистрам", "РегистрСведений." + Контекст.ИмяОтдельногоРегистраКлючей));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#КлючДоступаПользователей", "КлючДоступа");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоставПолей", Формат(Контекст.СоставПолей, "ЧГ="));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДляВнешнихПользователей",
		?(Контекст.ДляВнешнихПользователей, "ИСТИНА", "ЛОЖЬ"));
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьПроверкуШапкиКлюча(Контекст, НомерШапки)
	
	ГруппаПолей = Контекст.ГруппыПолей.Получить("Шапка" + НомерШапки);
	Если ГруппаПолей = Неопределено Тогда
		Если НомерШапки > 0 Тогда
			Возврат;
		КонецЕсли;
		СоединенияИПоля = Новый Структура("Соединения, Поля", "", "");
	Иначе
		СоединенияИПоля = СоединенияИПоляПоТаблицам(ГруппаПолей,
			Ложь, НомерШапки).Получить("ТекущийСписок");
	КонецЕсли;
	
	Если НомерШапки = 0 Тогда
		Соединения = СоединенияИПоля.Соединения + "
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиДоступа КАК Шапка0
		|ПО " + ?(Контекст.ОтдельныйРегистр, "", "(ТекущийСписок.Регистр = &ИдентификаторРегистра)
		|	И ") + "(Шапка0.Ссылка = #КлючиДоступаКДанным.#КлючДоступаПользователей)
		|	И (Шапка0.СоставПолей = &СоставПолей)";
	Иначе
		Соединения = СоединенияИПоля.Соединения + "
		|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиДоступа.Шапка КАК Шапка?
		|ПО " + ?(Контекст.ОтдельныйРегистр, "", "(ТекущийСписок.Регистр = &ИдентификаторРегистра)
		|	И ") + "(Шапка?.Ссылка = #КлючиДоступаКДанным.#КлючДоступаПользователей)
		|	И (Шапка?.НомерСтроки = " + НомерШапки + ")";
	КонецЕсли;
	
	Соединения = СокрЛ(Соединения) + ТекстСОтступом(СоединенияИПоля.Поля, "	");
	Соединения = ТекстСОтступом(Соединения, "		");
	
	Условие = "Шапка?.Ссылка ЕСТЬ NULL";
	Условие = ТекстСОтступом(Условие, "	");
	
	ТекстЧастиЗапроса = Контекст.ТекстЧастиЗапросаПроверки;
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Соединения", Соединения);
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Условие",    Условие);
	
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "Шапка?", "Шапка" + НомерШапки);
	Контекст.ЧастиЗапросаПроверки.Добавить(ТекстЧастиЗапроса);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьПроверкуТабличнойЧастиКлюча(Контекст, НомерТабличнойЧастиКлюча)
	
	ТаблицыПоГруппам  = Контекст.ГруппыДополнительныхТаблиц.ТаблицыПоГруппам;
	ГруппаДополнительныхТаблиц = ТаблицыПоГруппам.Получить(НомерТабличнойЧастиКлюча);
	
	ИмяТабличнойЧастиКлюча = "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча;
	ГруппаПолей = Контекст.ГруппыПолей.Получить(ИмяТабличнойЧастиКлюча);
	
	СоединенияИПоляПоТаблицам = СоединенияИПоляПоТаблицам(ГруппаПолей,
		Истина, , , ВГруппеОднаДополнительнаяТаблицаСПолями(Контекст, ГруппаДополнительныхТаблиц));
	
	Соединения = "";
	Условие = "";
	Поля = "";
	
	Если ГруппаДополнительныхТаблиц = Неопределено Тогда
		ПсевдонимТабличнойЧастиОбъекта = Контекст.ПсевдонимыТабличныхЧастейОбъекта.Получить(НомерТабличнойЧастиКлюча);
		ИмяТабличнойЧастиОбъекта = СтрЗаменить(ПсевдонимТабличнойЧастиОбъекта, "ТекущийСписок", "");
		СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(ПсевдонимТабличнойЧастиОбъекта);
		Соединения = Соединения + "
		|ЛЕВОЕ СОЕДИНЕНИЕ &ТекущийСписок." + ИмяТабличнойЧастиОбъекта + " КАК " + ПсевдонимТабличнойЧастиОбъекта + "
		|ПО " + ПсевдонимТабличнойЧастиОбъекта + ".Ссылка = ТекущийСписок.Ссылка"
		+ СоединенияИПоля.Соединения;
		Условие = ПсевдонимТабличнойЧастиОбъекта + ".Ссылка #ПроверкаNULL";
		Поля = СоединенияИПоля.Поля;
	Иначе
		Для Каждого ДополнительнаяТаблица Из ГруппаДополнительныхТаблиц Цикл
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ДополнительнаяТаблица.Таблица + " КАК " + ДополнительнаяТаблица.Псевдоним + "
			|ПО " + ?(Контекст.ОтдельныйРегистр, "", "(ТекущийСписок.Регистр = &ИдентификаторРегистра)
			|	И ") + ТекстСОтступом(ДополнительнаяТаблица.ТекстУсловияСоединения, "	");
			СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(ДополнительнаяТаблица.Псевдоним);
			Если СоединенияИПоля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Соединения = Соединения + СоединенияИПоля.Соединения;
			Условие = Условие + ?(Условие = "", "", "
			|ИЛИ ") + ДополнительнаяТаблица.ПолеПроверкиСоединения + " #ПроверкаNULL";
			Поля = Поля + СоединенияИПоля.Поля;
		КонецЦикла;
		Если СтрЧислоСтрок(Условие) > 1 Тогда
			Условие = "(" + Условие + ")";
		КонецЕсли;
	КонецЕсли;
	ИсходныеСоединения = Соединения;
	ИсходноеУсловие = Условие;
	
	// Прямое соединение (проверка наличия требуемых записей в ключе).
	Соединения = ИсходныеСоединения + "
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиДоступа.ТабличнаяЧасть? КАК ТабличнаяЧасть?
	|ПО (ТабличнаяЧасть?.Ссылка = #КлючиДоступаКДанным.#КлючДоступаПользователей)";
	Соединения = СокрЛ(Соединения) + ТекстСОтступом(Поля, "	");
	Соединения = ТекстСОтступом(Соединения, "		");
	
	Условие =
	"ТабличнаяЧасть?.Ссылка ЕСТЬ NULL
	|И " + ТекстСОтступом(СокрЛ(ИсходноеУсловие), "	");
	Условие = ТекстСОтступом(Условие, "	");
	Условие = СтрЗаменить(Условие, "#ПроверкаNULL", "ЕСТЬ НЕ NULL");
	
	ТекстЧастиЗапроса = Контекст.ТекстЧастиЗапросаПроверки;
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Соединения",     Соединения);
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Условие",        Условие);
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "ТабличнаяЧасть?", ИмяТабличнойЧастиКлюча);
	Контекст.ЧастиЗапросаПроверки.Добавить(ТекстЧастиЗапроса);
	
	// Обратное соединение (проверка отсутствия лишних записей в ключе).
	Если ГруппаДополнительныхТаблиц = Неопределено
	 Или ГруппаДополнительныхТаблиц.Количество() = 1 Тогда
		
		Соединения =
		"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиДоступа.ТабличнаяЧасть? КАК ТабличнаяЧасть?
		|ПО " + ?(Контекст.ОтдельныйРегистр, "", "(ТекущийСписок.Регистр = &ИдентификаторРегистра)
		|	И ") + "(ТабличнаяЧасть?.Ссылка = #КлючиДоступаКДанным.#КлючДоступаПользователей)";
		
		Если ГруппаДополнительныхТаблиц = Неопределено Тогда
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ &ТекущийСписок." + ИмяТабличнойЧастиОбъекта + " КАК " + ПсевдонимТабличнойЧастиОбъекта
				  + ТекстСОтступом(СоединенияИПоля.Соединения, "	") + "
			|ПО " + ПсевдонимТабличнойЧастиОбъекта + ".Ссылка = ТекущийСписок.Ссылка"
			      + ТекстСОтступом(СоединенияИПоля.Поля, "	");
		Иначе
			ДополнительнаяТаблица = ГруппаДополнительныхТаблиц[0];
			СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(ДополнительнаяТаблица.Псевдоним);
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ДополнительнаяТаблица.Таблица + " КАК " + ДополнительнаяТаблица.Псевдоним
				  + ТекстСОтступом(СоединенияИПоля.Соединения, "	") + "
			|ПО " + ТекстСОтступом(ДополнительнаяТаблица.ТекстУсловияСоединения, "	")
			      + ТекстСОтступом(СоединенияИПоля.Поля, "	");
		КонецЕсли;
		Соединения = ТекстСОтступом(Соединения, "		");
		
		Если Контекст.ЭтоСсылочныйТип Тогда
			Условие =
			"(КлючиДоступаКОбъектам.Объект ЕСТЬ NULL
			|		ИЛИ ТабличнаяЧасть?.Ссылка ЕСТЬ НЕ NULL
			|			И " + ТекстСОтступом(СокрЛ(ИсходноеУсловие), "			") + ")";
		Иначе
			Условие =
			"ТабличнаяЧасть?.Ссылка ЕСТЬ НЕ NULL
			|И " + СокрЛ(ИсходноеУсловие);
		КонецЕсли;
		Условие = ТекстСОтступом(Условие, "	");
		Условие = СтрЗаменить(Условие, "#ПроверкаNULL", "ЕСТЬ NULL");
	Иначе
		Соединения =
		"ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиДоступа.ТабличнаяЧасть? КАК ТабличнаяЧасть?
		|ПО " + ?(Контекст.ОтдельныйРегистр, "", "(ТекущийСписок#.Регистр = &ИдентификаторРегистра)
		|	И ") + "(ТабличнаяЧасть?.Ссылка = #КлючиДоступаКДанным.#КлючДоступаПользователей)
		|ЛЕВОЕ СОЕДИНЕНИЕ &ТекущийСписок КАК ТекущийСписокИсточник"
			+ ТекстСОтступом(ИсходныеСоединения, "	") + "
		|ПО " + ?(Контекст.ЭтоСсылочныйТип, "(ТекущийСписокИсточник.Ссылка = ТекущийСписок#.Ссылка)",
			Контекст.ОпорныеПоля.УсловиеСоединения);
		
		Соединения = Соединения + ТекстСОтступом(Поля, "	");
		Соединения = ТекстСОтступом(Соединения, "		");
		Соединения = СтрЗаменить(Соединения, "ТекущийСписок.", "ТекущийСписокИсточник.");
		Соединения = СтрЗаменить(Соединения, "ТекущийСписок#.", "ТекущийСписок.");
		
		Если Контекст.ЭтоСсылочныйТип Тогда
			Условие =
			"(КлючиДоступаКОбъектам.Объект ЕСТЬ NULL
			|		ИЛИ ТабличнаяЧасть?.Ссылка ЕСТЬ НЕ NULL
			|			И ТекущийСписокИсточник.Ссылка ЕСТЬ NULL)";
		Иначе
			Условие =
			"ТабличнаяЧасть?.Ссылка ЕСТЬ НЕ NULL
			|И ТекущийСписокИсточник.Поле1 ЕСТЬ NULL";
		КонецЕсли;
		Условие = ТекстСОтступом(Условие, "	");
	КонецЕсли;
	
	ТекстЧастиЗапроса = Контекст.ТекстЧастиЗапросаПроверки;
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Соединения",     Соединения);
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "#Условие",        Условие);
	ТекстЧастиЗапроса = СтрЗаменить(ТекстЧастиЗапроса, "ТабличнаяЧасть?", ИмяТабличнойЧастиКлюча);
	Контекст.ЧастиЗапросаПроверки.Добавить(ТекстЧастиЗапроса);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьЗаполнениеШапкиКлюча(Контекст, НомерШапки)
	
	Если Не Контекст.ЭтоСсылочныйТип И НомерШапки = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущийСписок.ТекущаяСсылка КАК ТекущаяСсылка,
		|	" + Контекст.ОпорныеПоля.ДляВыбора + "
		|	ПОМЕСТИТЬ ТекущийСписок
		|ИЗ
		|	&ЗначенияОпорныхПолей КАК ТекущийСписок";
		Контекст.ЧастиЗапросаЗначенийИзОбъектов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ГруппаПолей = Контекст.ГруппыПолей.Получить("Шапка" + НомерШапки);
	Если ГруппаПолей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Контекст.ТаблицыКлюча.Добавить("Шапка" + НомерШапки);
	
	СоединенияИПоля = СоединенияИПоляПоТаблицам(ГруппаПолей, Ложь,
		НомерШапки, Истина).Получить("ТекущийСписок");
	
	// Выбор значений из объектов для поиска и создания ключей доступа.
	Если Контекст.ЭтоСсылочныйТип Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущийСписок.Ссылка КАК ТекущаяСсылка" + ТекстСОтступом(СоединенияИПоля.Поля, "	") + "
		|ИЗ
		|	&ТекущийСписок КАК ТекущийСписок" + ТекстСОтступом(СоединенияИПоля.Соединения, "	") + "
		|ГДЕ
		|	ТекущийСписок.Ссылка В (&СсылкиНаОбъекты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущаяСсылка
		|ИТОГИ ПО
		|	ТекущаяСсылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущийСписок.ТекущаяСсылка КАК ТекущаяСсылка" + ТекстСОтступом(СоединенияИПоля.Поля, "	") + "
		|ИЗ
		|	ТекущийСписок КАК ТекущийСписок" + ТекстСОтступом(СоединенияИПоля.Соединения, "	") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущаяСсылка, " + Контекст.ОпорныеПоля.ДляУпорядочения + "
		|ИТОГИ ПО
		|	ТекущаяСсылка";
	КонецЕсли;
	
	Контекст.ЧастиЗапросаЗначенийИзОбъектов.Добавить(ТекстЗапроса);
	
	// Выбор значений из ключей доступа для сравнения со значениями требуемых ключей.
	Если НомерШапки = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Шапка0.Ссылка КАК ТекущаяСсылка" + ТекстСОтступом(СоединенияИПоля.Реквизиты, "	") + "
		|ИЗ
		|	Справочник.КлючиДоступа КАК Шапка0
		|ГДЕ
		|	Шапка0.Хеш В(&Хеши)
		|	И Шапка0.Список = &Список
		|	И Шапка0.СоставПолей = &СоставПолей
		|	И Шапка0.ДляВнешнихПользователей = &ДляВнешнихПользователей
		|	И Шапка0.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущаяСсылка
		|ИТОГИ ПО
		|	ТекущаяСсылка";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Шапка?.Ссылка КАК ТекущаяСсылка" + ТекстСОтступом(СоединенияИПоля.Реквизиты, "	") + "
		|ИЗ
		|	Справочник.КлючиДоступа.Шапка КАК Шапка?
		|ГДЕ
		|	Шапка?.НомерСтроки = " + НомерШапки + "
		|	И Шапка?.Ссылка.Хеш В(&Хеши)
		|	И Шапка?.Ссылка.Список = &Список
		|	И Шапка?.Ссылка.СоставПолей = &СоставПолей
		|	И Шапка?.Ссылка.ДляВнешнихПользователей = &ДляВнешнихПользователей
		|	И Шапка?.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущаяСсылка
		|ИТОГИ ПО
		|	ТекущаяСсылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Шапка?", "Шапка" + НомерШапки);
	Контекст.ЧастиЗапросаЗначенийИзКлючей.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьВыборПустыхКлючей(Контекст)
	
	Если Контекст.ГруппыПолей.Получить("Шапка0") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КлючиДоступа.Ссылка КАК ТекущаяСсылка
	|ИЗ
	|	Справочник.КлючиДоступа КАК КлючиДоступа
	|ГДЕ
	|	КлючиДоступа.Хеш В(&Хеши)
	|	И КлючиДоступа.Список = &Список
	|	И КлючиДоступа.СоставПолей = &СоставПолей
	|	И КлючиДоступа.ДляВнешнихПользователей = &ДляВнешнихПользователей
	|	И КлючиДоступа.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущаяСсылка";
	
	Контекст.ЧастиЗапросаЗначенийИзКлючей.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Для процедуры ДобавитьТекстыЗапросовВПараметрыОграничения.
Процедура ДобавитьЗаполнениеТабличнойЧастиКлюча(Контекст, НомерТабличнойЧастиКлюча)
	
	ТаблицыПоГруппам  = Контекст.ГруппыДополнительныхТаблиц.ТаблицыПоГруппам;
	ГруппаДополнительныхТаблиц = ТаблицыПоГруппам.Получить(НомерТабличнойЧастиКлюча);
	
	ИмяТабличнойЧастиКлюча = "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча;
	ГруппаПолей = Контекст.ГруппыПолей.Получить(ИмяТабличнойЧастиКлюча);
	Контекст.ТаблицыКлюча.Добавить(ИмяТабличнойЧастиКлюча);
	
	СоединенияИПоляПоТаблицам = СоединенияИПоляПоТаблицам(ГруппаПолей,
		Истина, , Истина, ВГруппеОднаДополнительнаяТаблицаСПолями(Контекст, ГруппаДополнительныхТаблиц));
	
	// Выбор значений из объектов для поиска и создания ключей доступа.
	Если ГруппаДополнительныхТаблиц = Неопределено Тогда
		ПсевдонимТабличнойЧастиОбъекта = Контекст.ПсевдонимыТабличныхЧастейОбъекта.Получить(НомерТабличнойЧастиКлюча);
		ИмяТабличнойЧастиОбъекта = СтрЗаменить(ПсевдонимТабличнойЧастиОбъекта, "ТекущийСписок", "");
		СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(ПсевдонимТабличнойЧастиОбъекта);
		ПоляВыбора = ТекстСОтступом(СоединенияИПоля.Поля, "	");
		Соединения = ТекстСОтступом(СоединенияИПоля.Соединения, "	");
		ПоляУпорядочения = СоединенияИПоля.ПоляУпорядочения;
		Реквизиты        = СоединенияИПоля.Реквизиты;
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	" + ПсевдонимТабличнойЧастиОбъекта + ".Ссылка КАК ТекущаяСсылка" + ПоляВыбора + "
		|ИЗ
		|	&ТекущийСписок." + ИмяТабличнойЧастиОбъекта + " КАК " + ПсевдонимТабличнойЧастиОбъекта + Соединения + "
		|ГДЕ
		|	" + ПсевдонимТабличнойЧастиОбъекта + ".Ссылка В (&СсылкиНаОбъекты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТекущаяСсылка" + ПоляУпорядочения + "
		|ИТОГИ ПО
		|	ТекущаяСсылка";
	Иначе
		ПоляВыбора = "";
		Соединения = "";
		Условие = "";
		ПоляУпорядочения = "";
		Реквизиты = "";
		Для Каждого ДополнительнаяТаблица Из ГруппаДополнительныхТаблиц Цикл
			СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(ДополнительнаяТаблица.Псевдоним);
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ДополнительнаяТаблица.Таблица + " КАК " + ДополнительнаяТаблица.Псевдоним + "
			|ПО " + ТекстСОтступом(ДополнительнаяТаблица.ТекстУсловияСоединения, "	");
			Если СоединенияИПоля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Соединения = Соединения + СоединенияИПоля.Соединения;
			Условие = Условие + ?(Условие = "", "", "
			|ИЛИ ") + ДополнительнаяТаблица.ПолеПроверкиСоединения + " ЕСТЬ НЕ NULL";
			ПоляВыбора       = ПоляВыбора       + СоединенияИПоля.Поля;
			ПоляУпорядочения = ПоляУпорядочения + СоединенияИПоля.ПоляУпорядочения;
			Реквизиты        = Реквизиты        + СоединенияИПоля.Реквизиты;
		КонецЦикла;
		Если СтрЧислоСтрок(Условие) > 1 Тогда
			Условие = "(" + Условие + ")";
		КонецЕсли;
		Если Контекст.ЭтоСсылочныйТип Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТекущийСписок.Ссылка КАК ТекущаяСсылка" + ТекстСОтступом(ПоляВыбора, "	") + "
			|ИЗ
			|	&ТекущийСписок КАК ТекущийСписок" + ТекстСОтступом(Соединения, "	") + "
			|ГДЕ
			|	ТекущийСписок.Ссылка В (&СсылкиНаОбъекты)
			|	И " + ТекстСОтступом(Условие, "	") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТекущаяСсылка" + ПоляУпорядочения + "
			|ИТОГИ ПО
			|	ТекущаяСсылка";
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТекущийСписок.ТекущаяСсылка КАК ТекущаяСсылка"  + ТекстСОтступом(ПоляВыбора, "	") + "
			|ИЗ
			|	ТекущийСписок КАК ТекущийСписок" + ТекстСОтступом(Соединения, "	") + "
			|ГДЕ
			|	" + ТекстСОтступом(Условие, "	") + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТекущаяСсылка, " + Контекст.ОпорныеПоля.ДляУпорядочения + ПоляУпорядочения + "
			|ИТОГИ ПО
			|	ТекущаяСсылка";
		КонецЕсли;
	КонецЕсли;
	
	Контекст.ЧастиЗапросаЗначенийИзОбъектов.Добавить(ТекстЗапроса);
	
	// Выбор значений из ключей доступа для сравнения со значениями требуемых ключей.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть?.Ссылка КАК ТекущаяСсылка" + ТекстСОтступом(Реквизиты, "	") + "
	|ИЗ
	|	Справочник.КлючиДоступа.ТабличнаяЧасть? КАК ТабличнаяЧасть?
	|ГДЕ
	|	ТабличнаяЧасть?.Ссылка.Хеш В(&Хеши)
	|	И ТабличнаяЧасть?.Ссылка.Список = &Список
	|	И ТабличнаяЧасть?.Ссылка.СоставПолей = &СоставПолей
	|	И ТабличнаяЧасть?.Ссылка.ДляВнешнихПользователей = &ДляВнешнихПользователей
	|	И ТабличнаяЧасть?.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТекущаяСсылка" + ПоляУпорядочения + "
	|ИТОГИ ПО
	|	ТекущаяСсылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТабличнаяЧасть?", "ТабличнаяЧасть" + НомерТабличнойЧастиКлюча);
	Контекст.ЧастиЗапросаЗначенийИзКлючей.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Для процедур ДобавитьПроверкуШапкиКлюча, ДобавитьПроверкуТабличнойЧастиКлюча.
Функция СоединенияИПоляПоТаблицам(ГруппаПолей, ТабличнаяЧастьКлюча, НомерШапки = 0, ДляВыбораЗначений = Ложь,
			ВГруппеОднаДополнительнаяТаблицаСПолями = Ложь)
	
	СоединенияИПоляПоТаблицам = Новый Соответствие;
	НомерРеквизита = 1 + ?(НомерШапки = 0, 0, 5);
	
	Для Каждого СвойстваПоля Из ГруппаПолей Цикл
		
		СоединенияИПоля = СоединенияИПоляПоТаблицам.Получить(СвойстваПоля.ПсевдонимТаблицы);
		Если СоединенияИПоля = Неопределено Тогда
			СоединенияИПоля = Новый Структура;
			СоединенияИПоля.Вставить("Соединения",       "");
			СоединенияИПоля.Вставить("Поля",             "");
			СоединенияИПоля.Вставить("ПоляУпорядочения", "");
			СоединенияИПоля.Вставить("Реквизиты",        "");
			СоединенияИПоляПоТаблицам.Вставить(СвойстваПоля.ПсевдонимТаблицы, СоединенияИПоля);
		КонецЕсли;
		
		Соединения = "";
		Если СвойстваПоля.ТипыСохраненияКлючейДоступа.Количество() > 0 Тогда
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиДоступаКОбъектам КАК КлючиДоступаКОбъектам?
			|ПО (КлючиДоступаКОбъектам?.Объект = #ИмяПоляДляЗапроса)";
		КонецЕсли;
		
		Если СвойстваПоля.ТипыСохраненияГруппЗначений.Количество() > 0 Тогда
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений?
			|ПО (ГруппыЗначений?.ЗначениеДоступа = #ИмяПоляДляЗапроса)
			|	И (ГруппыЗначений?.ГруппаДанных = 0)";
		КонецЕсли;
		
		Если СвойстваПоля.ТипыСохраненияТиповКонфигурации.Количество() > 0 Тогда
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ТипыКонфигурации?
			|ПО (ТИПЗНАЧЕНИЯ(ТипыКонфигурации?.ЗначениеПустойСсылки) = ТИПЗНАЧЕНИЯ(#ИмяПоляДляЗапроса))";
		КонецЕсли;
		
		Если СвойстваПоля.ТипыСохраненияТиповРасширений.Количество() > 0 Тогда
			Соединения = Соединения + "
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовРасширений КАК ТипыРасширений?
			|ПО (ТИПЗНАЧЕНИЯ(ТипыРасширений?.ЗначениеПустойСсылки) = ТИПЗНАЧЕНИЯ(#ИмяПоляДляЗапроса))";
		КонецЕсли;
		
		Поле = СравнениеПоля(СвойстваПоля, ВГруппеОднаДополнительнаяТаблицаСПолями);
		
		Если ДляВыбораЗначений Тогда
			Поле = СтрЗаменить(Поле, "Шапка?.Значение? = ", "");
			Поле = СтрЗаменить(Поле, "						", "			");
			Поле = "," + Символы.ПС + Сред(Поле, 5, СтрДлина(Поле) - 5) + " КАК Значение?";
			
			СоединенияИПоля.ПоляУпорядочения = СоединенияИПоля.ПоляУпорядочения
				+ ", " + "Значение" + НомерРеквизита;
			
			СоединенияИПоля.Реквизиты  = СоединенияИПоля.Реквизиты + ",
			|Шапка?.Значение"  + НомерРеквизита + " КАК Значение" + НомерРеквизита;
		КонецЕсли;
		
		ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, "Значение?");
		ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, "ГруппыЗначений?");
		ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, "КлючиДоступаКОбъектам?");
		ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, "ТипыКонфигурации?");
		ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, "ТипыРасширений?");
		
		Соединения = СтрЗаменить(Соединения, "#ИмяПоляДляЗапроса", СвойстваПоля.ИмяПоляДляЗапроса);
		Поле       = СтрЗаменить(Поле,       "#ИмяПоляДляЗапроса", СвойстваПоля.ИмяПоляДляЗапроса);
		
		Если ТабличнаяЧастьКлюча Тогда
			Поле = СтрЗаменить(Поле, "Шапка?", "ТабличнаяЧасть?");
			СоединенияИПоля.Реквизиты = СтрЗаменить(СоединенияИПоля.Реквизиты, "Шапка?", "ТабличнаяЧасть?");
		КонецЕсли;
		
		СоединенияИПоля.Соединения = СоединенияИПоля.Соединения + Соединения;
		СоединенияИПоля.Поля       = СоединенияИПоля.Поля       + Поле;
		НомерРеквизита = НомерРеквизита + 1;
	КонецЦикла;
	
	Возврат СоединенияИПоляПоТаблицам;
	
КонецФункции

// Для функции СоединенияИПоляПоТаблицам.
Функция ВГруппеОднаДополнительнаяТаблицаСПолями(Контекст, ГруппаДополнительныхТаблиц)
	
	Если ГруппаДополнительныхТаблиц = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ГруппаДополнительныхТаблиц.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПсевдонимыТаблицСПолями = Контекст.ГруппыДополнительныхТаблиц.ПсевдонимыТаблицСПолями;
	
	КоличествоДополнительныхТаблицСПолями = 0;
	Для Каждого ДополнительнаяТаблица Из ГруппаДополнительныхТаблиц Цикл
		Если ПсевдонимыТаблицСПолями.Получить(ДополнительнаяТаблица.Псевдоним) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КоличествоДополнительныхТаблицСПолями = КоличествоДополнительныхТаблицСПолями + 1;
	КонецЦикла;
	
	Возврат КоличествоДополнительныхТаблицСПолями = 1;
	
КонецФункции

// Для функции СоединенияИПоляПоТаблицам.
Функция СравнениеПоля(СвойстваПоля, ВГруппеОднаДополнительнаяТаблицаСПолями)
	
	КоличествоТиповПоля = СвойстваПоля.ТипКонечногоПоля.Типы().Количество();
	
	БезЗначенияНеопределено = КоличествоТиповПоля = 1;
	Если СвойстваПоля.Свойство("БезЗначенияNull") Тогда
		БезЗначенияNull = СвойстваПоля.БезЗначенияNull;
	Иначе
		БезЗначенияNull = БезЗначенияNull(СвойстваПоля, ВГруппеОднаДополнительнаяТаблицаСПолями);
	КонецЕсли;
	
	БезУточненияНеопределено = Не СвойстваПоля.ЕстьУточнениеНеопределено Или БезЗначенияНеопределено;
	БезУточненияNull         = Не СвойстваПоля.ЕстьУточнениеNull         Или БезЗначенияNull;
	
	// Сохранение только ключей доступа.
	Если СвойстваПоля.ТипыСохраненияПустойСсылки.Количество() = 0
	   И БезУточненияНеопределено
	   И БезУточненияNull
	   И СвойстваПоля.ТипыСохраненияКлючейДоступа.Количество() = КоличествоТиповПоля Тогда
		Возврат "
		|И (Шапка?.Значение? = ЕСТЬNULL(КлючиДоступаКОбъектам?.#КлючДоступаПользователейКОбъекту,
		|						ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null)))";
	КонецЕсли;
	
	// Сохранение только групп значений доступа.
	Если СвойстваПоля.ТипыСохраненияПустойСсылки.Количество() = 0
	   И БезУточненияНеопределено
	   И БезУточненияNull
	   И СвойстваПоля.ТипыСохраненияГруппЗначений.Количество() = КоличествоТиповПоля Тогда
		Возврат "
		|И (Шапка?.Значение? = ЕСТЬNULL(ГруппыЗначений?.ГруппаЗначенийДоступа,
		|						ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null)))";
	КонецЕсли;
	
	// Сохранение только значений.
	Если Не ЕстьПростойТип(СвойстваПоля.ТипКонечногоПоля)
	   И СвойстваПоля.ТипыСохраненияЗначений.Количество() = КоличествоТиповПоля Тогда
		
		Если БезЗначенияNull Тогда
			Возврат "
			|И (Шапка?.Значение? = #ИмяПоляДляЗапроса)";
		Иначе
			Возврат "
			|И (Шапка?.Значение? = ЕСТЬNULL(#ИмяПоляДляЗапроса,
			|						ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null)))";
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение одного ссылочного типа.
	Если БезУточненияNull
	   И КоличествоТиповПоля = 1
	   И СвойстваПоля.ТипыСохраненияТипов.Количество() = КоличествоТиповПоля
	   И СвойстваПоля.ТипыСохраненияТиповПростых.Количество() = 0 Тогда
		
		Если СвойстваПоля.ТипыСохраненияТиповРасширений.Количество() = 0 Тогда
			Возврат "
			|И (Шапка?.Значение? = ЕСТЬNULL(ТипыКонфигурации?.Ссылка,
			|						ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)))";
		Иначе
			Возврат "
			|И (Шапка?.Значение? = ЕСТЬNULL(ТипыРасширений?.Ссылка,
			|						ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка)))";
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение одного простого типа.
	Если БезУточненияNull
	   И КоличествоТиповПоля = 1
	   И СвойстваПоля.ТипыСохраненияТиповПростых.Количество() = 1 Тогда
		
		Возврат СтрЗаменить("
		|И (Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Тип#ИмяТипа))",
		"#ИмяТипа", СвойстваПоля.ТипыСохраненияТиповПростых[0]);
	КонецЕсли;
	
	Если СвойстваПоля.ТипыСохраненияТипаЗапрещенный.Количество() = КоличествоТиповПоля Тогда
		Возврат "
		|И (Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ТипЗапрещенный))";
	КонецЕсли;
	
	// Сохранение только значения Пусто.
	Если СвойстваПоля.ТипыСохраненияПусто.Количество() = КоличествоТиповПоля Тогда
		Возврат "
		|И (Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Пусто))";
	КонецЕсли;
	
	СравнениеПоля = "
	|И (ВЫБОР
	|	#СодержаниеВыбора
	|КОНЕЦ)";
	СодержаниеВыбора = "";
	
	СохранениеЗначенияБулево = СвойстваПоля.ТипыСохраненияЗначений.Найти(Тип("Булево")) <> Неопределено;
	
	Если Не БезЗначенияNull
	   И Не (СохранениеЗначенияБулево И КоличествоТиповПоля = 1) Тогда
		СодержаниеВыбора = СодержаниеВыбора + "
		|КОГДА #ИмяПоляДляЗапроса ЕСТЬ NULL
		|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null)";
	КонецЕсли;
	Если КоличествоТиповПоля > 1 Тогда
		СодержаниеВыбора = СодержаниеВыбора + "
		|КОГДА #ИмяПоляДляЗапроса = НЕОПРЕДЕЛЕНО
		|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Неопределено)";
	КонецЕсли;
	Если СохранениеЗначенияБулево Тогда
		Если КоличествоТиповПоля > 1 Тогда
			СодержаниеВыбора = СодержаниеВыбора + "
			|КОГДА #ИмяПоляДляЗапроса
			|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Истина)
			|КОГДА НЕ #ИмяПоляДляЗапроса
			|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Ложь)";
		Иначе
			СодержаниеВыбора = СодержаниеВыбора + "
			|КОГДА #ИмяПоляДляЗапроса
			|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Истина)
			|ИНАЧЕ Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Ложь)";
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьПроверкуПростогоТипаЕслиТребуется(СвойстваПоля, СодержаниеВыбора, "Булево");
	ДобавитьПроверкуПростогоТипаЕслиТребуется(СвойстваПоля, СодержаниеВыбора, "Число");
	ДобавитьПроверкуПростогоТипаЕслиТребуется(СвойстваПоля, СодержаниеВыбора, "Дата");
	ДобавитьПроверкуПростогоТипаЕслиТребуется(СвойстваПоля, СодержаниеВыбора, "Строка");
	
	ПроверкиПоТипам = Новый СписокЗначений;
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияКлючейДоступа,
		"Шапка?.Значение? = ЕСТЬNULL(КлючиДоступаКОбъектам?.#КлючДоступаПользователейКОбъекту,
		|					ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null))");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияГруппЗначений,
		"Шапка?.Значение? = ЕСТЬNULL(ГруппыЗначений?.ГруппаЗначенийДоступа,
		|					ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Null))");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияЗначений,
		"Шапка?.Значение? = #ИмяПоляДляЗапроса");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияПустойСсылки,
		"Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ПустаяСсылкаЛюбогоТипа)",
		"ЭтоПроверкаПустойСсылки");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияТиповКонфигурации,
		"Шапка?.Значение? = ЕСТЬNULL(ТипыКонфигурации?.Ссылка,
		|					ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка))");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияТиповРасширений,
		"Шапка?.Значение? = ЕСТЬNULL(ТипыРасширений?.Ссылка,
		|					ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка))");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияТипаЗапрещенный,
		"Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ТипЗапрещенный)");
	
	ДобавитьПроверкуПоТипам(ПроверкиПоТипам, СвойстваПоля.ТипыСохраненияПусто,
		"Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Пусто)");
	
	ПроверкиПоТипам.СортироватьПоПредставлению();
	
	Для Каждого ПроверкаПоТипам Из ПроверкиПоТипам Цикл
		Если ПроверкаПоТипам.Значение.Типы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверкиПоТипам.Индекс(ПроверкаПоТипам) < ПроверкиПоТипам.Количество() - 1 Тогда
			ПроверкаТипов = "";
			Для Каждого Тип Из ПроверкаПоТипам.Значение.Типы Цикл
				Если ЭтоПростойТип(Тип) Тогда
					ИмяТипа = Строка(Тип);
				Иначе
					ИмяТипа = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
				КонецЕсли;
				Если ПроверкаТипов <> "" Тогда
					ПроверкаТипов = ПроверкаТипов + "
					|			ИЛИ ";
				КонецЕсли;
				ШаблонПроверки = ?(ПроверкаПоТипам.Значение.Свойство("ЭтоПроверкаПустойСсылки"),
					"#ИмяПоляДляЗапроса = ЗНАЧЕНИЕ(#ИмяТипа.ПустаяСсылка)",
					"ТИПЗНАЧЕНИЯ(#ИмяПоляДляЗапроса) = ТИП(#ИмяТипа)");
				ПроверкаТипов = ПроверкаТипов + СтрЗаменить(ШаблонПроверки, "#ИмяТипа", ИмяТипа);
			КонецЦикла;
			Проверка = "
			|КОГДА #ПроверкаТипов
			|	ТОГДА #Проверка";
			Проверка = СтрЗаменить(Проверка, "#ПроверкаТипов", ПроверкаТипов);
		Иначе
			Проверка = "
			|ИНАЧЕ #Проверка";
		КонецЕсли;
		Проверка = СтрЗаменить(Проверка, "#Проверка", ПроверкаПоТипам.Значение.Проверка);
		СодержаниеВыбора = СодержаниеВыбора + Проверка;
	КонецЦикла;
	
	Возврат СтрЗаменить(СравнениеПоля, "#СодержаниеВыбора", ТекстСОтступом(СокрЛ(СодержаниеВыбора), "	"));
	
КонецФункции

// Для функции СравнениеПоля.
Процедура ДобавитьПроверкуПоТипам(ПроверкиПоТипам, ИсходныеТипы, Проверка, ДополнительноеСвойство = "")
	
	Типы = Новый Массив;
	Для Каждого Тип Из ИсходныеТипы Цикл
		Если ЭтоПростойТип(Тип) Тогда
			Продолжить;
		КонецЕсли;
		Типы.Добавить(Тип);
	КонецЦикла;
	
	Если Типы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Структура = Новый Структура("Типы, Проверка", Типы, Проверка);
	ПроверкиПоТипам.Добавить(Структура, Формат(Структура.Типы.Количество(), "ЧЦ=10; ЧВН=; ЧГ="));
	
	Если ДополнительноеСвойство = "" Тогда
		Возврат;
	КонецЕсли;
	
	Структура.Вставить(ДополнительноеСвойство);
	
КонецПроцедуры

// Для функции ДобавитьПроверкуШапкиКлюча.
Процедура ЗаполнитьПсевдонимПоНомеруРеквизита(Соединения, Поле, НомерРеквизита, Псевдоним)
	
	ПсевдонимСНомером = СтрЗаменить(Псевдоним, "?", НомерРеквизита);
	
	Соединения = СтрЗаменить(Соединения, Псевдоним, ПсевдонимСНомером);
	Поле       = СтрЗаменить(Поле,       Псевдоним, ПсевдонимСНомером);
	
КонецПроцедуры

// Для функций ДобавитьПроверкуШапкиКлюча, СравнениеПоля.
Функция ТекстСОтступом(Текст, Отступ)
	
	Возврат СтрЗаменить(Текст, Символы.ПС, Символы.ПС + Отступ);
	
КонецФункции

// Для функции СравнениеПоля.
Процедура ДобавитьПроверкуПростогоТипаЕслиТребуется(СвойстваПоля, СодержаниеВыбора, ИмяТипа)
	
	Если Не СвойстваПоля.ТипКонечногоПоля.СодержитТип(Тип(ИмяТипа))
	 Или СвойстваПоля.ТипыСохраненияТиповПростых.Найти(Тип(ИмяТипа)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СодержаниеВыбора = СодержаниеВыбора + СтрЗаменить("
	|КОГДА ТИПЗНАЧЕНИЯ(#ИмяПоляДляЗапроса) = ТИП(#ИмяТипа)
	|	ТОГДА Шапка?.Значение? = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.Тип#ИмяТипа)",
	"#ИмяТипа", ИмяТипа);
	
КонецПроцедуры

// Для функции СравнениеПоля, ДобавитьОпорноеПоле.
Функция ЕстьПростойТип(ОписаниеТипов)
	
	Возврат ОписаниеТипов.СодержитТип(Тип("Булево"))
	    Или ОписаниеТипов.СодержитТип(Тип("Дата"))
	    Или ОписаниеТипов.СодержитТип(Тип("Строка"))
	    Или ОписаниеТипов.СодержитТип(Тип("Число"))
	    Или ОписаниеТипов.СодержитТип(Тип("УникальныйИдентификатор"))
	    Или ОписаниеТипов.СодержитТип(Тип("ХранилищеЗначения"));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПреобразованиеТекстовОграниченийВСтруктуры

// См. УправлениеДоступом.РазобранноеОграничение.
Функция РазобранноеОграничение(ОсновнаяТаблица, ТекстОграничения) Экспорт
	
	ВнутренниеДанные = Новый Структура;
	ВнутренниеДанные.Вставить("ОсновнаяТаблица",  ОсновнаяТаблица);
	ВнутренниеДанные.Вставить("ТекстОграничения", СокрЛП(ТекстОграничения));
	
	ВнутренниеДанные.Вставить("СинтаксисЯзыка", УправлениеДоступомСлужебныйПовтИсп.СинтаксисЯзыка());
	ВнутренниеДанные.Вставить("ПоляТаблиц",     Новый Соответствие);
	ВнутренниеДанные.Вставить("Псевдонимы",     Новый Соответствие);
	
	ВнутренниеДанные.Вставить("ПоляКлючаДоступа", Новый Массив);
	
	ВнутренниеДанные.Вставить("ТаблицаНаборовСимволов", ТаблицаНаборовСимволов(ВнутренниеДанные));
	ВнутренниеДанные.Вставить("ЧастиОграничения",       ЧастиОграничения(ВнутренниеДанные));
	
	Результат = Новый Структура;
	Результат.Вставить("ВнутренниеДанные", ВнутренниеДанные);
	Результат.Вставить("ПоляТаблиц", ВнутренниеДанные.ПоляТаблиц);
	
	Возврат Результат;
	
КонецФункции

// См. УправлениеДоступом.СтруктураОграничения.
Функция СтруктураОграничения(РазобранноеОграничение) Экспорт
	
	ВнутренниеДанные = РазобранноеОграничение.ВнутренниеДанные;
	
	ОтметитьНекорректныеИменаТаблицПолейИТиповПолей(РазобранноеОграничение.ПоляТаблиц,
		ВнутренниеДанные);
	
	// Заполнение найденных ошибок.
	ОписаниеОшибок = Новый Структура;
	ОписаниеОшибок.Вставить("ЕстьОшибки",  Ложь);
	ОписаниеОшибок.Вставить("ТекстОшибок", "");
	ОписаниеОшибок.Вставить("Ограничение", "");
	ОписаниеОшибок.Вставить("Ошибки",      Новый Массив);
	ОписаниеОшибок.Вставить("Дополнение",  "");
	
	Таблица = ВнутренниеДанные.ТаблицаНаборовСимволов;
	ОтборСтрокБезОшибок = Новый Структура("ТекстОшибки", "");
	Если Таблица.Количество() <> Таблица.НайтиСтроки(ОтборСтрокБезОшибок).Количество() Тогда
		ОписаниеОшибок.ЕстьОшибки = Истина;
		ТребуетсяДополнение = Ложь;
		ДлинаНомераСтроки = СтрДлина(Формат(СтрЧислоСтрок(ВнутренниеДанные.ТекстОграничения), "ЧГ="));
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ТекстОшибки = "" Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьОшибку(Строка, ОписаниеОшибок, ВнутренниеДанные, ДлинаНомераСтроки);
			Если Строка.ПозицияОшибки = -1 Тогда
				ТребуетсяДополнение = Истина;
			КонецЕсли;
		КонецЦикла;
		ОписаниеОшибок.Ограничение = ПронумерованныйТекстОграниченияСОтметкамиОшибок(
			ВнутренниеДанные.ТекстОграничения, ОписаниеОшибок.Ошибки, ДлинаНомераСтроки);
		Если ТребуетсяДополнение Тогда
			ОписаниеОшибок.Дополнение = ОписаниеДопустимыхШаблонов();
		КонецЕсли;
	КонецЕсли;
	
	ЧастиОграничения = ВнутренниеДанные.ЧастиОграничения;
	
	СтруктураОграничения = Новый Структура;
	СтруктураОграничения.Вставить("ОписаниеОшибок",           ОписаниеОшибок);
	СтруктураОграничения.Вставить("ДополнительныеТаблицы",    ЧастиОграничения.ДополнительныеТаблицы);
	СтруктураОграничения.Вставить("ПсевдонимОсновнойТаблицы", ЧастиОграничения.ПсевдонимОсновнойТаблицы);
	СтруктураОграничения.Вставить("ОграничениеЧтения",        ЧастиОграничения.ОграничениеЧтения);
	СтруктураОграничения.Вставить("ОграничениеИзменения",     ЧастиОграничения.ОграничениеИзменения);
	
	// Дополнительные сведения для внутреннего использования.
	ИмяТипаТаблицы = СтрРазделить(ВнутренниеДанные.ОсновнаяТаблица, ".")[0];
	СвойстваТипаТаблиц = ВнутренниеДанные.СинтаксисЯзыка.ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
	
	НовыеВнутренниеДанные = Новый Структура;
	НовыеВнутренниеДанные.Вставить("ПоляКлючаДоступа",   ВнутренниеДанные.ПоляКлючаДоступа);
	НовыеВнутренниеДанные.Вставить("ЭтоСсылочныйТип",    СвойстваТипаТаблиц.ЭтоСсылочныйТип);
	НовыеВнутренниеДанные.Вставить("ИмяКоллекцииТипа",   СвойстваТипаТаблиц.ИмяКоллекции);
	НовыеВнутренниеДанные.Вставить("ТипыТаблицПоИменам", ВнутренниеДанные.СинтаксисЯзыка.ТипыТаблиц.ПоИменам);
	
	СтруктураОграничения.Вставить("ВнутренниеДанные", НовыеВнутренниеДанные);
	
	Возврат СтруктураОграничения;
	
КонецФункции

// Формирует полный текст ошибок описания ограничения доступа с дополнением,
// который можно указать, как текст для вызова исключения.
//
// Параметры:
//  ПолноеИмя               - Строка    - полное имя таблицы списка.
//  ОписаниеОшибок          - Структура - значение возвращаемое функцией СтруктураОграничения.
//  ДляВнешнихПользователей - Булево    - если передать Истина, тогда текст ошибки будет содержать
//                                        назначение ограничения для внешних пользователей.
//
// Возвращаемое значение:
//  Строка - текст для вызова исключения.
//
Функция ТекстОшибокДляВызоваИсключения(ПолноеИмя, ОписаниеОшибок, ДляВнешнихПользователей, ВМодулеМенеджера)
	
	Если Не ОписаниеОшибок.ЕстьОшибки Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОписаниеОшибок.Ошибки.Количество() = 1 Тогда
		Если ВМодулеМенеджера Тогда
			Если ДляВнешнихПользователей Тогда
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибка в ограничении доступа внешних пользователей к списку ""%1"",
					           |указанному в процедуре ПриЗаполненииОграниченияДоступа модуля менеджера объекта метаданных:'");
			Иначе
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибка в ограничении доступа пользователей к списку ""%1"",
					           |указанному в процедуре ПриЗаполненииОграниченияДоступа модуля менеджера объекта метаданных:'");
			КонецЕсли;
		Иначе
			Если ДляВнешнихПользователей Тогда
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибка в ограничении доступа внешних пользователей к списку ""%1"",
					           |указанному в процедуре УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа:'");
			Иначе
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибка в ограничении доступа пользователей к списку ""%1"",
					           |указанному в процедуре УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа:'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ВМодулеМенеджера Тогда
			Если ДляВнешнихПользователей Тогда
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибки в ограничении доступа внешних пользователей к списку ""%1"",
					           |указанному в процедуре ПриЗаполненииОграниченияДоступа модуля менеджера объекта метаданных:'");
			Иначе
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибки в ограничении доступа пользователей к списку ""%1"",
					           |указанному в процедуре ПриЗаполненииОграниченияДоступа модуля менеджера объекта метаданных:'");
			КонецЕсли;
		Иначе
			Если ДляВнешнихПользователей Тогда
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибки в ограничении доступа внешних пользователей к списку ""%1"",
					           |указанному в процедуре УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа:'");
			Иначе
				ЗаголовокОшибки = 
					НСтр("ru = 'Ошибки в ограничении доступа пользователей к списку ""%1"",
					           |указанному в процедуре УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа:'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОшибки, ПолноеИмя);
	ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибок.ТекстОшибок;
	ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибок.Ограничение;
	
	Если ЗначениеЗаполнено(ОписаниеОшибок.Дополнение) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + ОписаниеОшибок.Дополнение;
	КонецЕсли;
	
	Возврат Символы.ПС + ТекстОшибки + Символы.ПС;
	
КонецФункции

// Для функции СтруктураОграничения.
Процедура ДобавитьОшибку(Строка, ОписаниеОшибок, ВнутренниеДанные, ДлинаНомераСтроки)
	
	ПозицияВТексте = Строка.Позиция;
	ПозицияОшибкиВКонцеСтроки = Ложь;
	ТекстОграничения = ВнутренниеДанные.ТекстОграничения;
	
	Если Строка.ПозицияОшибки > 0 Тогда
		ПозицияВТексте = ПозицияВТексте + Строка.ПозицияОшибки;
		Если Строка.ПозицияОшибки = СтрДлина(Строка.Символы) Тогда
			ПозицияВТексте = ПозицияВТексте - 1;
			ПозицияОшибкиВКонцеСтроки = Истина;
		КонецЕсли;
	ИначеЕсли Строка.Позиция > СтрДлина(ТекстОграничения) Тогда
		ПозицияВТексте = ПозицияВТексте - 1;
		ПозицияОшибкиВКонцеСтроки = Истина;
	КонецЕсли;
	
	Координаты = КоординатыПозицииВТексте(ТекстОграничения, ПозицияВТексте);
	Координаты.ПозицияВСтроке = Координаты.ПозицияВСтроке + ?(ПозицияОшибкиВКонцеСтроки, 1, 0);
	
	СтрокаОшибки = СтрПолучитьСтроку(ТекстОграничения, Координаты.НомерСтроки);
	СтрокаОшибки = Лев(СтрокаОшибки, Координаты.ПозицияВСтроке - 1)
		+ "<<?>>" + Сред(СтрокаОшибки, Координаты.ПозицияВСтроке);
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("НомерСтроки",    Координаты.НомерСтроки);
	Ошибка.Вставить("ПозицияВСтроке", Координаты.ПозицияВСтроке);
	Ошибка.Вставить("ТекстОшибки",    Строка.ТекстОшибки);
	Ошибка.Вставить("СтрокаОшибки",   СтрокаОшибки);
	
	ОписаниеОшибок.Ошибки.Добавить(Ошибка);
	
	Если ЗначениеЗаполнено(ОписаниеОшибок.ТекстОшибок) Тогда
		ОписаниеОшибок.ТекстОшибок = ОписаниеОшибок.ТекстОшибок + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	ОписаниеОшибок.ТекстОшибок = ОписаниеОшибок.ТекстОшибок
		+ "{(" + Формат(Ошибка.НомерСтроки, "ЧЦ=" + ДлинаНомераСтроки + "; ЧВН=; ЧГ=")
		+ ", " + Формат(Ошибка.ПозицияВСтроке, "ЧГ=") + ")}:"
		+ " " + Ошибка.ТекстОшибки + Символы.ПС + Ошибка.СтрокаОшибки;
	
КонецПроцедуры

// Для функции СтруктураОграничения.
Функция ПронумерованныйТекстОграниченияСОтметкамиОшибок(ТекстОграничения, Ошибки, ДлинаНомераСтроки)
	
	КоличествоСтрок = СтрЧислоСтрок(ТекстОграничения);
	СтрокиТекстаОграничений = Новый Массив;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(ТекстОграничения, НомерСтроки);
		СтрокиТекстаОграничений.Добавить(Строка);
	КонецЦикла;
	
	Индекс = Ошибки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Ошибка = Ошибки[Индекс];
		Строка = СтрокиТекстаОграничений[Ошибка.НомерСтроки - 1];
		СтрокиТекстаОграничений[Ошибка.НомерСтроки - 1] = Лев(Строка, Ошибка.ПозицияВСтроке - 1)
			+ "<<?>>" + Сред(Строка, Ошибка.ПозицияВСтроке);
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Текст = "";
	НомерСтроки = 1;
	
	Для Каждого Строка Из СтрокиТекстаОграничений Цикл
		Текст = Текст + ?(Текст = "", "", Символы.ПС)
			+ ?(СтрНайти(Строка, "<<?>>") > 0, "*", " ")
			+ " " + Формат(НомерСтроки, "ЧЦ=" + ДлинаНомераСтроки + "; ЧВН=; ЧГ=") + " " + Строка;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Для функции СтруктураОграничения.
Функция ОписаниеДопустимыхШаблонов()
	
	Если ВариантВстроенногоЯзыкаРусский() Тогда
		Шаблон1 =
		"        РазрешитьЧтениеИзменение
		|        ГДЕ ...";
		
		Шаблон2 =
		"        РазрешитьЧтение
		|        ГДЕ ...
		|        ;
		|        РазрешитьИзменениеЕслиРазрешеноЧтение
		|        ГДЕ ...";
		
		Шаблон3 =
		"        ПрисоединитьДополнительныеТаблицы
		|        ЭтотСписок КАК <Псевдоним>
		|        ЛЕВОЕ СОЕДИНЕНИЕ ...
		|        ;
		|        РазрешитьЧтение
		|        ГДЕ ...
		|        ;
		|        РазрешитьИзменениеЕслиРазрешеноЧтение
		|        ГДЕ ...";
	Иначе
		Шаблон1 =
		"        AllowReadWrite
		|        WHERE ...";
		
		Шаблон2 =
		"        AllowRead
		|        WHERE ...
		|        ;
		|        AllowWriteIfAllowRead
		|        WHERE ...";
		
		Шаблон3 =
		"        AttachAdditionalTables
		|        LIST AS <Alias>
		|        LEFT/INNER JOIN ...
		|        ;
		|        AllowRead
		|        WHERE ...
		|        ;
		|        AllowWriteIfAllowRead
		|        WHERE ...";
	КонецЕсли;
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ограничение может состоять из 1-3 частей в одном из 6 вариантов:
		           |1) одинаковое ограничение чтения и изменения:
		           |%1
		           |2) разные ограничения чтения и изменения:
		           |%2
		           |3) любой из вариантов выше с дополнительными таблицами, например:
		           |%3'"),
		Шаблон1, Шаблон2, Шаблон3);
	
	Возврат Описание;
	
КонецФункции

// Для процедуры ДобавитьОшибку.
Функция КоординатыПозицииВТексте(Текст, ПозицияВТексте)
	
	Результат = Новый Структура;
	Результат.Вставить("НомерСтроки", 0);
	Результат.Вставить("ПозицияВСтроке", 0);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	ПозицияНачалаСтроки = 1;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ДлинаТекущейСтроки = СтрДлина(СтрПолучитьСтроку(Текст, НомерСтроки));
		Если ПозицияВТексте < ПозицияНачалаСтроки + ДлинаТекущейСтроки Тогда
			Прервать;
		КонецЕсли;
		ПозицияНачалаСтроки = ПозицияНачалаСтроки + ДлинаТекущейСтроки + 1;
	КонецЦикла;
	
	Результат.НомерСтроки = НомерСтроки;
	
	Строка = СтрПолучитьСтроку(Текст, НомерСтроки);
	Результат.ПозицияВСтроке = ПозицияВТексте - ПозицияНачалаСтроки + 1;
	
	Возврат Результат;
	
КонецФункции

#Область ЛексическийАнализ

// Для функции РазобранноеОграничение.
// Раскладывает текст в таблицу наборов символов, в которых:
// - нет символов отступа (пробелов, табуляций, переводов строки);
// - выделены символы произвольных строк и чисел;
// - определены ключевые слова и операции;
// - проверен формат имен и чисел;
// - добавлены ошибки с описанием.
// 
// Параметры:
//  ТекстОграничения - Строка - текст ограничения доступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//    * Символы       - Строка - символ, пара символов или слово.
//    * Позиция       - Число  - позиция символов в тексте ограничения.
//    * Вид           - Строка - "КлючевоеСлово", "Операция", "Имя", "Разделитель",
//                               "Число", "ПроизвольнаяСтрока", "НедопустимыйСимвол", "Конец".
//    * Тип           - Строка - тип для для видов "КлючевоеСлово" и "Операция".
//    * Приоритет     - Число  - приоритет для видов "КлючевоеСлово" и "Операция".
//    * Уточнение     - Число  - числовое значение для вида "Число".
//                    - Строка - имя для вида "КлючевоеСлово", строка символов для вида "ПроизвольнаяСтрока".
//    * ЭтоРезерв     - Булево - если Истина, значит это зарезервированная операция или ключевое слово.
//    * ПозицияОшибки - Число  - позиция ошибки в тексте ограничения, если текст ошибки не пустой.
//    * ТекстОшибки   - Строка - текст ошибки, если найдена ошибка.
//
Функция ТаблицаНаборовСимволов(ВнутренниеДанные)
	
	ТаблицаНаборовСимволов = Новый ТаблицаЗначений;
	ТаблицаНаборовСимволов.Колонки.Добавить("Символы",       Новый ОписаниеТипов("Строка"));
	ТаблицаНаборовСимволов.Колонки.Добавить("Позиция",       Новый ОписаниеТипов("Число"));
	ТаблицаНаборовСимволов.Колонки.Добавить("Вид",           Новый ОписаниеТипов("Строка"));
	ТаблицаНаборовСимволов.Колонки.Добавить("Тип",           Новый ОписаниеТипов("Строка"));
	ТаблицаНаборовСимволов.Колонки.Добавить("Приоритет",     Новый ОписаниеТипов("Число"));
	ТаблицаНаборовСимволов.Колонки.Добавить("Уточнение",     Новый ОписаниеТипов("Число, Строка"));
	ТаблицаНаборовСимволов.Колонки.Добавить("ЭтоРезерв",     Новый ОписаниеТипов("Булево"));
	ТаблицаНаборовСимволов.Колонки.Добавить("ПозицияОшибки", Новый ОписаниеТипов("Число"));
	ТаблицаНаборовСимволов.Колонки.Добавить("ТекстОшибки",   Новый ОписаниеТипов("Строка"));
	
	ТекстОграничения = ВнутренниеДанные.ТекстОграничения;
	
	Если Не ЗначениеЗаполнено(ТекстОграничения) Тогда
		Возврат ТаблицаНаборовСимволов;
	КонецЕсли;
	
	ДлинаТекстаОграничения = СтрДлина(ТекстОграничения);
	
	СинтаксисЯзыка = ВнутренниеДанные.СинтаксисЯзыка;
	СимволыЯзыка = СинтаксисЯзыка.СимволыЯзыка;
	
	ВидНабораСимволов = ""; // Слово, ПроизвольнаяСтрока, Операция.
	ПозицияНабораСимволов = 0;
	НаборСимволов = Новый Массив;
	СтрокаТаблицы = Неопределено;
	
	Для НомерСимвола = 1 По ДлинаТекстаОграничения Цикл
		Символ = Сред(ТекстОграничения, НомерСимвола, 1);
		ТипСимвола = СимволыЯзыка.Получить(Символ);
		// Сначала обработка символов слов, так как они встречаются наиболее часто.
		Если ТипСимвола = "СимволСлова" И ВидНабораСимволов = "Слово" Тогда
			НаборСимволов.Добавить(Символ);
			Продолжить;
		КонецЕсли;
		// Обработка произвольной строки символов.
		Если ВидНабораСимволов = "ПроизвольнаяСтрока" Тогда
			Если ТипСимвола = "ОграничительСтроки" Тогда
				Если Сред(ТекстОграничения, НомерСимвола + 1, 1) <> Символ Тогда
					СтрокаТаблицы.Уточнение = СтрСоединить(НаборСимволов);
					СтрокаТаблицы.Позиция = ПозицияНабораСимволов;
					НаборСимволов = Новый Массив;
					ВидНабораСимволов = "";
					Продолжить;
				Иначе
					НомерСимвола = НомерСимвола + 1;
				КонецЕсли;
			КонецЕсли;
			НаборСимволов.Добавить(Символ);
			Продолжить;
		КонецЕсли;
		Если ВидНабораСимволов = "Слово" Тогда
			// Вначале цикла уже обработан случай, когда ТипСимвола = "СимволСлова",
			// для остальных типов символов слово завершено и его нужно добавить в дерево.
			ВидНабораСимволов = "";
			ДобавитьСловоВТаблицуНаборовСимволов(ТаблицаНаборовСимволов,
				НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка);
			НаборСимволов = Новый Массив;
		КонецЕсли;
		// Обработка набора составных разделителей.
		Если ВидНабораСимволов = "Операция" Тогда
			Если ТипСимвола = "СимволОперации" Тогда
				НаборСимволов.Добавить(Символ);
				Продолжить;
			КонецЕсли;
			ВидНабораСимволов = "";
			ДобавитьОперациюВТаблицуНаборовСимволов(ТаблицаНаборовСимволов,
				НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка);
			НаборСимволов = Новый Массив;
		КонецЕсли;
		// Обработка первого символа наборов символов.
		Если ВидНабораСимволов = "" Тогда
			Если ТипСимвола = "СимволСлова" Тогда
				ВидНабораСимволов = "Слово";
				ПозицияНабораСимволов = НомерСимвола;
				НаборСимволов.Добавить(Символ);
				Продолжить;
			КонецЕсли;
			Если ТипСимвола = "СимволОперации" Тогда
				ВидНабораСимволов = "Операция";
				ПозицияНабораСимволов = НомерСимвола;
				НаборСимволов.Добавить(Символ);
				Продолжить;
			КонецЕсли;
			Если ТипСимвола = "ОграничительСтроки" Тогда
				ВидНабораСимволов = "ПроизвольнаяСтрока";
				ПозицияНабораСимволов = НомерСимвола;
				СтрокаТаблицы = ТаблицаНаборовСимволов.Добавить();
				СтрокаТаблицы.Символы = Символ;
				СтрокаТаблицы.Вид = ВидНабораСимволов;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Обработка отдельных символов.
		Если ТипСимвола = "Отступ" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипСимвола = "Разделитель" Тогда
			СтрокаТаблицы = ТаблицаНаборовСимволов.Добавить();
			СтрокаТаблицы.Символы = Символ;
			СтрокаТаблицы.Позиция = НомерСимвола;
			СтрокаТаблицы.Вид = "Разделитель";
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = ТаблицаНаборовСимволов.Добавить();
		СтрокаТаблицы.Символы = Символ;
		СтрокаТаблицы.Позиция = НомерСимвола;
		СтрокаТаблицы.Вид = "НедопустимыйСимвол";
		СтрокаТаблицы.ТекстОшибки   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимый символ ""%1"" с кодом %2'"), Символ, КодСимвола(Символ));
	КонецЦикла;
	
	Если ВидНабораСимволов = "Слово" Тогда
		ДобавитьСловоВТаблицуНаборовСимволов(ТаблицаНаборовСимволов,
			НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка);
		
	ИначеЕсли ВидНабораСимволов = "Операция" Тогда
		ДобавитьОперациюВТаблицуНаборовСимволов(ТаблицаНаборовСимволов,
			НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка);
		
	ИначеЕсли ВидНабораСимволов = "ПроизвольнаяСтрока" Тогда
		СтрокаТаблицы.Уточнение = СтрСоединить(НаборСимволов);
		СтрокаТаблицы.Позиция = ПозицияНабораСимволов;
		СтрокаТаблицы.ПозицияОшибки = НомерСимвола - ПозицияНабораСимволов;
		СтрокаТаблицы.ТекстОшибки   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не указан символ окончания произвольной строки %1'"), СтрокаТаблицы.Символы);
	КонецЕсли;
	
	ПоследняяСтрока = ТаблицаНаборовСимволов.Добавить();
	ПоследняяСтрока.Позиция = СтрДлина(ТекстОграничения) + 1;
	ПоследняяСтрока.Вид = "Конец"; // Для установки текста ошибки недостатка описания.
	ТаблицаНаборовСимволов.Индексы.Добавить("Вид, Уточнение");
	
	Возврат ТаблицаНаборовСимволов;
	
КонецФункции

// Для функции ТаблицаНаборовСимволов.
Процедура ДобавитьСловоВТаблицуНаборовСимволов(Таблица,
			НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка)
	
	СтрокаСимволов = СтрСоединить(НаборСимволов);
	СвойстваСлова  = СинтаксисЯзыка.СловаЯзыка.Получить(ВРег(СтрокаСимволов));
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Символы = СтрокаСимволов;
	НоваяСтрока.Позиция = ПозицияНабораСимволов;
	
	Если СвойстваСлова <> Неопределено Тогда
		НоваяСтрока.Вид       = "КлючевоеСлово";
		НоваяСтрока.Тип       = СвойстваСлова.Тип;
		НоваяСтрока.Приоритет = СвойстваСлова.Приоритет;
		НоваяСтрока.Уточнение = СвойстваСлова.Идентификатор;
		НоваяСтрока.ЭтоРезерв = СвойстваСлова.ЭтоРезерв;
		
		Если СвойстваСлова.ЭтоРезерв Тогда
			НоваяСтрока.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ключевое слово ""%1"" не поддерживается'"), СтрокаСимволов);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Слово является именем или числом.
	СимволыЦифр = СинтаксисЯзыка.СимволыЦифр;
	
	Если НаборСимволов[0] = "." Тогда
		Если НаборСимволов.Количество() > 1 Тогда
			ЭтоЧисло = Ложь;
		Иначе
			НоваяСтрока.Вид = "Имя";
			НоваяСтрока.ТекстОшибки = НСтр("ru = 'Имя не может начинаться с точки'");
			Возврат;
		КонецЕсли;
	Иначе
		ЭтоЧисло = СимволыЦифр.Получить(НаборСимволов[0]) <> Неопределено;
	КонецЕсли;
	
	Если ЭтоЧисло Тогда
		НоваяСтрока.Вид = "Число";
		НомерСимвола = 1;
		Для Каждого Символ Из НаборСимволов Цикл
			Если СимволыЦифр.Получить(Символ) = Неопределено Тогда
				НоваяСтрока.ПозицияОшибки = НомерСимвола - 1;
				НоваяСтрока.ТекстОшибки   = НСтр("ru = 'Число может состоять только из цифр'");
				Возврат;
			КонецЕсли;
			НомерСимвола = НомерСимвола + 1;
		КонецЦикла;
		СимволыЧисла = Лев(СтрокаСимволов, НомерСимвола - 1);
		Если СтрДлина(СимволыЧисла) > 16 Тогда
			НоваяСтрока.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Слишком большое число ""%1""'"), СимволыЧисла);
			Возврат;
		КонецЕсли;
		НоваяСтрока.Уточнение = Число(СимволыЧисла);
	Иначе
		НоваяСтрока.Вид = "Имя";
		ЧастиИмени = СтрРазделить(СтрокаСимволов, ".");
		ПозицияЧастиИмени = 1;
		Для Каждого ЧастьИмени Из ЧастиИмени Цикл
			Если ЧастьИмени = "" И ПозицияЧастиИмени > 1 Тогда
				НоваяСтрока.ПозицияОшибки = ПозицияЧастиИмени - 1;
				НоваяСтрока.ТекстОшибки   = НСтр("ru = 'После точки не указано имя'");
				Возврат;
			ИначеЕсли СимволыЦифр.Получить(Лев(ЧастьИмени, 1)) <> Неопределено Тогда
				НоваяСтрока.ПозицияОшибки = ПозицияЧастиИмени - 1;
				НоваяСтрока.ТекстОшибки   = НСтр("ru = 'После точки в имени не может следовать число'");
				Возврат;
			КонецЕсли;
			ПозицияЧастиИмени = ПозицияЧастиИмени + СтрДлина(ЧастьИмени) + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Для функции ТаблицаНаборовСимволов.
Процедура ДобавитьОперациюВТаблицуНаборовСимволов(Таблица,
			НаборСимволов, ПозицияНабораСимволов, СинтаксисЯзыка)
	
	СтрокаСимволов = СтрСоединить(НаборСимволов);
	СвойстваОперации = СинтаксисЯзыка.ОперацииЯзыка.Получить(СтрокаСимволов);
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Символы   = СтрокаСимволов;
	НоваяСтрока.Позиция   = ПозицияНабораСимволов;
	НоваяСтрока.Вид       = "Операция";
	НоваяСтрока.Тип       = СвойстваОперации.Тип;
	НоваяСтрока.Приоритет = СвойстваОперации.Приоритет;
	НоваяСтрока.ЭтоРезерв = СвойстваОперации.ЭтоРезерв;
	
	Если СвойстваОперации = Неопределено Тогда
		НоваяСтрока.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимая операция ""%1""'"), СтрокаСимволов);
		
	ИначеЕсли СвойстваОперации.ЭтоРезерв Тогда
		НоваяСтрока.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Операция ""%1"" не поддерживается'"), СтрокаСимволов);
	КонецЕсли;
	
КонецПроцедуры

// Для функции РазобранноеОграничение и косвенно для многих других.
Функция СинтаксисЯзыка() Экспорт
	
	СинтаксисЯзыка = Новый Структура;
	СинтаксисЯзыка.Вставить("СимволыЯзыка",  СимволыЯзыка());
	СинтаксисЯзыка.Вставить("СимволыЦифр",   СимволыЦифр());
	СинтаксисЯзыка.Вставить("ОперацииЯзыка", ОперацииЯзыка());
	СинтаксисЯзыка.Вставить("СловаЯзыка",    СловаЯзыка());
	СинтаксисЯзыка.Вставить("ТипыТаблиц",    ТипыТаблиц());
	
	Возврат Новый ФиксированнаяСтруктура(СинтаксисЯзыка);
	
КонецФункции

// Для функции СинтаксисЯзыка.
Функция СимволыЯзыка()
	
	СимволыЯзыка = Новый Соответствие;
	
	Для КодСимвола = КодСимвола("А") По КодСимвола("Я") Цикл
		СимволыЯзыка.Вставить(Символ(КодСимвола), "СимволСлова");
	КонецЦикла;
	Для КодСимвола = КодСимвола("а") По КодСимвола("я") Цикл
		СимволыЯзыка.Вставить(Символ(КодСимвола), "СимволСлова");
	КонецЦикла;
	Для КодСимвола = КодСимвола("A") По КодСимвола("Z") Цикл
		СимволыЯзыка.Вставить(Символ(КодСимвола), "СимволСлова");
	КонецЦикла;
	Для КодСимвола = КодСимвола("a") По КодСимвола("z") Цикл
		СимволыЯзыка.Вставить(Символ(КодСимвола), "СимволСлова");
	КонецЦикла;
	
	СимволыЯзыка.Вставить("_", "СимволСлова");
	СимволыЯзыка.Вставить(".", "СимволСлова");
	
	Для КодСимвола = КодСимвола("0") По КодСимвола("9") Цикл
		СимволыЯзыка.Вставить(Символ(КодСимвола), "СимволСлова");
	КонецЦикла;
	
	СимволыЯзыка.Вставить(" ",         "Отступ");
	СимволыЯзыка.Вставить(Символы.Таб, "Отступ");
	СимволыЯзыка.Вставить(Символы.ПС,  "Отступ");
	
	СимволыЯзыка.Вставить("""", "ОграничительСтроки");
	
	СимволыЯзыка.Вставить("(", "Разделитель");
	СимволыЯзыка.Вставить(")", "Разделитель");
	СимволыЯзыка.Вставить(",", "Разделитель");
	СимволыЯзыка.Вставить(";", "Разделитель");
	СимволыЯзыка.Вставить("=", "СимволОперации");
	СимволыЯзыка.Вставить("<", "СимволОперации");
	СимволыЯзыка.Вставить(">", "СимволОперации");
	
	// Не поддерживаются.
	СимволыЯзыка.Вставить("+", "СимволОперации");
	СимволыЯзыка.Вставить("-", "СимволОперации");
	СимволыЯзыка.Вставить("*", "СимволОперации");
	СимволыЯзыка.Вставить("/", "СимволОперации");
	
	Возврат Новый ФиксированноеСоответствие(СимволыЯзыка);
	
КонецФункции

// Для функции СинтаксисЯзыка.
Функция СимволыЦифр()
	
	СимволыЦифр = Новый Соответствие;
	
	Для КодСимвола = КодСимвола("0") По КодСимвола("9") Цикл
		СимволыЦифр.Вставить(Символ(КодСимвола), Истина);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СимволыЦифр);
	
КонецФункции

// Для функции СинтаксисЯзыка.
Функция СловаЯзыка()
	
	Слова = Новый Соответствие;
	
	ДобавитьСловоЯзыка(Слова, "ПрисоединитьДополнительныеТаблицы",     "AttachAdditionalTables", "Начало",       Ложь);
	ДобавитьСловоЯзыка(Слова, "ЭтотСписок",                            "ThisList",               "НачалоСписок", Ложь);
	ДобавитьСловоЯзыка(Слова, "РазрешитьЧтениеИзменение",              "AllowReadUpdate",        "Начало",       Ложь);
	ДобавитьСловоЯзыка(Слова, "РазрешитьЧтение",                       "AllowRead",              "Начало",       Ложь);
	ДобавитьСловоЯзыка(Слова, "РазрешитьИзменениеЕслиРазрешеноЧтение", "AllowUpdateIfAllowRead", "Начало",       Ложь);
	ДобавитьСловоЯзыка(Слова, "Где",                                   "Where",                  "НачалоГде");
	
	ДобавитьСловоЯзыка(Слова, "Левое",      "Left", "Присоединение");
	ДобавитьСловоЯзыка(Слова, "Соединение", "Join", "Присоединение");
	ДобавитьСловоЯзыка(Слова, "По",         "On",   "Присоединение");
	
	ДобавитьСловоЯзыка(Слова, "И",      "And",    "Соединитель", , 2);
	ДобавитьСловоЯзыка(Слова, "Или",    "Or",     "Соединитель", , 1);
	ДобавитьСловоЯзыка(Слова, "В",      "In",     "Соединитель", , 5);
	ДобавитьСловоЯзыка(Слова, "Как",    "As",     "Соединитель");
	ДобавитьСловоЯзыка(Слова, "Кроме",  "Except", "Соединитель");
	ДобавитьСловоЯзыка(Слова, "Только", "Only",   "Соединитель");
	ДобавитьСловоЯзыка(Слова, "Есть",   "Is",     "Соединитель", , 7);
	ДобавитьСловоЯзыка(Слова, "Не",     "Not",    "Оператор",    , 3);
	
	ДобавитьСловоЯзыка(Слова, "Выбор",  "Case", "СловоВыбора");
	ДобавитьСловоЯзыка(Слова, "Когда",  "When", "СловоВыбора");
	ДобавитьСловоЯзыка(Слова, "Тогда",  "Then", "СловоВыбора");
	ДобавитьСловоЯзыка(Слова, "Иначе",  "Else", "СловоВыбора");
	ДобавитьСловоЯзыка(Слова, "Конец",  "End",  "СловоВыбора");
	
	ДобавитьСловоЯзыка(Слова, "ЕстьNull",                      "IsNull",                "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "Выразить",                      "Cast",                  "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "Значение",                      "Value",                 "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ТипЗначения",                   "ValueType",             "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "Тип",                           "Type",                  "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ЗначениеРазрешено",             "ValueAllowed",          "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ЧтениеОбъектаРазрешено",        "ObjectReadingAllowed",  "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ИзменениеОбъектаРазрешено",     "ObjectUpdatingAllowed", "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ЧтениеСпискаРазрешено",         "ListReadingAllowed",    "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ИзменениеСпискаРазрешено",      "ListUpdatingAllowed",   "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ДляВсехСтрок",                  "ForAllRows",            "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ДляОднойИзСтрок",               "ForOneOfRows",          "Функция", Ложь);
	ДобавитьСловоЯзыка(Слова, "ЭтоАвторизованныйПользователь", "IsAuthorizedUser",      "Функция", Ложь);
	
	ДобавитьСловоЯзыка(Слова, "ПустаяСсылка", "EmptyRef",  "ЗначениеСравнения");
	ДобавитьСловоЯзыка(Слова, "Неопределено", "Undefined", "ЗначениеСравнения");
	ДобавитьСловоЯзыка(Слова, "Null",         "Null",      "ЗначениеСравнения");
	ДобавитьСловоЯзыка(Слова, "Ложь",         "False",     "ЗначениеУточнения");
	ДобавитьСловоЯзыка(Слова, "Истина",       "True",      "ЗначениеУточнения");
	ДобавитьСловоЯзыка(Слова, "Пусто",        "Empty",     "ЗначениеУточнения");
	
	ДобавитьСловоЯзыка(Слова, "Строка",       "String",    "ИмяТипа");
	ДобавитьСловоЯзыка(Слова, "Число",        "Number",    "ИмяТипа");
	ДобавитьСловоЯзыка(Слова, "Дата",         "Date",      "ИмяТипа");
	ДобавитьСловоЯзыка(Слова, "Булево",       "Boolean",   "ИмяТипа");
	
	// Неподдерживаемые, зарезервированные слова.
	ДобавитьСловоЯзыка(Слова, "Выбрать",             "Select",          "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Первые",              "Top",             "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Различные",           "Distinct",        "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Из",                  "From",            "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Внутреннее",          "Inner",           "Присоединение", , , Истина);
	ДобавитьСловоЯзыка(Слова, "Полное",              "Full",            "Присоединение", , , Истина);
	ДобавитьСловоЯзыка(Слова, "Сгруппировать",       "Group",           "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Имеющие",             "Having",          "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Упорядочить",         "Order",           "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Итоги",               "Totals",          "Неопределен",   , , Истина);
	ДобавитьСловоЯзыка(Слова, "Год",                 "Year",            "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Квартал",             "Quarter",         "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Месяц",               "Month",           "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "ДеньГода",            "DayOfYear",       "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "День",                "Day",             "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Неделя",              "Week",            "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "ДеньНедели",          "Weekday",         "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Час",                 "Hour",            "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Минута",              "Minute",          "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Секунда",             "Second",          "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "НачалоПериода",       "BeginOfPeriod",   "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "КонецПериода",        "EndOfPeriod",     "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "ДобавитьКДате",       "DateAdd",         "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "РазностьДат",         "DateDiff",        "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Сумма",               "Sum",             "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Минимум",             "Min",             "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Максимум",            "Max",             "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Среднее",             "Avg",             "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Количество",          "Count",           "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "Представление",       "Presentation",    "Функция",   Ложь, , Истина);
	ДобавитьСловоЯзыка(Слова, "ПредставлениеСсылки", "RefPresentation", "Функция",   Ложь, , Истина);
	
	Возврат Новый ФиксированноеСоответствие(Слова);
	
КонецФункции

// Для функции СинтаксисЯзыка.
Функция ОперацииЯзыка()
	
	ОперацииЯзыка = Новый Соответствие;
	
	ДобавитьСловоЯзыка(ОперацииЯзыка, "=",  "=",  "Соединитель", , 4);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "<>", "<>", "Соединитель", , 4);
	
	// Неподдерживаемые, зарезервированные операции.
	ДобавитьСловоЯзыка(ОперацииЯзыка, "<",  "<",  "Соединитель", , 4, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "<=", "<=", "Соединитель", , 4, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, ">",  ">",  "Соединитель", , 4, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, ">=", ">=", "Соединитель", , 4, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "+",  "+",  "Соединитель", , 1, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "-",  "-",  "Соединитель", , 1, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "*",  "*",  "Соединитель", , 6, Истина);
	ДобавитьСловоЯзыка(ОперацииЯзыка, "/",  "/",  "Соединитель", , 6, Истина);
	
	Возврат Новый ФиксированноеСоответствие(ОперацииЯзыка);
	
КонецФункции

// Для функций СловаЯзыка и ОперацииЯзыка.
Процедура ДобавитьСловоЯзыка(Слова, ЯзыкРусский, ЯзыкАнглийский, ТипСлова,
			ВерхнийРегистр = Истина, Приоритет = 0, ЭтоРезерв = Ложь)
	
	СвойстваСлова = Новый Структура;
	СвойстваСлова.Вставить("Идентификатор",  ЯзыкРусский);
	СвойстваСлова.Вставить("ЯзыкРусский",    ЯзыкРусский);
	СвойстваСлова.Вставить("ЯзыкАнглийский", ЯзыкАнглийский);
	СвойстваСлова.Вставить("Тип",            ТипСлова);
	СвойстваСлова.Вставить("ВерхнийРегистр", ВерхнийРегистр);
	СвойстваСлова.Вставить("Приоритет",      Приоритет);
	СвойстваСлова.Вставить("ЭтоРезерв",      ЭтоРезерв);
	
	СвойстваСлова = Новый ФиксированнаяСтруктура(СвойстваСлова);
	
	Слова.Вставить(ВРег(ЯзыкРусский),    СвойстваСлова);
	Слова.Вставить(ВРег(ЯзыкАнглийский), СвойстваСлова);
	
КонецПроцедуры

// Для функции СинтаксисЯзыка.
Функция ТипыТаблиц()
	
	ТипыТаблиц = Новый Структура;
	ТипыТаблиц.Вставить("ПоИменам",     Новый Соответствие);
	ТипыТаблиц.Вставить("ПоКоллекциям", Новый Соответствие);
	
	// Установка имен типов таблиц.
	ДобавитьТипТаблиц(ТипыТаблиц, "ПланОбмена",             "ExchangePlan",               "ПланыОбмена");
	ДобавитьТипТаблиц(ТипыТаблиц, "КритерийОтбора",         "FilterCriterion",            "КритерииОтбора");
	ДобавитьТипТаблиц(ТипыТаблиц, "Константы",              "Constants",                  "");
	ДобавитьТипТаблиц(ТипыТаблиц, "Константа",              "Constant",                   "Константы");
	ДобавитьТипТаблиц(ТипыТаблиц, "Справочник",             "Catalog",                    "Справочники");
	ДобавитьТипТаблиц(ТипыТаблиц, "Последовательность",     "Sequence",                   "Последовательности");
	ДобавитьТипТаблиц(ТипыТаблиц, "Документ",               "Document",                   "Документы");
	ДобавитьТипТаблиц(ТипыТаблиц, "ЖурналДокументов",       "DocumentJournal",            "ЖурналыДокументов");
	ДобавитьТипТаблиц(ТипыТаблиц, "Перечисление",           "Enum",                       "Перечисления");
	ДобавитьТипТаблиц(ТипыТаблиц, "ПланВидовХарактеристик", "ChartOfCharacteristicTypes", "ПланыВидовХарактеристик");
	ДобавитьТипТаблиц(ТипыТаблиц, "ПланСчетов",             "ChartOfAccounts",            "ПланыСчетов");
	ДобавитьТипТаблиц(ТипыТаблиц, "ПланВидовРасчета",       "ChartOfCalculationTypes",    "ПланыВидовРасчета");
	ДобавитьТипТаблиц(ТипыТаблиц, "РегистрСведений",        "InformationRegister",        "РегистрыСведений");
	ДобавитьТипТаблиц(ТипыТаблиц, "РегистрНакопления",      "AccumulationRegister",       "РегистрыНакопления");
	ДобавитьТипТаблиц(ТипыТаблиц, "РегистрБухгалтерии",     "AccountingRegister",         "РегистрыБухгалтерии");
	ДобавитьТипТаблиц(ТипыТаблиц, "РегистрРасчета",         "CalculationRegister",        "РегистрыРасчета");
	ДобавитьТипТаблиц(ТипыТаблиц, "БизнесПроцесс",          "BusinessProcess",            "БизнесПроцессы");
	ДобавитьТипТаблиц(ТипыТаблиц, "Задача",                 "Task",                       "Задачи");
	
	// Установка основных свойств основных типов таблиц.
	ИменаТиповТаблиц = "ПланОбмена,Справочник,Документ,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета,БизнесПроцесс,Задача";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ЭтоСсылочныйТип", Истина);
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ЕстьОграничение", Истина);
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ОбщиеРеквизиты",  "Разрешены");
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Использование",   "Разрешено");
	
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Реквизиты",            "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "СтандартныеРеквизиты", "Разрешены");
	
	ДобавитьКоллекциюТабличныхЧастейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ТабличныеЧасти", "Разрешены");
	
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ВерсияДанных",  "DataVersion",  "Запрещено");
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Представление", "Presentation", "Запрещено");
	
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Изменения", "Changes", "Запрещено");
	
	// Установка основных свойств регистров.
	ИменаТиповТаблиц = "РегистрСведений,РегистрРасчета";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц,     ИменаТиповТаблиц, "ОбщиеРеквизиты",       "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Ресурсы",              "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Реквизиты",            "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "СтандартныеРеквизиты", "Разрешены");
	
	ИменаТиповТаблиц = "РегистрНакопления,РегистрБухгалтерии";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц,     ИменаТиповТаблиц, "ОбщиеРеквизиты",       "Недопустимы");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Ресурсы",              "Недопустимы");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Реквизиты",            "Недопустимы");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "СтандартныеРеквизиты", "Недопустимы");
	
	ИменаТиповТаблиц = "РегистрСведений,РегистрНакопления,РегистрБухгалтерии,РегистрРасчета";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ЕстьОграничение", Истина);
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Измерения", "Разрешены");
	
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Изменения", "Changes", "Запрещено");
	
	// Установка некоторых из указанных ранее свойств для остальных типов таблиц.
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц,     "Последовательность", "ЕстьОграничение", Истина);
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "Последовательность", "Измерения", "Разрешены");
	
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц,     "ЖурналДокументов", "ОбщиеРеквизиты",       "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "ЖурналДокументов", "СтандартныеРеквизиты", "Разрешены");
	
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц,     "Перечисление", "ЭтоСсылочныйТип", Истина);
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "Перечисление", "СтандартныеРеквизиты", "Разрешены");
	
	ИменаТиповТаблиц = "Константа,РегистрСведений";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "Использование", "Разрешено");
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, "КритерийОтбора", "Использование", "Недопустимо");
	
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, "Константа",       "Изменения",     "Changes",    "Запрещено");
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, "РегистрСведений", "СрезПервых",    "SliceFirst", "Недопустимо");
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, "РегистрСведений", "СрезПоследних", "SliceLast",  "Недопустимо");
	ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, "БизнесПроцесс",   "Точки",         "Points",     "Запрещено");
	
	// Установка специализированных свойств.
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, "ПланСчетов", "ПризнакиУчетаСубконто", "Разрешены");
	
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "ЖурналДокументов", "Графы",              "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "ПланСчетов",       "ПризнакиУчета",      "Разрешены");
	ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, "Задача",           "РеквизитыАдресации", "Разрешены");
	
	ДобавитьКоллекциюТабличныхЧастейТипаТаблиц(ТипыТаблиц, "ПланСчетов",       "СтандартныеТабличныеЧасти", "Разрешены");
	ДобавитьКоллекциюТабличныхЧастейТипаТаблиц(ТипыТаблиц, "ПланВидовРасчета", "СтандартныеТабличныеЧасти", "Разрешены");
	
	ИменаТиповТаблиц = "Справочник,Перечисление,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета";
	УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ЕстьПредопределенные", Истина);
	
	// Уточнение стандартных полей типов таблиц.
	ИменаТиповТаблиц = "Документ,РегистрСведений,РегистрНакопления,РегистрБухгалтерии";
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "МоментВремени", "PointInTime", "Недопустимо");
	
	ИменаТиповТаблиц = "Справочник,ПланВидовХарактеристик,ПланСчетов,ПланВидовРасчета";
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, "ИмяПредопределенныхДанных", "PredefinedDataName", "Запрещено");
	
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, "Константа",          "Значение",          "Value",               "Разрешено");
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, "Последовательность", "Регистратор",       "Recorder",            "Разрешено");
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, "Последовательность", "Период",            "Period",              "Разрешено");
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, "ЖурналДокументов",   "Тип",               "Type",                "Недопустимо");
	ДобавитьПолеТипаТаблиц(ТипыТаблиц, "Перечисление",       "Порядок",           "Order",               "Запрещено");
	
	Возврат ТипыТаблиц;
	
КонецФункции

// Для функции ТипыТаблиц.
Процедура ДобавитьТипТаблиц(ТипыТаблиц, ЯзыкРусский, ЯзыкАнглийский, ИмяКоллекции)
	
	// Свойство "Использование" для таблиц.
	// "Разрешено"   - можно использовать без ограничений.
	// "Недопустимо" - не может использоваться в ограничении доступа платформы 1С:Предприятия.
	// "Запрещено"   - запрещено присоединять, как дополнительную таблицу в ограничении доступа БСП.
	
	СвойстваТипаТаблиц = Новый Структура;
	СвойстваТипаТаблиц.Вставить("ИмяКоллекции",             ИмяКоллекции);
	СвойстваТипаТаблиц.Вставить("ЯзыкРусский",              ЯзыкРусский);
	СвойстваТипаТаблиц.Вставить("ЯзыкАнглийский",           ЯзыкАнглийский);
	СвойстваТипаТаблиц.Вставить("ЭтоСсылочныйТип",          Ложь);
	СвойстваТипаТаблиц.Вставить("ЕстьОграничение",          Ложь);
	СвойстваТипаТаблиц.Вставить("ЕстьПредопределенные",     Ложь);
	СвойстваТипаТаблиц.Вставить("КоллекцииПолей",           Новый Соответствие);
	СвойстваТипаТаблиц.Вставить("КоллекцииТабличныхЧастей", Новый Соответствие);
	СвойстваТипаТаблиц.Вставить("ОбщиеРеквизиты",           "Отсутствуют");
	СвойстваТипаТаблиц.Вставить("ПризнакиУчетаСубконто",    "Отсутствуют");
	СвойстваТипаТаблиц.Вставить("УточнениеПолей",           Новый Соответствие);
	СвойстваТипаТаблиц.Вставить("УточнениеТаблиц",          Новый Соответствие);
	СвойстваТипаТаблиц.Вставить("Использование",            "Запрещено");
	
	ТипыТаблиц.ПоИменам.Вставить(ВРег(ЯзыкРусский),    СвойстваТипаТаблиц);
	ТипыТаблиц.ПоИменам.Вставить(ВРег(ЯзыкАнглийский), СвойстваТипаТаблиц);
	
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		ТипыТаблиц.ПоКоллекциям.Вставить(ИмяКоллекции, СвойстваТипаТаблиц);
	КонецЕсли;
	
КонецПроцедуры

// Для функции ТипыТаблиц.
Процедура УстановитьСвойствоТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, Свойство, Значение)
	
	Для Каждого ИмяТипаТаблицы Из СтрРазделить(ИменаТиповТаблиц, ",", Ложь) Цикл
		СвойстваТипаТаблиц = ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
		СвойстваТипаТаблиц[Свойство] = Значение;
	КонецЦикла;
	
КонецПроцедуры

// Для функции ТипыТаблиц.
Процедура ДобавитьКоллекциюПолейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, ИмяКоллекции, Использование)
	
	Для Каждого ИмяТипаТаблицы Из СтрРазделить(ИменаТиповТаблиц, ",", Ложь) Цикл
		СвойстваТипаТаблиц = ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
		СвойстваТипаТаблиц.КоллекцииПолей.Вставить(ИмяКоллекции, Использование);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ТипыТаблиц.
Процедура ДобавитьКоллекциюТабличныхЧастейТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, ИмяКоллекции, Использование)
	
	Для Каждого ИмяТипаТаблицы Из СтрРазделить(ИменаТиповТаблиц, ",", Ложь) Цикл
		СвойстваТипаТаблиц = ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
		СвойстваТипаТаблиц.КоллекцииТабличныхЧастей.Вставить(ИмяКоллекции, Использование);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ТипыТаблиц.
Процедура ДобавитьПолеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, ЯзыкРусский, ЯзыкАнглийский, Использование)
	
	// Использование:
	// "Разрешено"   - можно использовать без ограничений.
	// "Недопустимо" - не может использоваться в ограничении доступа платформы 1С:Предприятия.
	// "Запрещено"   - запрещено использовать в ограничении доступа БСП.
	
	Для Каждого ИмяТипаТаблицы Из СтрРазделить(ИменаТиповТаблиц, ",", Ложь) Цикл
		УточнениеПоля = Новый Структура;
		УточнениеПоля.Вставить("ЯзыкРусский",    ЯзыкРусский);
		УточнениеПоля.Вставить("ЯзыкАнглийский", ЯзыкАнглийский);
		УточнениеПоля.Вставить("Использование",  Использование);
		
		СвойстваТипаТаблиц = ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
		
		СвойстваТипаТаблиц.УточнениеПолей.Вставить(ВРег(ЯзыкРусский),    УточнениеПоля);
		СвойстваТипаТаблиц.УточнениеПолей.Вставить(ВРег(ЯзыкАнглийский), УточнениеПоля);
	КонецЦикла;
	
КонецПроцедуры

// Для функции ТипыТаблиц.
Процедура ДобавитьРасширениеТипаТаблиц(ТипыТаблиц, ИменаТиповТаблиц, ЯзыкРусский, ЯзыкАнглийский, Использование)
	
	// Использование:
	// "Разрешено"   - можно использовать без ограничений.
	// "Недопустимо" - не может использоваться в ограничении доступа платформы 1С:Предприятия.
	// "Запрещено"   - запрещено использовать в ограничении доступа БСП.
	
	Для Каждого ИмяТипаТаблицы Из СтрРазделить(ИменаТиповТаблиц, ",", Ложь) Цикл
		УточнениеТаблиц = Новый Структура;
		УточнениеТаблиц.Вставить("ЯзыкРусский",    ЯзыкРусский);
		УточнениеТаблиц.Вставить("ЯзыкАнглийский", ЯзыкАнглийский);
		УточнениеТаблиц.Вставить("Использование",  Использование);
		
		СвойстваТипаТаблиц = ТипыТаблиц.ПоИменам.Получить(ВРег(ИмяТипаТаблицы));
		
		СвойстваТипаТаблиц.УточнениеТаблиц.Вставить(ВРег(ЯзыкРусский),    УточнениеТаблиц);
		СвойстваТипаТаблиц.УточнениеТаблиц.Вставить(ВРег(ЯзыкАнглийский), УточнениеТаблиц);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СинтаксическийАнализ

// Для функции РазобранноеОграничение.
Функция ЧастиОграничения(ВнутренниеДанные)
	
	ЧастиОграничения = Новый Структура;
	ЧастиОграничения.Вставить("ДополнительныеТаблицы",    Новый Массив);
	ЧастиОграничения.Вставить("ПсевдонимОсновнойТаблицы", "");
	ЧастиОграничения.Вставить("ОграничениеЧтения",        Новый Структура);
	ЧастиОграничения.Вставить("ОграничениеИзменения",     Новый Структура);
	
	ТаблицаНаборовСимволов = ВнутренниеДанные.ТаблицаНаборовСимволов;
	
	Если ТаблицаНаборовСимволов.Количество() = 0 Тогда
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	ТаблицаНаборовСимволов.Колонки.Добавить("Строки", Новый ОписаниеТипов("Массив"));
	ТаблицаНаборовСимволов.Колонки.Добавить("КонечнаяСтрока");
	
	// Разделение ограничения на основные части.
	Строки = ТаблицаНаборовСимволов.НайтиСтроки(Новый Структура("Символы, Вид", ";", "Разделитель"));
	
	ИндексыСтрокРазделителя = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		ИндексыСтрокРазделителя.Добавить(ТаблицаНаборовСимволов.Индекс(Строка));
	КонецЦикла;
	ИндексыСтрокРазделителя.Добавить(ТаблицаНаборовСимволов.Количество() - 1);
	
	СвойстваЧастей = Новый Массив;
	ИндексСтроки = 0;
	Для Каждого ИндексСтрокиРазделителя Из ИндексыСтрокРазделителя Цикл
		СтрокиЧасти = Новый Массив;
		Пока ИндексСтроки < ИндексСтрокиРазделителя Цикл
			СтрокаЧасти = ТаблицаНаборовСимволов[ИндексСтроки];
			Если СтрокаЧасти.Вид <> "НедопустимыйСимвол" Тогда
				СтрокиЧасти.Добавить(СтрокаЧасти);
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
		СтрокаРазделителя = ТаблицаНаборовСимволов[ИндексСтрокиРазделителя];
		Если СтрокиЧасти.Количество() = 0 Тогда
			СтрокиЧасти.Добавить(СтрокаРазделителя);
		КонецЕсли;
		СвойстваЧасти = Новый Структура;
		СвойстваЧасти.Вставить("Строки", СтрокиЧасти);
		СвойстваЧасти.Вставить("СтрокаРазделителя", СтрокаРазделителя);
		СвойстваЧастей.Добавить(СвойстваЧасти);
		Если СтрокиЧасти[0].Вид = "КлючевоеСлово"
		   И СтрокиЧасти[0].Тип = "Начало" Тогда
			
			СвойстваЧасти.Вставить("Имя",           СтрокиЧасти[0].Уточнение);
			СвойстваЧасти.Вставить("Представление", СтрокиЧасти[0].Символы);
			
			РазобратьЧастьОграничения(СвойстваЧасти, ВнутренниеДанные);
		Иначе
			СвойстваЧасти.Вставить("Имя",           "");
			СвойстваЧасти.Вставить("Представление", "");
		КонецЕсли;
		ИндексСтроки = ИндексСтрокиРазделителя + 1;
	КонецЦикла;
	
	ДобавитьПсевдонимыПоУмолчанию(ВнутренниеДанные);
	
	// Анализ части 1.
	СвойстваЧасти1 = СвойстваЧастей[0];
	
	Если СвойстваЧасти1.Имя = "" Тогда
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти1, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'В начале первой части текста ограничения не найдено ни одно из ключевых слов
			           |""%1"", ""%2"", ""%3""'"),
			"РазрешитьЧтениеИзменение,РазрешитьЧтение,ПрисоединитьДополнительныеТаблицы"));
		Возврат ЧастиОграничения;
		
	ИначеЕсли СвойстваЧасти1.Имя = "РазрешитьИзменениеЕслиРазрешеноЧтение" Тогда
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти1,
			НСтр("ru = 'В начале первой части текста ограничения найдено недопустимое ключевое слово'"));
		Возврат ЧастиОграничения;
		
	ИначеЕсли СвойстваЧастей.Количество() = 1
	        И (    СвойстваЧасти1.Имя = "ПрисоединитьДополнительныеТаблицы"
	           Или СвойстваЧасти1.Имя = "РазрешитьЧтение" ) Тогда
		
		УстановитьОшибкуНачалаЧасти(ТаблицаНаборовСимволов,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Текст ограничения не может быть только из одной части
				           |с ключевым словом ""%1""'"), СвойстваЧасти1.Представление));
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	УстановитьЧастьОграничения(ЧастиОграничения, СвойстваЧасти1);
	
	Если СвойстваЧастей.Количество() < 2 Тогда
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	// Анализ части 2.
	СвойстваЧасти2 = СвойстваЧастей[1];
	
	Если СвойстваЧасти1.Имя = "РазрешитьЧтениеИзменение" Тогда
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти1.СтрокаРазделителя,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Второй части текста ограничения не должно быть, когда
				           |в первой части указано ключевое слово ""%1""'"), СвойстваЧасти1.Представление));
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	Если СвойстваЧасти2.Имя = "" Тогда
		Если СвойстваЧасти1.Имя = "РазрешитьЧтение" Тогда
			УстановитьОшибкуНачалаЧасти(СвойстваЧасти2, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
				НСтр("ru = 'В начале второй части текста ограничения не найдено
				           |ключевое слово ""%1""'"),
				"РазрешитьИзменениеЕслиРазрешеноЧтение"));
		Иначе // СвойстваЧасти1.Имя = "ПрисоединитьДополнительныеТаблицы".
			УстановитьОшибкуНачалаЧасти(СвойстваЧасти2, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
				НСтр("ru = 'В начале второй части текста ограничения не найдено ни одно из ключевых слов
				           |""%1"", ""%2""'"),
				"РазрешитьЧтениеИзменение,РазрешитьЧтение"));
		КонецЕсли;
		Возврат ЧастиОграничения;
		
	ИначеЕсли СвойстваЧасти1.Имя = "РазрешитьЧтение"
	        И СвойстваЧасти2.Имя <> "РазрешитьИзменениеЕслиРазрешеноЧтение"
	      Или СвойстваЧасти1.Имя = "ПрисоединитьДополнительныеТаблицы"
	        И СвойстваЧасти2.Имя <> "РазрешитьЧтениеИзменение"
	        И СвойстваЧасти2.Имя <> "РазрешитьЧтение" Тогда
		
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти2,
			НСтр("ru = 'В начале второй части текста ограничения найдено недопустимое ключевое слово'"));
		Возврат ЧастиОграничения;
		
	ИначеЕсли СвойстваЧастей.Количество() = 2
	        И СвойстваЧасти2.Имя = "РазрешитьЧтение" Тогда
		
		УстановитьОшибкуНачалаЧасти(ТаблицаНаборовСимволов,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Текст ограничения не может быть только из двух частей, когда
				           |во второй части указано ключевое слово ""%1""'"), СвойстваЧасти2.Представление));
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	УстановитьЧастьОграничения(ЧастиОграничения, СвойстваЧасти2);
	
	Если СвойстваЧастей.Количество() < 3 Тогда
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	// Анализ части 3.
	СвойстваЧасти3 = СвойстваЧастей[2];
	
	Если СвойстваЧасти2.Имя = "РазрешитьЧтениеИзменение" Тогда
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти2.СтрокаРазделителя,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Третьей части текста ограничения не должно быть, когда
				           |во второй части указано ключевое слово ""%1""'"), СвойстваЧасти2.Представление));
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	Если СвойстваЧасти3.Имя = "" Тогда
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти3, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'В начале третьей части текста ограничения не найдено
			           |ключевое слово ""%1""'"),
			"РазрешитьИзменениеЕслиРазрешеноЧтение"));
		Возврат ЧастиОграничения;
		
	ИначеЕсли СвойстваЧасти2.Имя = "РазрешитьЧтение"
	        И СвойстваЧасти3.Имя <> "РазрешитьИзменениеЕслиРазрешеноЧтение" Тогда
		
		УстановитьОшибкуНачалаЧасти(СвойстваЧасти3,
			НСтр("ru = 'В начале третьей части текста ограничения найдено недопустимое ключевое слово'"));
		Возврат ЧастиОграничения;
	КонецЕсли;
	
	УстановитьЧастьОграничения(ЧастиОграничения, СвойстваЧасти3);
	
	Возврат ЧастиОграничения;
	
КонецФункции

// Для функции ЧастиОграничения.
Процедура УстановитьЧастьОграничения(ЧастиОграничения, СвойстваЧасти)
	
	Если СвойстваЧасти.Имя = "РазрешитьЧтениеИзменение"
	 Или СвойстваЧасти.Имя = "РазрешитьЧтение" Тогда
		
		ИмяСвойства = "ОграничениеЧтения";
		
	ИначеЕсли СвойстваЧасти.Имя = "РазрешитьИзменениеЕслиРазрешеноЧтение" Тогда
		
		ИмяСвойства = "ОграничениеИзменения";
		
	Иначе // ПрисоединитьДополнительныеТаблицы.
		
		ИмяСвойства = "ДополнительныеТаблицы";
		ЧастиОграничения.ПсевдонимОсновнойТаблицы = СвойстваЧасти.ПсевдонимОсновнойТаблицы;
	КонецЕсли;
	
	ЧастиОграничения[ИмяСвойства] = СвойстваЧасти.Состав;
	
КонецПроцедуры

// Для функции ЧастиОграничения, процедур РазобратьДополнительныеТаблицы, РазобратьУсловиеОграничения.
Процедура УстановитьОшибкуНачалаЧасти(СвойстваЧасти, ТекстОшибки)
	
	Если ТипЗнч(СвойстваЧасти) = Тип("ТаблицаЗначений") Тогда
		СтрокаСОшибкой = СвойстваЧасти[СвойстваЧасти.Количество() - 1];
		
	ИначеЕсли ТипЗнч(СвойстваЧасти) = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаСОшибкой = СвойстваЧасти;
	Иначе
		СтрокаСОшибкой = СвойстваЧасти.Строки[0];
	КонецЕсли;
	
	СтрокаСОшибкой.ТекстОшибки = ТекстОшибки;
	
	// Требуется описание вариантов первых ключевых слов частей.
	СтрокаСОшибкой.ПозицияОшибки = -1;
	
КонецПроцедуры

// Для процедуры РазобратьСоединение.
Процедура УстановитьОшибкуВнутриЧасти(Строки, ИндексСтроки, ТекстОшибки)
	
	Если ИндексСтроки < Строки.Количество() Тогда
		СтрокаСОшибкой = Строки[ИндексСтроки];
	Иначе
		СтрокаСОшибкой = Строки[ИндексСтроки - 1];
		// Ошибка в конце слова.
		СтрокаСОшибкой.ПозицияОшибки = СтрДлина(СтрокаСОшибкой.Символы);
	КонецЕсли;
	
	СтрокаСОшибкой.ТекстОшибки = ТекстОшибки;
	
КонецПроцедуры

// Для функции ВыраженияВСкобкахВоВложениях, ВыраженияВыборКогдаТогдаВоВложениях.
Процедура УстановитьОшибкуВСтроке(Строка, ТекстОшибки, ВКонцеСлова = Ложь, НомерСлова = 1)
	
	Если ЗначениеЗаполнено(Строка.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВКонцеСлова Тогда
		Строка.ПозицияОшибки = СтрДлина(Строка.Символы);
		
	ИначеЕсли НомерСлова > 1 Тогда
		СоставИмени = СтрРазделить(Строка.Символы, ".");
		Если СоставИмени.Количество() > 1 Тогда
			Строка.ПозицияОшибки = СтрДлина(СоставИмени[0]) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Строка.ТекстОшибки = ТекстОшибки;
	
КонецПроцедуры

// Для функции ЧастиОграничения.
Процедура РазобратьЧастьОграничения(СвойстваЧасти, ВнутренниеДанные)
	
	ПервоеСлово = СвойстваЧасти.Строки[0];
	
	Если СвойстваЧасти.Имя = "ПрисоединитьДополнительныеТаблицы" Тогда
		СвойстваЧасти.Вставить("Состав", Новый Массив);
		СвойстваЧасти.Вставить("ПсевдонимОсновнойТаблицы", "");
		РазобратьДополнительныеТаблицы(СвойстваЧасти, ВнутренниеДанные);
	Иначе
		СвойстваЧасти.Вставить("Состав", Новый Структура);
		РазобратьУсловиеОграничения(СвойстваЧасти, ВнутренниеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьЧастьОграничения.
Процедура РазобратьДополнительныеТаблицы(СвойстваЧасти, ВнутренниеДанные)
	
	СтрокиЧасти = СвойстваЧасти.Строки;
	
	Если СтрокиЧасти.Количество() < 2
	 Или СтрокиЧасти[1].Вид <> "КлючевоеСлово"
	 Или СтрокиЧасти[1].Уточнение <> "ЭтотСписок" Тогда
		УстановитьОшибкуНачалаЧасти(
			?(СтрокиЧасти.Количество() < 3, СвойстваЧасти.СтрокаРазделителя, СтрокиЧасти[1]),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После ключевого слова ""%1"" не найдено
				           |ключевое слово ""%2""'"),
				СвойстваЧасти.Представление,
				КлючевоеСловоСУчетомЯзыка("ЭтотСписок", ВнутренниеДанные)));
		Возврат;
	КонецЕсли;
	
	ИзменитьВидКлючевогоСловаСписокНаИмя(СтрокиЧасти, СтрокиЧасти[1]);
	
	Если СтрокиЧасти.Количество() < 3
	 Или СтрокиЧасти[2].Вид <> "КлючевоеСлово"
	 Или СтрокиЧасти[2].Уточнение <> "Как" Тогда
		УстановитьОшибкуНачалаЧасти(
			?(СтрокиЧасти.Количество() < 3, СвойстваЧасти.СтрокаРазделителя, СтрокиЧасти[2]),
				ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
					НСтр("ru = 'После ключевого слова ""%1"" не найдено ключевое слово ""%2""'"),
					"Список,Как"));
		Возврат;
	КонецЕсли;
	
	Если СтрокиЧасти.Количество() < 4
	 Или СтрокиЧасти[3].Вид <> "Имя" Тогда
		УстановитьОшибкуНачалаЧасти(
			?(СтрокиЧасти.Количество() < 4, СвойстваЧасти.СтрокаРазделителя, СтрокиЧасти[3]),
				ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
					НСтр("ru = 'После ключевого слова ""%1"" не найден псевдоним'"),
					"Как"));
		Возврат;
	КонецЕсли;
	
	УстановитьПсевдоним(СтрокиЧасти[3], СвойстваЧасти.ПсевдонимОсновнойТаблицы, ВнутренниеДанные);
	
	// Разделение описания на группы левых соединений.
	Соединения = Новый Массив;
	ТекущееСоединение = Новый Массив;
	
	Для Индекс = 4 По СтрокиЧасти.Количество()-1 Цикл
		СтрокаЧасти = СтрокиЧасти[Индекс];
		
		Если СтрокаЧасти.Вид = "КлючевоеСлово"
		   И СтрокаЧасти.Уточнение = "Левое" Тогда
			
			Если ТекущееСоединение.Количество() > 0 Тогда
				Соединения.Добавить(ТекущееСоединение);
			КонецЕсли;
			ТекущееСоединение = Новый Массив;
			ТекущееСоединение.Добавить(СтрокаЧасти);
			
			Если Индекс + 1 < СтрокиЧасти.Количество()
			   И СтрокиЧасти[Индекс + 1].Вид = "КлючевоеСлово"
			   И СтрокиЧасти[Индекс + 1].Уточнение = "Соединение" Тогда
				
				Индекс = Индекс + 1;
				ТекущееСоединение.Добавить(СтрокиЧасти[Индекс]);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		ТекущееСоединение.Добавить(СтрокаЧасти);
	КонецЦикла;
	
	Если ТекущееСоединение.Количество() > 0
	 Или Соединения.Количество() = 0 Тогда
		
		Соединения.Добавить(ТекущееСоединение);
	КонецЕсли;
	
	Для Каждого Соединение Из Соединения Цикл
		// Условие разбирается универсально (по максимуму возможностей)
		// после чего устанавливаются ошибки на запрещенные возможности.
		РазобратьСоединение(Соединение, СвойстваЧасти, ВнутренниеДанные);
	КонецЦикла;
	
	// Продолжение разбора после заполнения псевдонимов всех дополнительных таблиц.
	Для Каждого ОписаниеСоединения Из СвойстваЧасти.Состав Цикл
		// Допустимы только простые условия:
		// Поле1 = Поле2 [И Поле3 = Поле4] [И Поле5 = Константа].
		РазобратьПоляУсловияСоединенияИОтметитьЗапреты(ОписаниеСоединения, ВнутренниеДанные);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры РазобратьДополнительныеТаблицы.
Процедура РазобратьСоединение(Соединение, СвойстваЧасти, ВнутренниеДанные)
	
	ОписаниеСоединения = Новый Структура;
	ОписаниеСоединения.Вставить("Таблица", "");
	ОписаниеСоединения.Вставить("Псевдоним", "");
	ОписаниеСоединения.Вставить("УсловиеСоединения", Неопределено);
	
	Если Соединение[0].Вид <> "КлючевоеСлово"
	 Или Соединение[0].Уточнение <> "Левое" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 0, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'Не найдено ключевое слово ""%1""'"), "Левое"));
		
		Если Соединение[0].Вид <> "КлючевоеСлово"
		 Или Соединение[0].Уточнение <> "Внутреннее"
		   И Соединение[0].Уточнение <> "Полное" Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Соединение.Количество() < 2
	 Или Соединение[1].Вид <> "КлючевоеСлово"
	 Или Соединение[1].Уточнение <> "Соединение" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 1,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После ключевого слова ""%1"" не найдено ключевое слово ""%2""'"),
				Соединение[0].Символы,
				КлючевоеСловоСУчетомЯзыка("Соединение", ВнутренниеДанные)));
		Возврат;
	КонецЕсли;
	
	Если Соединение.Количество() < 3
	 Или Соединение[2].Вид <> "Имя" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 2,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После ключевого слова ""%1"" не найдено имя таблицы'"),
				Соединение[1].Символы));
		Возврат;
	КонецЕсли;
	
	УстановитьИмяТаблицы(Соединение[2], ОписаниеСоединения, ВнутренниеДанные);
	
	Если Соединение.Количество() < 4
	 Или Соединение[3].Вид <> "КлючевоеСлово"
	 Или Соединение[3].Уточнение <> "Как" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 3, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'После имени таблицы не найдено ключевое слово ""%1""'"), "Как"));
		Возврат;
	КонецЕсли;
	
	Если Соединение.Количество() < 5
	 Или Соединение[4].Вид <> "Имя" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 4, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'После ключевого слова ""%1"" не найден псевдоним таблицы'"), "Как"));
		Возврат;
	КонецЕсли;
	
	УстановитьПсевдоним(Соединение[4], ОписаниеСоединения, ВнутренниеДанные);
	
	Если Соединение.Количество() < 6
	 Или Соединение[5].Вид <> "КлючевоеСлово"
	 Или Соединение[5].Уточнение <> "По" Тогда
		УстановитьОшибкуВнутриЧасти(Соединение, 5, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
			НСтр("ru = 'После псевдонима таблицы не найдено ключевое слово ""%1""'"), "По"));
		Возврат;
	КонецЕсли;
	
	Условие = Новый Массив(Новый ФиксированныйМассив(Соединение));
	Для Индекс = 0 По 5 Цикл
		Условие.Удалить(0);
	КонецЦикла;
	
	РазобратьУсловие(Условие, ОписаниеСоединения.УсловиеСоединения, ВнутренниеДанные);
	
	СвойстваЧасти.Состав.Добавить(ОписаниеСоединения);
	
КонецПроцедуры

// Для процедуры РазобратьДополнительныеТаблицы.
Процедура РазобратьПоляУсловияСоединенияИОтметитьЗапреты(ОписаниеСоединения, ВнутренниеДанные)
	
	// Отметка некорректных аргументов операций и запрещенных возможностей.
	ОбщиеУзлы = Новый Соответствие(УправлениеДоступомСлужебныйПовтИсп.УзлыДляПроверкиДоступности(
		"Поле,Значение,Константа,И,=", Ложь));
	
	ОбщиеУзлы.Вставить("Поле", Новый Структура("Выразить, Вложение, ЕстьNull", Ложь, Ложь, Ложь));
	
	ДоступныеУзлы = Новый Структура;
	ДоступныеУзлы.Вставить("Общие",          ОбщиеУзлы);
	ДоступныеУзлы.Вставить("УзлыКогда",      ОбщиеУзлы);
	ДоступныеУзлы.Вставить("УзлыТогдаИначе", ОбщиеУзлы);
	
	ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(ВнутренниеДанные);
	Контекст = Новый Структура(ФиксированныйКонтекст);
	Контекст.Вставить("ЭтоУсловиеСоединения",  Истина);
	Контекст.Вставить("ЭтоУсловиеКогда",       Ложь);
	Контекст.Вставить("ЭтоЗначениеТогдаИначе", Ложь);
	Контекст.Вставить("КорневойУзел",          ОписаниеСоединения.УсловиеСоединения);
	Контекст.Вставить("Родители",              Новый Массив);
	
	ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(ОписаниеСоединения.УсловиеСоединения,
		ДоступныеУзлы, Контекст, Новый Структура("Узел", ""));
	
	УдалитьСвойствоИсточник(ОписаниеСоединения.УсловиеСоединения);
	
КонецПроцедуры

// Для процедур РазобратьУсловиеСоединения, РазобратьУсловиеОграничения.
Функция УзлыДляПроверкиДоступности(Список, ЭтоСписокИсключений) Экспорт
	
	ВсеУзлы = Новый Соответствие;
	ВсеУзлы.Вставить("Поле", Новый Структура("Выразить, Вложение, ЕстьNull", Истина, Истина, Истина));
	ВсеУзлы.Вставить("Значение",    Истина);
	ВсеУзлы.Вставить("Константа",   Истина);
	ВсеУзлы.Вставить("И",           Истина);
	ВсеУзлы.Вставить("Или",         Истина);
	ВсеУзлы.Вставить("Не",          Истина);
	ВсеУзлы.Вставить("=",           Истина);
	ВсеУзлы.Вставить("<>",          Истина);
	ВсеУзлы.Вставить("В",           Истина);
	ВсеУзлы.Вставить("ЕстьNull",    Истина);
	ВсеУзлы.Вставить("Тип",         Истина);
	ВсеУзлы.Вставить("ТипЗначения", Истина);
	ВсеУзлы.Вставить("Выбор",       Истина);
	ВсеУзлы.Вставить("ЗначениеРазрешено",             Истина);
	ВсеУзлы.Вставить("ЭтоАвторизованныйПользователь", Истина);
	ВсеУзлы.Вставить("ЧтениеОбъектаРазрешено",        Истина);
	ВсеУзлы.Вставить("ИзменениеОбъектаРазрешено",     Истина);
	ВсеУзлы.Вставить("ЧтениеСпискаРазрешено",         Истина);
	ВсеУзлы.Вставить("ИзменениеСпискаРазрешено",      Истина);
	ВсеУзлы.Вставить("ДляВсехСтрок",                  Истина);
	ВсеУзлы.Вставить("ДляОднойИзСтрок",               Истина);
	
	МассивУзлов = СтрРазделить(Список, ",", Ложь);
	Узлы = Новый Соответствие;
	
	Для Каждого Узел Из ВсеУзлы Цикл
		Если ЭтоСписокИсключений Тогда
			Если МассивУзлов.Найти(Узел.Ключ) = Неопределено Тогда
				Узлы.Вставить(Узел.Ключ, Узел.Значение);
			КонецЕсли;
		Иначе
			Если МассивУзлов.Найти(Узел.Ключ) <> Неопределено Тогда
				Узлы.Вставить(Узел.Ключ, Узел.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Узлы);
	
КонецФункции

// Для процедур РазобратьУсловиеСоединения, РазобратьУсловиеОграничения.
Процедура ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие, ДоступныеУзлы, Контекст, Родитель)
	
	Если Не ЗначениеЗаполнено(Условие) Тогда
		Возврат;
	КонецЕсли;
	Контекст.Родители.Вставить(0, Родитель);
	
	Если Контекст.ЭтоУсловиеКогда Тогда
		ТекущиеДоступныеУзлы = ДоступныеУзлы.УзлыКогда;
		
	ИначеЕсли Контекст.ЭтоЗначениеТогдаИначе Тогда
		ТекущиеДоступныеУзлы = ДоступныеУзлы.УзлыТогдаИначе;
	Иначе
		ТекущиеДоступныеУзлы = ДоступныеУзлы.Общие;
	КонецЕсли;
	
	ДоступностьУзла = ТекущиеДоступныеУзлы.Получить(Условие.Узел);
	
	Если ДоступностьУзла = Неопределено Тогда
		УстановитьОшибкуУзелЗапрещен(Условие.Источник, Контекст);
	КонецЕсли;
	
	Если Условие.Узел = "Поле" Тогда
		
		Если Не Контекст.ЭтоУсловиеСоединения Тогда
			Если Родитель = Неопределено Тогда
				Родитель = Новый Структура("Узел", "");
			КонецЕсли;
			ПоляКлючаДоступа = Новый Структура;
			ПоляКлючаДоступа.Вставить("Поле",     Условие);
			ПоляКлючаДоступа.Вставить("Родители", Новый ФиксированныйМассив(Контекст.Родители));
			ПоляКлючаДоступа.Вставить("Чтение",   Контекст.Чтение);
			Контекст.ПоляКлючаДоступа.Добавить(ПоляКлючаДоступа);
		КонецЕсли;
		
		ВыделитьПсевдонимПоля(Условие, Контекст);
		
		Если Не ДоступностьУзла.Выразить
		   И Условие.Выразить <> Неопределено Тогда
			
			УстановитьОшибкуУзелЗапрещен(Условие.Источник, Контекст);
			
		ИначеЕсли Не ДоступностьУзла.Вложение
		        И Условие.Вложение <> Неопределено Тогда
		
			УстановитьОшибкуУзелЗапрещен(Условие.Вложение.Источник, Контекст);
			
		ИначеЕсли Не ДоступностьУзла.ЕстьNull
		        И Условие.ЕстьNull <> Неопределено Тогда
		
			УстановитьОшибкуУзелЗапрещен(Условие.ЕстьNullИсточник, Контекст);
		КонецЕсли;
		
	ИначеЕсли Условие.Узел = "И"
	      Или Условие.Узел = "Или" Тогда
		
		Для Каждого Аргумент Из Условие.Аргументы Цикл
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Аргумент, ДоступныеУзлы, Контекст, Условие);
		КонецЦикла;
		
	ИначеЕсли Условие.Узел = "Не"
	      Или Условие.Узел = "ЕстьNull"
	      Или Условие.Узел = "ДляВсехСтрок"
	      Или Условие.Узел = "ДляОднойИзСтрок" Тогда
		
		// Проверка корректности параметра.
		Если Условие.Узел = "ЕстьNull"
		   И (    Условие.Аргумент = Неопределено
		      Или Условие.Аргумент.Узел <> "Поле" ) Тогда
			
			УстановитьОшибкуВСтроке(Условие.Источник,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Операция ""%1"" допустима только после поля'"),
					Условие.Источник.Символы));
		КонецЕсли;
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Аргумент, ДоступныеУзлы, Контекст, Условие);
		
	ИначеЕсли Условие.Узел = "="
	      Или Условие.Узел = "<>" Тогда
		
		СочетанияУзлов = Новый Соответствие;
		СочетанияУзлов.Вставить("Значение",  ",Поле,");
		СочетанияУзлов.Вставить("Константа", ",Поле,Константа,");
		
		Если Контекст.ЭтоУсловиеСоединения Тогда
			СочетанияУзлов.Вставить("Поле",        ",Поле,Значение,Константа,");
		Иначе
			СочетанияУзлов.Вставить("Поле",        ",Значение,Константа,");
			СочетанияУзлов.Вставить("Тип",         ",ТипЗначения,");
			СочетанияУзлов.Вставить("ТипЗначения", ",Тип,");
		КонецЕсли;
		
		СочетанияПервогоАргумента = СочетанияУзлов.Получить(Условие.ПервыйАргумент.Узел);
		СочетанияВторогоАргумента = СочетанияУзлов.Получить(Условие.ВторойАргумент.Узел);
		
		ОшибкаВПервомАргументе  = СочетанияПервогоАргумента = Неопределено;
		ОшибкаВоВторомАргументе = СочетанияВторогоАргумента = Неопределено
			Или СочетанияПервогоАргумента <> Неопределено
			  И СтрНайти(СочетанияПервогоАргумента, "," + Условие.ВторойАргумент.Узел + ",") = 0;
		
		Если ОшибкаВПервомАргументе Или ОшибкаВоВторомАргументе Тогда
			Если Контекст.ЭтоУсловиеСоединения Тогда
				ТекстОшибки =
					НСтр("ru = 'Операция ""%1"" допустима только для поля с полем, значением или константой'");
			Иначе
				ТекстОшибки =
					НСтр("ru = 'Операция ""%1"" допустима только для поля со значением или константой,
					           |а также для типа значения с типом'");
			КонецЕсли;
			Если ОшибкаВПервомАргументе Тогда
				УстановитьОшибкуВСтроке(Условие.ПервыйАргумент.Источник,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки, Условие.Источник.Символы),
					Истина);
			КонецЕсли;
			Если ОшибкаВоВторомАргументе Тогда
				УстановитьОшибкуВСтроке(Условие.ВторойАргумент.Источник,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки, Условие.Источник.Символы));
			КонецЕсли;
		КонецЕсли;
		
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.ПервыйАргумент, ДоступныеУзлы, Контекст, Условие);
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.ВторойАргумент, ДоступныеУзлы, Контекст, Условие);
		
	ИначеЕсли Условие.Узел = "В" Тогда
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Искомое, ДоступныеУзлы, Контекст, Условие);
		Для Каждого Значение Из Условие.Значения Цикл
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Значение, ДоступныеУзлы, Контекст, Условие);
		КонецЦикла;
		
	ИначеЕсли Условие.Узел = "ТипЗначения"
	      Или Условие.Узел = "Тип" Тогда
		
		Если Родитель = Неопределено
		 Или Родитель.Узел <> "="
		   И Родитель.Узел <> "<>" Тогда
		
			УстановитьОшибкуВСтроке(Условие.Источник,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Функция ""%1"" допустима только в операциях ""="" и ""<>""'"),
					Условие.Источник.Символы));
		КонецЕсли;
		
		Если Условие.Узел = "ТипЗначения" Тогда
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Аргумент, ДоступныеУзлы, Контекст, Условие);
		КонецЕсли;
		
	ИначеЕсли Условие.Узел = "Выбор" Тогда
		Если Условие.Выбор <> Неопределено Тогда
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Выбор, ДоступныеУзлы, Контекст, Условие);
		КонецЕсли;
		ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(Контекст);
		КонтекстКогда = Новый Структура(ФиксированныйКонтекст);
		КонтекстКогда.ЭтоУсловиеКогда = Истина;
		КонтекстТогдаИначе = Новый Структура(ФиксированныйКонтекст);
		КонтекстТогдаИначе.ЭтоЗначениеТогдаИначе = Истина;
		
		Для Каждого Когда Из Условие.Когда Цикл
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Когда.Условие,  ДоступныеУзлы, КонтекстКогда,      Условие);
			ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Когда.Значение, ДоступныеУзлы, КонтекстТогдаИначе, Условие);
		КонецЦикла;
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Иначе, ДоступныеУзлы, КонтекстТогдаИначе, Условие);
		
	ИначеЕсли Условие.Узел = "ЗначениеРазрешено"
	      Или Условие.Узел = "ЭтоАвторизованныйПользователь"
	      Или Условие.Узел = "ЧтениеОбъектаРазрешено"
	      Или Условие.Узел = "ИзменениеОбъектаРазрешено"
	      Или Условие.Узел = "ЧтениеСпискаРазрешено"
	      Или Условие.Узел = "ИзменениеСпискаРазрешено" Тогда
		
		ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(Условие.Поле, ДоступныеУзлы, Контекст, Условие);
		ОтметитьПовторыТиповСредиПроверяемыхИУточняемых(Условие, Контекст);
		
		// Добавление типов, наличие которых нужно проверить у полей.
		Поле = Условие.Поле;
		Уточнения = Новый Соответствие;
		Для Каждого УточнениеСравнения Из Условие.УточненияСравнения Цикл
			Если ТипЗнч(УточнениеСравнения.Ключ) <> Тип("СтрокаТаблицыЗначений") Тогда
				Уточнения.Вставить(УточнениеСравнения.Ключ, УточнениеСравнения.Значение);
				Продолжить;
			КонецЕсли;
			Уточнения.Вставить(УточнениеСравнения.Ключ.Символы, УточнениеСравнения.Значение);
			ДобавитьТребуемоеПолеТаблицы(Контекст, Поле.Таблица, Поле.Имя, Поле.ИмяИсточник,
				УточнениеСравнения.Ключ.Символы, УточнениеСравнения.Ключ);
		КонецЦикла;
		
		// Удаление источников типов.
		Условие.УточненияСравнения = Уточнения;
		
		Типы = Новый Массив;
		Для Каждого Тип Из Условие.Типы Цикл
			Типы.Добавить(Тип.Символы);
		КонецЦикла;
		Условие.Типы = Типы;
	КонецЕсли;
	
	Контекст.Родители.Удалить(0);
	
КонецПроцедуры

// Для процедуры ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
Процедура ВыделитьПсевдонимПоля(УзелПоле, Контекст)
	
	Если УзелПоле.Вложение <> Неопределено Тогда
		Вложение = УзелПоле.Вложение;
		ВыделитьПсевдонимПоля(Вложение, Контекст);
		Если ЗначениеЗаполнено(Вложение.Выразить) Тогда
			УзелПоле.Таблица = Вложение.Выразить;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(УзелПоле.Имя) Тогда
		Возврат;
	Иначе
		СоставИмени = СтрРазделить(УзелПоле.Имя, ".");
		Если СоставИмени.Количество() > 1 Тогда
			Таблица = Контекст.Псевдонимы.Получить(ВРег(СоставИмени[0]));
			Если Таблица <> Неопределено Тогда
				УзелПоле.Псевдоним = СоставИмени[0];
				СоставИмени.Удалить(0);
				УзелПоле.Имя = СтрСоединить(СоставИмени, ".");
				Если ЗначениеЗаполнено(Таблица) Тогда
					УзелПоле.Таблица = Таблица;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Контекст.ЭтоУсловиеСоединения
		   И Не ЗначениеЗаполнено(УзелПоле.Псевдоним) Тогда
			
			УстановитьОшибкуВСтроке(УзелПоле.ИмяИсточник,
				НСтр("ru = 'В условии соединения перед именем поля требуется псевдоним'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелПоле.Выразить) Тогда
		ДобавитьТребуемуюТаблицуКакСсылочныйТип(Контекст, УзелПоле.Выразить, УзелПоле.ВыразитьИсточник);
	КонецЕсли;
	
	ДобавитьТребуемоеПолеТаблицы(Контекст, УзелПоле.Таблица, УзелПоле.Имя, УзелПоле.ИмяИсточник,
		УзелПоле.Выразить, УзелПоле.ВыразитьИсточник, УзелПоле);
	
КонецПроцедуры

// Для процедур РазобратьУсловиеСоединения, РазобратьУсловиеОграничения.
Процедура УдалитьСвойствоИсточник(Условие)
	
	Если ТипЗнч(Условие) = Тип("СтрокаТаблицыЗначений") Тогда
		ВызватьИсключение НСтр("ru = 'Не все источники наборов символов удалены'");
		
	ИначеЕсли ТипЗнч(Условие) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Условие.Свойство("Источник") Тогда
		Условие.Удалить("Источник");
	КонецЕсли;
	
	Если Условие.Свойство("ИмяИсточник") Тогда
		Условие.Удалить("ИмяИсточник");
	КонецЕсли;
	
	Если Условие.Свойство("ВыразитьИсточник") Тогда
		Условие.Удалить("ВыразитьИсточник");
	КонецЕсли;
	
	Если Условие.Свойство("ЕстьNullИсточник") Тогда
		Условие.Удалить("ЕстьNullИсточник");
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Условие Цикл
		Значение = КлючИЗначение.Значение;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Для Каждого Элемент Из Значение Цикл
				УдалитьСвойствоИсточник(Элемент);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Соответствие") Тогда
			Для Каждого КлючИЗначение Из Значение Цикл
				УдалитьСвойствоИсточник(КлючИЗначение.Ключ);
				УдалитьСвойствоИсточник(КлючИЗначение.Значение);
			КонецЦикла;
		Иначе
			УдалитьСвойствоИсточник(Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
Процедура УстановитьОшибкуУзелЗапрещен(Строка, Контекст)
	
	Если Строка.Тип = "Функция" Тогда
		Если Контекст.ЭтоУсловиеСоединения Тогда
			ШаблонОшибки = НСтр("ru = 'Функция ""%1"" запрещена в условии соединения'");
			
		ИначеЕсли Контекст.ЭтоУсловиеКогда Тогда
			ШаблонОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Функция ""%3"" запрещена в условии ограничения в операции ""%1"" в предложении ""%2""'"),
				"Выбор,Когда", Строка.Символы);
			
		ИначеЕсли Контекст.ЭтоЗначениеТогдаИначе Тогда
			ШаблонОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Функция ""%4"" запрещена в условии ограничения в операции ""%1"" в предложениях ""%2"" и ""%3""'"),
				"Выбор,Тогда,Иначе");
		Иначе
			ШаблонОшибки = НСтр("ru = 'Функция ""%1"" запрещена в условии ограничения'");
		КонецЕсли;
	Иначе
		Если Контекст.ЭтоУсловиеСоединения Тогда
			ШаблонОшибки = НСтр("ru = 'Операция ""%1"" запрещена в условии соединения'");
			
		ИначеЕсли Контекст.ЭтоУсловиеКогда Тогда
			ШаблонОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Операция ""%3"" запрещена в условии ограничения в операции ""%1"" в предложении ""%2""'"),
				"Выбор,Когда", Строка.Символы);
			
		ИначеЕсли Контекст.ЭтоЗначениеТогдаИначе Тогда
			ШаблонОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Операция ""%4"" запрещена в условии ограничения в операции ""%1"" в предложениях ""%2"" и ""%3""'"),
				"Выбор,Тогда,Иначе");
		Иначе
			ШаблонОшибки = НСтр("ru = 'Операция ""%1"" запрещена в условии ограничения'");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонОшибки, Строка.Символы));
	
КонецПроцедуры

// Для процедуры ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
Процедура ОтметитьПовторыТиповСредиПроверяемыхИУточняемых(Узел, Контекст)
	
	ТипыВСписке = Новый Соответствие;
	
	Для Каждого ТипВСписке Из Узел.Типы Цикл
		Если ТипыВСписке.Получить(ВРег(ТипВСписке.Символы)) = Неопределено Тогда
			ТипыВСписке.Вставить(ВРег(ТипВСписке.Символы), Истина);
		Иначе
			УстановитьОшибкуВСтроке(ТипВСписке, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип ""%1"" уже указан'"), ТипВСписке.Символы));
		КонецЕсли;
	КонецЦикла;
	
	УточняемыеТипы = Новый Соответствие;
	
	Для Каждого УточнениеСравнения Из Узел.УточненияСравнения Цикл
		Если ТипЗнч(УточнениеСравнения.Ключ) <> Тип("СтрокаТаблицыЗначений") Тогда
			Продолжить;
		КонецЕсли;
		ИсточникТипа = УточнениеСравнения.Ключ;
		
		Если Не Узел.ПроверятьТипыКромеУказанных
		   И ТипыВСписке.Получить(ВРег(ИсточникТипа.Символы)) <> Неопределено Тогда
			
			УстановитьОшибкуВСтроке(ИсточникТипа, ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Тип ""%2"" уже указан среди типов ключевого слова ""%1""'"),
				"Только",
				ИсточникТипа.Символы));
			
		ИначеЕсли Узел.ПроверятьТипыКромеУказанных
		        И ТипыВСписке.Получить(ВРег(ИсточникТипа.Символы)) = Неопределено Тогда
			
			УстановитьОшибкуВСтроке(ИсточникТипа, ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Тип ""%2"" не указан среди типов ключевого слова ""%1""'"),
				"Кроме",
				ИсточникТипа.Символы));
			
		ИначеЕсли УточняемыеТипы.Получить(ВРег(ИсточникТипа.Символы)) <> Неопределено Тогда
			УстановитьОшибкуВСтроке(ИсточникТипа, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Уточнение типа ""%1"" уже указано'"), ИсточникТипа.Символы));
		Иначе
			УточняемыеТипы.Вставить(ВРег(ИсточникТипа.Символы), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры РазобратьЧастьОграничения.
Процедура РазобратьУсловиеОграничения(СвойстваЧасти, ВнутренниеДанные)
	
	СтрокиЧасти = СвойстваЧасти.Строки;
	ИзменитьВидКлючевогоСловаСписокНаИмя(СтрокиЧасти);
	
	Если СтрокиЧасти.Количество() < 2
	 Или СтрокиЧасти[1].Вид <> "КлючевоеСлово"
	 Или СтрокиЧасти[1].Уточнение <> "Где" Тогда
		УстановитьОшибкуНачалаЧасти(
			?(СтрокиЧасти.Количество() < 2, СвойстваЧасти.СтрокаРазделителя, СтрокиЧасти[1]),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'После ключевого слова ""%1"" не найдено
					           |ключевое слово ""%2""'"),
					СвойстваЧасти.Представление,
					КлючевоеСловоСУчетомЯзыка("Где", ВнутренниеДанные)));
		Возврат;
	КонецЕсли;
	
	Условие = Новый Массив(Новый ФиксированныйМассив(СтрокиЧасти));
	Для Индекс = 0 По 1 Цикл
		Условие.Удалить(0);
	КонецЦикла;
	
	РазобратьУсловие(Условие, СвойстваЧасти.Состав, ВнутренниеДанные);
	
	// Отметка некорректных параметров операций и неподдерживаемого функционала.
	ОбщиеУзлы = УправлениеДоступомСлужебныйПовтИсп.УзлыДляПроверкиДоступности("", Истина);
	
	УзлыКогда = УправлениеДоступомСлужебныйПовтИсп.УзлыДляПроверкиДоступности(
		"Поле,Значение,Константа,И,Или,Не,=,<>,В,ЕстьNull,Тип,ТипЗначения", Ложь);
	
	УзлыТогдаИначе = УправлениеДоступомСлужебныйПовтИсп.УзлыДляПроверкиДоступности(
		"Выбор,ДляВсехСтрок,ДляОднойИзСтрок", Истина);
	
	ДоступныеУзлы = Новый Структура;
	ДоступныеУзлы.Вставить("Общие",          ОбщиеУзлы);
	ДоступныеУзлы.Вставить("УзлыКогда",      УзлыКогда);
	ДоступныеУзлы.Вставить("УзлыТогдаИначе", УзлыТогдаИначе);
	
	ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(ВнутренниеДанные);
	Контекст = Новый Структура(ФиксированныйКонтекст);
	Контекст.Вставить("ЭтоУсловиеСоединения",  Ложь);
	Контекст.Вставить("ЭтоУсловиеКогда",       Ложь);
	Контекст.Вставить("ЭтоЗначениеТогдаИначе", Ложь);
	Контекст.Вставить("КорневойУзел",          СвойстваЧасти.Состав);
	Контекст.Вставить("Родители",              Новый Массив);
	Контекст.Вставить("Чтение",                СтрНачинаетсяС(СвойстваЧасти.Имя, "РазрешитьЧтение"));
	
	ДобавитьПсевдонимыПоУмолчанию(Контекст);
	
	ОтметитьНекорректныеАргументыИЗапрещенныеУзлы(СвойстваЧасти.Состав,
		ДоступныеУзлы, Контекст, Новый Структура("Узел", ""));
	
	УдалитьСвойствоИсточник(СвойстваЧасти.Состав);
	
КонецПроцедуры

// Для процедур ЧастиОграничения, РазобратьУсловиеОграничения.
Процедура ДобавитьПсевдонимыПоУмолчанию(Контекст);
	
	Если Контекст.Псевдонимы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Контекст.Псевдонимы.Вставить(ВРег("ЭтотСписок"), "");
	Контекст.Псевдонимы.Вставить(ВРег("ThisList"), "");
	
КонецПроцедуры

// Для процедур РазобратьУсловиеСоединения, РазобратьУсловиеОграничения.
Процедура РазобратьУсловие(Условие, Состав, ВнутренниеДанные)
	
	ВыраженияВСкобкахВоВложениях = ВыраженияВСкобкахВоВложениях(Условие);
	
	ФункцииСВыражениямиВСкобках = ФункцииСВыражениямиВСкобках(
		ВыраженияВСкобкахВоВложениях, ВнутренниеДанные);
	
	ВыраженияВыборКогдаТогдаВоВложениях = ВыраженияВыборКогдаТогдаВоВложениях(
		ФункцииСВыражениямиВСкобках, ВнутренниеДанные);
	
	Условие = ВыраженияВыборКогдаТогдаВоВложениях;
	
	РазобратьВыражение(Условие, Состав, ВнутренниеДанные, Ложь);
	
	ОбъединитьВложенныеЛогическиеОперации(Состав);
	
КонецПроцедуры

// Для процедуры РазобратьУсловие.
Процедура ОбъединитьВложенныеЛогическиеОперации(Состав)
	
	Если Состав = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Состав.Узел = "И"
	 Или Состав.Узел = "Или" Тогда
		
		Индекс = Состав.Аргументы.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Аргумент = Состав.Аргументы[Индекс];
			ОбъединитьВложенныеЛогическиеОперации(Аргумент);
			
			Если Аргумент.Узел = Состав.Узел Тогда
				Состав.Аргументы.Удалить(Индекс);
				ВложенныйИндекс = Аргумент.Аргументы.Количество() - 1;
				Пока ВложенныйИндекс >= 0 Цикл
					Состав.Аргументы.Вставить(Индекс, Аргумент.Аргументы[ВложенныйИндекс]);
					ВложенныйИндекс = ВложенныйИндекс - 1;
				КонецЦикла;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


// Для процедур РазобратьУсловие, РазобратьФункцию, РазобратьВыбор.
Процедура РазобратьВыражение(Условие, Состав, ТекущийКонтекст, ВложенноеВыражение = Истина)
	
	ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(ТекущийКонтекст);
	Контекст = Новый Структура(ФиксированныйКонтекст);
	Контекст.Вставить("Вложения", Новый Массив);
	Контекст.Вставить("Описание");
	Контекст.Вставить("Строка");
	
	Для Каждого Строка Из Условие Цикл
		Контекст.Строка = Строка;
		
		Если Строка.Вид = "Имя"
		 Или Строка.Вид = "Число"
		 Или Строка.Вид = "ПроизвольнаяСтрока"
		 Или Строка.Вид = "КлючевоеСлово" 
		   И (    Строка.Уточнение = "Истина"
		      Или Строка.Уточнение = "Ложь"
		      Или Строка.Уточнение = "Неопределено" ) Тогда
			
			НовоеОписание = ОписаниеУзлаПолеИлиУзлаКонстанта(Строка);
			ДобавитьАргументФункциюВыборОператор(Контекст, НовоеОписание);
			
		ИначеЕсли Строка.Вид = "КлючевоеСлово" Тогда
			
			Если Строка.Тип = "Функция"
			 Или Строка.Уточнение = "В" Тогда
				
				Если Строка.Тип = "Функция" Тогда
					РазобратьФункцию(Контекст);
				Иначе
					РазобратьСоединительВ(Контекст);
				КонецЕсли;
				
			ИначеЕсли Строка.Тип = "Соединитель" Тогда
				РазобратьСоединитель(Контекст);
			
			ИначеЕсли Строка.Тип = "Оператор" Тогда
				РазобратьОператор(Контекст);
				
			ИначеЕсли Строка.Тип = "СловоВыбора" Тогда
				РазобратьВыбор(Контекст);
			Иначе
				РазобратьОшибочноеКлючевоеСлово(Контекст);
			КонецЕсли;
			
		ИначеЕсли Строка.Вид = "Операция" Тогда
			РазобратьСоединитель(Контекст, Истина);
			
		ИначеЕсли Строка.Вид = "Разделитель" Тогда
			Если Строка.Символы = "(" Тогда
				НовоеОписание = Неопределено;
				РазобратьВыражение(Строка.Строки, НовоеОписание, Контекст);
				ДобавитьАргументФункциюВыборОператор(Контекст, НовоеОписание);
			Иначе
				Контекст.Описание = Неопределено;
				УстановитьОшибкуВСтроке(Строка,
					НСтр("ru = 'Запятая может использоваться только для разделения параметров функций'"));
			КонецЕсли;
		Иначе
			Контекст.Описание = Неопределено;
			УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработка ключевого слова ""%1"" не определена'"), Строка.Символы));
		КонецЕсли;
		
		Если Контекст.Описание = Неопределено Тогда
			// Возникала ошибка, останавливающая дальнейший разбор (предотвращение ложных срабатываний).
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Контекст.Описание = Неопределено Тогда
		Если ВложенноеВыражение Тогда
			Состав = Новый Структура("Источник, Узел, Значение", Строка, "Константа", Ложь);
		Иначе
			Состав = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Контекст.Вложения.Количество() = 0 Тогда
		Состав = Контекст.Описание;
	Иначе
		Состав = Контекст.Вложения[Контекст.Вложения.Количество() - 1];
	КонецЕсли;
	
КонецПроцедуры

// Для процедур РазобратьВыражение, РазобратьПервыйПараметрПроверочнойФункции,
// РазобратьПараметрыФункцииТипЗначения, РазобратьВыбор и
// для функции ОписаниеУзлаПолеИзФункцииЕстьNull.
//
Функция ОписаниеУзлаПолеИлиУзлаКонстанта(Строка)
	
	// <Имя поля>, <Число>, <Произвольная строка>, Истина, Ложь, Неопределено.
	
	Если Строка.Вид = "Имя" Тогда
		НовоеОписание = ОписаниеУзлаПоле(Строка);
		НовоеОписание.Имя         = Строка.Символы;
		НовоеОписание.ИмяИсточник = Строка;
	Иначе
		СвойстваУзла = "Источник, Узел, Значение";
		НовоеОписание = Новый Структура(СвойстваУзла, Строка, "Константа");
		
		Если Строка.Вид = "КлючевоеСлово" Тогда
			Если Строка.Уточнение = "Истина" Тогда
				НовоеОписание.Значение = Истина;
				
			ИначеЕсли Строка.Уточнение = "Ложь" Тогда
				НовоеОписание.Значение = Ложь;
				
			Иначе // Строка.Вид = "Неопределено".
				НовоеОписание.Значение = Неопределено;
			КонецЕсли;
		Иначе // "Число" или "ПроизвольнаяСтрока".
			НовоеОписание.Значение = Строка.Уточнение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовоеОписание;
	
КонецФункции

// Для функций ОписаниеУзлаПолеИлиУзлаКонстанта, ОписаниеУзлаПолеИзФункцииВыразить, ОписаниеУзлаПолеИзФункцииЕстьNull.
Функция ОписаниеУзлаПоле(Строка)
	
	СвойстваУзла = "Источник, Узел, Имя, Таблица, Псевдоним, Выразить, Вложение, ЕстьNull";
	НовоеОписание = Новый Структура(СвойстваУзла, Строка, "Поле");
	
	НовоеОписание.Вставить("ИмяИсточник",      Неопределено);
	НовоеОписание.Вставить("ВыразитьИсточник", Неопределено);
	НовоеОписание.Вставить("ЕстьNullИсточник", Неопределено);
	
	Возврат НовоеОписание;
	
КонецФункции

// Для процедуры РазобратьВыражение.
Процедура РазобратьСоединитель(Контекст, ЭтоОперация = Ложь)
	
	// И, Или, Как, Кроме, Только, Есть и любая операция =, <>, ...
	// Ключевое слово В разбирается отдельно в процедуре "РазобратьОперациюВ".
	
	Строка = Контекст.Строка;
	
	НовоеОписание = Новый Структура("Источник, Узел", Строка,
		?(Строка.Вид = "Операция", Строка.Символы, Строка.Уточнение));
	
	Если Строка.Уточнение = "И"
	 Или Строка.Уточнение = "Или" Тогда
		
		НовоеОписание.Вставить("Аргументы", Новый Массив);
		НовоеОписание.Аргументы.Добавить(Неопределено);
		ДобавитьСоединитель(Контекст, НовоеОписание, НовоеОписание.Аргументы[0]);
	
	ИначеЕсли Строка.Уточнение = "Есть" Тогда
		НовоеОписание.Узел = "ЕстьNull";
		НовоеОписание.Вставить("Аргумент", Неопределено);
		ДобавитьСоединитель(Контекст, НовоеОписание, НовоеОписание.Аргумент);
		// Проверка корректности параметров выполняется
		// в процедуре ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
		
	ИначеЕсли Строка.Вид = "Операция" Тогда
		НовоеОписание.Вставить("ПервыйАргумент", Неопределено);
		НовоеОписание.Вставить("ВторойАргумент", Неопределено);
		ДобавитьСоединитель(Контекст, НовоеОписание, НовоеОписание.ПервыйАргумент);
		// Проверка корректности аргументов выполняется
		// в процедуре ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
		
	ИначеЕсли Строка.Уточнение = "Как"
	      Или Строка.Уточнение = "Кроме"
	      Или Строка.Уточнение = "Только" Тогда
		
		Контекст.Описание = Неопределено;
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ключевое слово ""%1"" может использоваться только в параметрах функций'"), Строка.Символы));
	Иначе
		Контекст.Описание = Неопределено;
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка ключевого слова ""%1"" не определена'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьВыражение.
Процедура РазобратьСоединительВ(Контекст)
	
	Строка = Контекст.Строка;
	
	НовоеОписание = Новый Структура("Источник, Узел", Строка, Строка.Уточнение);
	НовоеОписание.Вставить("Искомое",  Неопределено);
	НовоеОписание.Вставить("Значения", Новый Массив);
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	// Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
	
	Для Каждого ОписаниеПараметра Из СоставПараметров Цикл
		Для Каждого Подстрока Из ОписаниеПараметра.Строки Цикл
			
			РазобратьЗначениеСоединителяВ(Контекст, Подстрока, НовоеОписание);
			
			Если ОписаниеПараметра.Строки[0] <> Подстрока Тогда
				УстановитьОшибкуВСтроке(Подстрока, НСтр("ru = 'Перед параметром не указана запятая'"));
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДобавитьСоединитель(Контекст, НовоеОписание, НовоеОписание.Искомое);
	
	Если НовоеОписание.Искомое.Узел <> "Поле" Тогда
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Операцию ""%1"" можно указывать только после имени поля'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьСоединительВ.
Процедура РазобратьЗначениеСоединителяВ(Контекст, Подстрока, НовоеОписание)
	
	Строка = Контекст.Строка;
	
	Если Подстрока.Вид = "Число"
	 Или Подстрока.Вид = "ПроизвольнаяСтрока" Тогда
		
		ОписаниеКонстанты = Новый Структура("Источник, Узел", Подстрока, "Константа");
		ОписаниеКонстанты.Вставить("Значение", Подстрока.Уточнение);
		НовоеОписание.Значения.Добавить(ОписаниеКонстанты);
		
	ИначеЕсли Подстрока.Вид = "КлючевоеСлово" Тогда
		
		Если Подстрока.Уточнение = "Значение" Тогда
			НовыйКонтекст = НовыйКонтекст(Контекст, Подстрока, Неопределено);
			РазобратьФункцию(НовыйКонтекст);
			Если НовыйКонтекст.Описание <> Неопределено Тогда
				НовоеОписание.Значения.Добавить(НовыйКонтекст.Описание);
			КонецЕсли;
		Иначе
			УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В списке значений операции ""%1"" ключевое слово ""%2"" недопустимо'"),
				Строка.Символы, Подстрока.Символы));
		КонецЕсли;
		
	ИначеЕсли Подстрока.Вид = "Имя" Тогда
		УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В списке значений операции ""%1"" имя поля недопустимо'"), Строка.Символы));
		
	ИначеЕсли Подстрока.Символы = "(" Тогда
		УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В списке значений операции ""%1"" скобки допустимы только для параметров функции'"), Строка.Символы));
	Иначе
		УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В списке значений операции ""%1"" можно указывать только значения'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьЗначениеСоединителяВ.
Функция НовыйКонтекст(Контекст, Строка = null, Описание = null)
	
	ФиксированныйКонтекст = Новый ФиксированнаяСтруктура(Контекст);
	НовыйКонтекст = Новый Структура(ФиксированныйКонтекст);
	
	Если Строка <> null Тогда
		НовыйКонтекст.Строка = Строка;
	КонецЕсли;
	
	Если Описание <> null Тогда
		НовыйКонтекст.Описание = Описание;
	КонецЕсли;
	
	Возврат НовыйКонтекст;
	
КонецФункции

// Для процедур РазобратьСоединитель, РазобратьСоединительВ, ВставитьСоединительСУчетомПриоритета.
Процедура ДобавитьСоединитель(Контекст, НовоеОписание, ПервыйАргумент);
	
	// Добавляемый соединитель: И, Или, В, Есть и любая операция (=, <>, ...).
	
	Описание = Контекст.Описание;
	
	Если Описание = Неопределено Тогда
		Контекст.Описание = НовоеОписание;
		
	ИначеЕсли Описание.Узел = "И"
	      Или Описание.Узел = "Или" Тогда
		
		Если Описание.Аргументы.Количество() = 1 Тогда
			Описание.Аргументы.Добавить(Неопределено);
			ОбработатьПропущенныйАргументПослеСоединителя(Контекст, Описание.Аргументы[1]);
		КонецЕсли;
		ВставитьСоединительСУчетомПриоритета(Контекст,
			Описание.Аргументы[1], НовоеОписание, ПервыйАргумент);
		
	ИначеЕсли Описание.Узел = "Не" Тогда
		Если Не ЗначениеЗаполнено(Описание.Аргумент) Тогда
			ОбработатьПропущенныйАргументПослеСоединителя(Контекст, Описание.Аргумент);
		КонецЕсли;
		ВставитьСоединительСУчетомПриоритета(Контекст,
			Описание.Аргумент, НовоеОписание, ПервыйАргумент);
		
	ИначеЕсли Описание.Источник.Вид = "Операция" Тогда
		Если Не ЗначениеЗаполнено(Описание.ВторойАргумент) Тогда
			ОбработатьПропущенныйАргументПослеСоединителя(Контекст, Описание.ВторойАргумент, Ложь);
		КонецЕсли;
		ВставитьСоединительСУчетомПриоритета(Контекст,
			Описание.ВторойАргумент, НовоеОписание, ПервыйАргумент);
		
	ИначеЕсли СтрНайти(",Поле,Значение,Константа,В,ЕстьNull,Выбор,", "," + Описание.Узел + ",") > 0
	      Или Описание.Источник.Тип = "Функция" Тогда
		// Второй аргумент операции В уже разобран в процедуре РазобратьОперациюВ.
		// Второй аргумент Null операции Есть уже разобран в функции ФункцииСВыражениямиВСкобках.
		// Остальные узлы не имеют второго аргумента.
		ВставитьСоединительСУчетомПриоритета(Контекст, Неопределено, НовоеОписание, ПервыйАргумент);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена обработка узла ""%1""'"), Описание.Узел);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьСоединитель.
Процедура ОбработатьПропущенныйАргументПослеСоединителя(Контекст, ВторойАргумент, ЛогическаяОперация = Истина)
	
	УстановитьОшибкуВСтроке(Контекст.Описание.Источник,
		?(ЛогическаяОперация,
			НСтр("ru = 'Не указан аргумент после логической операции'"),
			НСтр("ru = 'Не указан аргумент после операции'")),
		Истина);
	
	ВторойАргумент = Новый Структура("Источник, Узел, Значение", Контекст.Строка, "Константа", Истина);
	
КонецПроцедуры

// Для процедур ДобавитьСоединитель, ОбработатьПропущеннуюЛогическуюОперацию.
Процедура ВставитьСоединительСУчетомПриоритета(Контекст,
			ПоследнийАргументОписания, НовоеОписание, ПервыйАргументНовогоОписания)
	
	Вложения = Контекст.Вложения;
	
	Если ПоследнийАргументОписания <> Неопределено
	   И Контекст.Строка.Приоритет >= Контекст.Описание.Источник.Приоритет Тогда
		
		// Замена аргумента текущего узла на соединитель (случай "А Или Б И ...").
		ПервыйАргументНовогоОписания = ПоследнийАргументОписания;
		ПоследнийАргументОписания = НовоеОписание;
		
		Вложения.Вставить(0, Контекст.Описание);
		Контекст.Описание = НовоеОписание;
		Возврат;
	КонецЕсли;
	
	Если Вложения.Количество() = 0 Тогда
		// Вложение текущего узла, как первого аргумента соединителя (случай "А И Б Или ...").
		ПервыйАргументНовогоОписания = Контекст.Описание;
		Контекст.Описание = НовоеОписание;
		Возврат;
	КонецЕсли;
	
	// Вложение предыдущего узла, как первого аргумента соединителя (случай "А И Не Б Или ...").
	Контекст.Описание = Вложения[0];
	Вложения.Удалить(0);
	
	ДобавитьСоединитель(Контекст, НовоеОписание, ПервыйАргументНовогоОписания);
	
КонецПроцедуры

// Для процедуры РазобратьВыражение.
Процедура РазобратьОператор(Контекст)
	
	// Оператор Не.
	
	НовоеОписание = Новый Структура("Источник, Узел, Аргумент",
		Контекст.Строка, Контекст.Строка.Уточнение);
	
	ДобавитьАргументФункциюВыборОператор(Контекст, НовоеОписание);
	
	Контекст.Вложения.Вставить(0, Контекст.Описание);
	Контекст.Описание = НовоеОписание;
	
КонецПроцедуры

// Для процедур РазобратьВыражение, РазобратьЗначениеСоединителяВ.
Процедура РазобратьФункцию(Контекст)
	
	Строка = Контекст.Строка;
	
	НовоеОписание = Новый Структура("Источник, Узел", Строка, Строка.Уточнение);
	
	Если Строка.Уточнение = "ЗначениеРазрешено"
	 Или Строка.Уточнение = "ЧтениеОбъектаРазрешено"
	 Или Строка.Уточнение = "ИзменениеОбъектаРазрешено"
	 Или Строка.Уточнение = "ЧтениеСпискаРазрешено"
	 Или Строка.Уточнение = "ИзменениеСпискаРазрешено"
	 Или Строка.Уточнение = "ЭтоАвторизованныйПользователь" Тогда
		
		РазобратьПараметрыПроверочнойФункции(Контекст, НовоеОписание);
		
	ИначеЕсли Строка.Уточнение = "ДляВсехСтрок"
	      Или Строка.Уточнение = "ДляОднойИзСтрок" Тогда
		
		ОписаниеВыражения = Неопределено;
		РазобратьВыражение(Строка.Строки, ОписаниеВыражения, Контекст);
		НовоеОписание.Вставить("Аргумент", ОписаниеВыражения);
	
	ИначеЕсли Строка.Уточнение = "Значение" Тогда
		РазобратьПараметрыФункцииЗначениеИлиФункцииТип(Строка, НовоеОписание, Истина, Контекст);
		
	ИначеЕсли Строка.Уточнение = "Тип" Тогда
		РазобратьПараметрыФункцииЗначениеИлиФункцииТип(Строка, НовоеОписание, Ложь, Контекст);
		
	ИначеЕсли Строка.Уточнение = "ТипЗначения" Тогда
		РазобратьПараметрыФункцииТипЗначения(Контекст, НовоеОписание);
		
	ИначеЕсли Строка.Уточнение = "ЕстьNull" Тогда
		НовоеОписание = ОписаниеУзлаПолеИзФункцииЕстьNull(Контекст.Строка, Контекст);
		
	ИначеЕсли Строка.Уточнение = "Выразить" Тогда
		НовоеОписание =  ОписаниеУзлаПолеИзФункцииВыразить(Контекст.Строка, Контекст);
		
	ИначеЕсли Не Строка.ЭтоРезерв Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена обработка функции ""%1""'"), Строка.Уточнение);
	КонецЕсли;
	
	ДобавитьАргументФункциюВыборОператор(Контекст, НовоеОписание);
	
КонецПроцедуры

// Для процедуры РазобратьФункцию.
Процедура РазобратьПараметрыПроверочнойФункции(Контекст, НовоеОписание)
	
	Строка = Контекст.Строка;
	
	НовоеОписание.Вставить("Поле",                        Неопределено);
	НовоеОписание.Вставить("Типы",                        Новый Массив);
	НовоеОписание.Вставить("ПроверятьТипыКромеУказанных", Ложь);
	НовоеОписание.Вставить("УточненияСравнения",          Новый Соответствие);
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	
	Если СоставПараметров.Количество() = 0 Тогда
		Возврат; // Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
	КонецЕсли;
	
	РазобратьПервыйПараметрПроверочнойФункции(Контекст, СоставПараметров[0], НовоеОписание);
	
	Для Индекс = 1 По СоставПараметров.Количество() - 1 Цикл
		РазобратьДополнительныйПараметрПроверочнойФункции(Контекст,
			СоставПараметров[Индекс], НовоеОписание);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры РазобратьПараметрыПроверочнойФункции.
Процедура РазобратьПервыйПараметрПроверочнойФункции(Контекст, ПервыйПараметр, НовоеОписание)
	
	Если ПервыйПараметр.Строки[0].Вид = "Имя" Тогда
		НовоеОписание.Поле = ОписаниеУзлаПолеИлиУзлаКонстанта(ПервыйПараметр.Строки[0]);
		
	ИначеЕсли ПервыйПараметр.Строки[0].Вид = "КлючевоеСлово"
	        И ПервыйПараметр.Строки[0].Уточнение = "Выразить" Тогда
		
		НовоеОписание.Поле = ОписаниеУзлаПолеИзФункцииВыразить(ПервыйПараметр.Строки[0], Контекст);
		
	ИначеЕсли ПервыйПараметр.Строки[0].Вид = "КлючевоеСлово"
	        И ПервыйПараметр.Строки[0].Уточнение = "ЕстьNull" Тогда
		
		НовоеОписание.Поле = ОписаниеУзлаПолеИзФункцииЕстьNull(ПервыйПараметр.Строки[0], Контекст);
	Иначе
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Первым параметром может быть имя поля, функция ""%1"" или функция ""%2""'"),
				"Выразить,ЕстьNull"));
		Возврат;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[0].Вид = "КлючевоеСлово"
	   И ПервыйПараметр.Строки[0].Уточнение = "Выразить"
	   И НовоеОписание.Поле.Вложение = Неопределено Тогда
		
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0].КонечнаяСтрока,
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После вложенной функции ""%3"" должно быть указано имя поля через точку,
				           |если в параметре функции ""%4"" используется ключевое слово ""%1"" или ""%2""'"),
				"Только,Кроме",
				ПервыйПараметр.Строки[0].Символы,
				Контекст.Строка.Символы),
			Истина);
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[1].Вид <> "КлючевоеСлово"
	 Или (  ПервыйПараметр.Строки[1].Уточнение <> "Только"
	      И ПервыйПараметр.Строки[1].Уточнение <> "Кроме" ) Тогда
		
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[1],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После описания поля может быть указано, либо ключевое слово ""%1"", либо ""%2""'"),
				"Только,Кроме"));
		Возврат;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[1].Уточнение = "Кроме" Тогда
		НовоеОписание.ПроверятьТипыКромеУказанных = Истина;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() < 3 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[1],  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'После ключевого слова ""%1"" не указан тип (имя таблицы)'"), ПервыйПараметр.Строки[1].Символы));
		Возврат;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[2].Вид <> "Имя"
	   И ПервыйПараметр.Строки[2].Символы <> "(" Тогда
	
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[2],  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'После ключевого слова ""%1"" должен быть указан, либо тип (имя таблицы), либо список типов в скобках'"),
			ПервыйПараметр.Строки[1].Символы));
		Возврат;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() > 3 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[3], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перед параметром функции ""%1"" не указана запятая'"), Контекст.Строка.Символы));
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[2].Вид = "Имя" Тогда
		НовоеОписание.Типы.Добавить(ПервыйПараметр.Строки[2]);
		ДобавитьТребуемуюТаблицуКакСсылочныйТип(Контекст, ПервыйПараметр.Строки[2].Символы, ПервыйПараметр.Строки[2]);
		Возврат;
	КонецЕсли;
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(ПервыйПараметр.Строки[2]);
	
	Если СоставПараметров.Количество() = 0 Тогда
		Возврат; // Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
	КонецЕсли;
	
	Для Каждого Параметр Из СоставПараметров Цикл
		
		Если Параметр.Строки[0].Вид = "Имя"
		   И Параметр.Строки.Количество() < 2 Тогда
			
			НовоеОписание.Типы.Добавить(Параметр.Строки[0]);
		Иначе
			УстановитьОшибкуВСтроке(Параметр.Строки[?(Параметр.Строки.Количество() < 2, 0, 1)],
				НСтр("ru = 'В списке типов могут быть указаны только имена таблицы через запятую'"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры РазобратьПараметрыПроверочнойФункции.
Процедура РазобратьДополнительныйПараметрПроверочнойФункции(Контекст, Параметр, НовоеОписание)
	
	Если Параметр.Строки[0].Вид = "Имя"
	 Или Параметр.Строки[0].Вид = "КлючевоеСлово"
	   И (    Параметр.Строки[0].Тип = "ЗначениеСравнения"
	      Или Параметр.Строки[0].Тип = "ИмяТипа" ) Тогда
		
		Если Параметр.Строки[0].Вид = "Имя" Тогда
			ЗначениеСравнения = Параметр.Строки[0];
			ДобавитьТребуемуюТаблицуКакСсылочныйТип(Контекст, Параметр.Строки[0].Символы, Параметр.Строки[0]);
		Иначе
			ЗначениеСравнения = Параметр.Строки[0].Уточнение;
		КонецЕсли;
	Иначе
		УстановитьОшибкуВСтроке(Параметр.Строки[0],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Дополнительным параметром может быть тип (имя таблицы),
				           |""%1"", ""%2"", ""%3"", ""%4"", ""%5"", ""%6"" и ""%7""'"),
				"ПустаяСсылка,Неопределено,Null,Число,Строка,Дата,Булево"));
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки.Количество() < 2 Тогда
		Если Параметр.Строки[0].Вид = "Имя" Тогда 
			Шаблон = НСтр("ru = 'После типа (имени таблицы) ""%2"" должно быть указано ключевое слово ""%1""'");
		Иначе
			Шаблон = НСтр("ru = 'После ключевого слова ""%2"" должно быть указано ключевое слово ""%1""'");
		КонецЕсли;
		УстановитьОшибкуВСтроке(Параметр.Строки[0], ПодставитьКлючевыеСловаВСтроку(Контекст,
				Шаблон, "Как", Параметр.Строки[0].Символы),
			Истина);
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки[1].Вид <> "КлючевоеСлово"
	 Или Параметр.Строки[1].Уточнение <> "Как" Тогда
		
		Если Параметр.Строки[0].Вид = "Имя" Тогда
			Шаблон = НСтр("ru = 'После типа (имени таблицы) ""%2"" должно быть указано ключевое слово ""%1""'");
		Иначе
			Шаблон = НСтр("ru = 'После ключевого слова ""%2"" должно быть указано ключевое слово ""%1""'");
		КонецЕсли;
		УстановитьОшибкуВСтроке(Параметр.Строки[1], ПодставитьКлючевыеСловаВСтроку(Контекст,
			Шаблон, "Как", Параметр.Строки[0].Символы));
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки.Количество() < 3 Тогда
		УстановитьОшибкуВСтроке(Параметр.Строки[1], ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После ключевого слова ""%4"" не указано значение уточнения ""%1"", ""%2"" или ""%3""'"),
				"Ложь,Истина,Пусто",
				Параметр.Строки[1].Символы),
			Истина);
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки[2].Вид <> "КлючевоеСлово"
	 Или Параметр.Строки[2].Тип <> "ЗначениеУточнения" Тогда
		
		УстановитьОшибкуВСтроке(Параметр.Строки[2], ПодставитьКлючевыеСловаВСтроку(Контекст,
			НСтр("ru = 'После ключевого слова ""%4"" должно быть указано значение уточнения ""%1"", ""%2"" или ""%3""'"),
			"Ложь,Истина,Пусто",
			Параметр.Строки[1].Символы));
	Иначе
		НовоеОписание.УточненияСравнения.Вставить(ЗначениеСравнения, Параметр.Строки[2].Уточнение);
	КонецЕсли;
	
	Если Параметр.Строки.Количество() > 3 Тогда
		УстановитьОшибкуВСтроке(Параметр.Строки[3],
			НСтр("ru = 'Перед параметром не указана запятая или лишний параметр'"));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьФункцию.
Процедура РазобратьПараметрыФункцииЗначениеИлиФункцииТип(Строка, НовоеОписание, ЭтоФункцияЗначение, Контекст)
	
	НовоеОписание.Вставить("Имя", Неопределено);
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	
	Если СоставПараметров.Количество() = 0 Тогда
		Возврат; // Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
	КонецЕсли;
	
	Параметр = СоставПараметров[0];
	Если Параметр.Строки[0].Вид = "Имя" Тогда
		НовоеОписание.Имя = Параметр.Строки[0].Символы;
		
		Если ЭтоФункцияЗначение Тогда
			ДобавитьТребуемыйПредопределенныйЭлемент(Контекст, НовоеОписание.Имя, Параметр.Строки[0]);
		Иначе
			ДобавитьТребуемуюТаблицуКакСсылочныйТип(Контекст, НовоеОписание.Имя, Параметр.Строки[0]);
		КонецЕсли;
		
	ИначеЕсли ЭтоФункцияЗначение Тогда
		УстановитьОшибкуВСтроке(Параметр.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В функции ""%1"" можно указать только имя предопределенного значения'"), Строка.Символы));
	
	ИначеЕсли Параметр.Строки[0].Вид = "КлючевоеСлово"
	        И Параметр.Строки[0].Тип = "ИмяТипа" Тогда
		
		НовоеОписание.Имя = Параметр.Строки[0].Уточнение;
	Иначе
		УстановитьОшибкуВСтроке(Параметр.Строки[0], ПодставитьКлючевыеСловаВСтроку(Контекст,
			НСтр("ru = 'В функции ""%5"" можно указать имя таблицы или ""%1"", ""%2"", ""%3"" и ""%4""'"),
			"Число,Строка,Дата,Булево",
			Строка.Символы));
	КонецЕсли;
	
	Если Параметр.Строки.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(Параметр.Строки[1], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
	Если СоставПараметров.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(СоставПараметров[1].Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьФункцию.
Процедура РазобратьПараметрыФункцииТипЗначения(Контекст, НовоеОписание)
	
	Строка = Контекст.Строка;
	НовоеОписание.Вставить("Аргумент", Неопределено);
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	
	Если СоставПараметров.Количество() = 0 Тогда
		Возврат; // Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
	КонецЕсли;
	
	Параметр = СоставПараметров[0];
	
	Если Параметр.Строки[0].Вид = "Имя" Тогда
		НовоеОписание.Аргумент = ОписаниеУзлаПолеИлиУзлаКонстанта(Параметр.Строки[0]);
		
	ИначеЕсли Параметр.Строки[0].Вид = "КлючевоеСлово"
	        И Параметр.Строки[0].Уточнение = "Выразить" Тогда
		
		НовоеОписание.Аргумент = ОписаниеУзлаПолеИзФункцииВыразить(Параметр.Строки[0], Контекст);
		
	ИначеЕсли Параметр.Строки[0].Вид = "КлючевоеСлово"
	        И Параметр.Строки[0].Уточнение = "ЕстьNull" Тогда
		
		НовоеОписание.Аргумент = ОписаниеУзлаПолеИзФункцииЕстьNull(Параметр.Строки[0], Контекст);
	Иначе
		УстановитьОшибкуВСтроке(Параметр.Строки[0],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Параметром может быть имя поля, функция ""%1"" или функция ""%2""'"),
				"Выразить,ЕстьNull"));
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки[0].Вид = "КлючевоеСлово"
	   И Параметр.Строки[0].Уточнение = "Выразить"
	   И НовоеОписание.Аргумент.Вложение = Неопределено Тогда
		
		УстановитьОшибкуВСтроке(Параметр.Строки[0].КонечнаяСтрока,
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После вложенной функции ""%1"" должно быть указано имя поля через точку'"),
				Параметр.Строки[0].Символы),
			Истина);
	КонецЕсли;
	
	Если Параметр.Строки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметр.Строки.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(Параметр.Строки[1], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
	Если СоставПараметров.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(СоставПараметров[1].Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедур РазобратьФункцию, РазобратьПервыйПараметрПроверочнойФункции, РазобратьПараметрыФункцииТипЗначения.
Функция ОписаниеУзлаПолеИзФункцииВыразить(Строка, Контекст)
	
	НовоеОписание = ОписаниеУзлаПоле(Строка);
	
	Если Строка.Строки.Количество() > 0 Тогда
		ПоследняяСтрока = Строка.Строки[Строка.Строки.Количество() - 1];
		Если ПоследняяСтрока.Тип = "ДополнениеКВыразить" Тогда
			Строка.Строки.Удалить(Строка.Строки.Количество() - 1);
			НовоеОписание.Имя         = Сред(ПоследняяСтрока.Символы, 2);
			НовоеОписание.ИмяИсточник = ПоследняяСтрока;
			НовоеОписание.Вложение    = ОписаниеУзлаПолеИзФункцииВыразить(Строка, Контекст);
			Возврат НовоеОписание;
		КонецЕсли;
	КонецЕсли;
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	
	Если СоставПараметров.Количество() = 0 Тогда
		// Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
		Возврат НовоеОписание;
	КонецЕсли;
	
	ПервыйПараметр = СоставПараметров[0];
	
	Если ПервыйПараметр.Строки[0].Вид = "Имя" Тогда
		НовоеОписание.Имя         = ПервыйПараметр.Строки[0].Символы;
		НовоеОписание.ИмяИсточник = ПервыйПараметр.Строки[0];
		
	ИначеЕсли ПервыйПараметр.Строки[0].Вид = "КлючевоеСлово"
	        И ПервыйПараметр.Строки[0].Уточнение = "Выразить" Тогда
		
		НовоеОписание.Вложение = ОписаниеУзлаПолеИзФункцииВыразить(ПервыйПараметр.Строки[0], Контекст);
		Если НовоеОписание.Вложение.Вложение = Неопределено Тогда
			УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0].КонечнаяСтрока,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'После вложенной функции ""%1"" должно быть указано имя поля через точку'"),
					ПервыйПараметр.Строки[0].Символы),
				Истина);
		Иначе
			НовоеОписание = НовоеОписание.Вложение;
		КонецЕсли;
		
	ИначеЕсли ПервыйПараметр.Строки[0].Вид = "КлючевоеСлово"
	        И ПервыйПараметр.Строки[0].Уточнение = "ЕстьNull" Тогда
		
		НовоеОписание = ОписаниеУзлаПолеИзФункцииЕстьNull(ПервыйПараметр.Строки[0], Контекст);
	Иначе
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'Первым параметром может быть имя поля, функция ""%1"" или функция ""%2""'"),
				"Выразить,ЕстьNull"));
		Возврат НовоеОписание;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() < 2 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После описания поля должно быть указано ключевое слово ""%1""'"), "Как"), Истина);
		Возврат НовоеОписание;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[1].Вид <> "КлючевоеСлово"
	 Или ПервыйПараметр.Строки[1].Уточнение <> "Как" Тогда
		
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[1],
			ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После описания поля должно быть указано ключевое слово ""%1""'"), "Как"));
		Возврат НовоеОписание;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() < 3 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[1],  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'После ключевого слова ""%1"" не указан тип (имя таблицы)'"), ПервыйПараметр.Строки[1].Символы));
		Возврат НовоеОписание;
	КонецЕсли;
	
	Если ПервыйПараметр.Строки[2].Вид <> "Имя" Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[2],  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'После ключевого слова ""%1"" должен быть указан тип (имя таблицы)'"),
			ПервыйПараметр.Строки[1].Символы));
	Иначе
		НовоеОписание.Выразить = ПервыйПараметр.Строки[2].Символы;
		НовоеОписание.ВыразитьИсточник = ПервыйПараметр.Строки[2];
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() > 3 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[3], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
	Если СоставПараметров.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.КонечнаяСтрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только один параметр'"), Строка.Символы));
	КонецЕсли;
	
	Возврат НовоеОписание;
	
КонецФункции

// Для процедур РазобратьФункцию, РазобратьПервыйПараметрПроверочнойФункции,
// РазобратьПараметрыФункцииТипЗначения и
// для функции ОписаниеУзлаПолеИзФункцииВыразить.
//
Функция ОписаниеУзлаПолеИзФункцииЕстьNull(Строка, Контекст)
	
	НовоеОписание = ОписаниеУзлаПоле(Строка);
	НовоеОписание.ЕстьNullИсточник = Строка;
	
	СоставПараметров = ПараметрыРазделенныеЗапятыми(Строка);
	
	Если СоставПараметров.Количество() = 0 Тогда
		// Ошибка отсутствия параметров уже установлена в функции ФункцииСВыражениямиВСкобках.
		Возврат НовоеОписание;
	КонецЕсли;
	
	ПервыйПараметр = СоставПараметров[0];
	
	Если ПервыйПараметр.Строки[0].Вид = "Имя" Тогда
		НовоеОписание.Имя         = ПервыйПараметр.Строки[0].Символы;
		НовоеОписание.ИмяИсточник = ПервыйПараметр.Строки[0];
	Иначе
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Первым параметром функции ""%1"" может быть только имя поля'"), Строка.Символы));
	КонецЕсли;
	
	Если ПервыйПараметр.Строки.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.Строки[1], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Перед параметром функции ""%1"" не указана запятая'"), Строка.Символы));
		Возврат НовоеОписание;
	КонецЕсли;
	
	Если СоставПараметров.Количество() < 2 Тогда
		УстановитьОшибкуВСтроке(ПервыйПараметр.КонечнаяСтрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" должно быть два параметра'"), Строка.Символы));
		Возврат НовоеОписание;
	КонецЕсли;
	
	ВторойПараметр = СоставПараметров[1];
	
	Если ВторойПараметр.Строки[0].Вид = "Число"
	 Или ВторойПараметр.Строки[0].Вид = "ПроизвольнаяСтрока"
	 Или ВторойПараметр.Строки[0].Вид = "КлючевоеСлово"
	   И (    ВторойПараметр.Строки[0].Уточнение = "Истина"
	      Или ВторойПараметр.Строки[0].Уточнение = "Ложь"
	      Или ВторойПараметр.Строки[0].Уточнение = "Неопределено"
	      Или ВторойПараметр.Строки[0].Уточнение = "Значение" ) Тогда
		
		Если ВторойПараметр.Строки[0].Уточнение = "Значение" Тогда
			НовоеОписание.ЕстьNull = Новый Структура("Источник, Узел",
				ВторойПараметр.Строки[0], ВторойПараметр.Строки[0].Уточнение);
			
			РазобратьПараметрыФункцииЗначениеИлиФункцииТип(ВторойПараметр.Строки[0], НовоеОписание.ЕстьNull, Истина, Контекст);
		Иначе
			НовоеОписание.ЕстьNull = ОписаниеУзлаПолеИлиУзлаКонстанта(ВторойПараметр.Строки[0]);
		КонецЕсли;
	Иначе
		УстановитьОшибкуВСтроке(ВторойПараметр.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" второй параметр может быть, либо предопределенным значением, либо константой'"),
			Строка.Символы));
	КонецЕсли;
	
	Если ВторойПараметр.Строки.Количество() > 1 Тогда
		УстановитьОшибкуВСтроке(ВторойПараметр.Строки[1], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" может быть только два параметра'"), Строка.Символы));
	КонецЕсли;
	
	Если СоставПараметров.Количество() > 2 Тогда
		УстановитьОшибкуВСтроке(СоставПараметров[2].Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У функции ""%1"" должно быть только два параметра'"), Строка.Символы));
	КонецЕсли;
	
	Возврат НовоеОписание;
	
КонецФункции

// Для процедур РазобратьСоединительВ, РазобратьПараметрыПроверочнойФункции,
// РазобратьПараметрыФункцииЗначениеИлиФункцииТип, РазобратьПараметрыФункцииТипЗначения и
// для функций ОписаниеУзлаПолеИзФункцииВыразить, ОписаниеУзлаПолеИзФункцииЕстьNull.
//
Функция ПараметрыРазделенныеЗапятыми(Строка)
	
	СоставПараметров = Новый Массив;
	
	Если Строка.Строки.Количество() = 0 Тогда
		Возврат СоставПараметров;
	КонецЕсли;
	
	ОписаниеПараметра = Новый Структура("Строки, КонечнаяСтрока", Новый Массив);
	ПредыдущаяПодстрокаЭтоЧастьАргумента = Ложь;
	
	Для Каждого Подстрока Из Строка.Строки Цикл
		
		Если Подстрока.Символы = "," Тогда
			Если Не ПредыдущаяПодстрокаЭтоЧастьАргумента Тогда
				Если Строка.Строки[0] = Подстрока Тогда
					УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Перед запятой не указан параметр'"), Подстрока.Символы));
					ОписаниеПараметра.Строки.Добавить(ДополнительнаяСтрока(Подстрока, ""));
				Иначе
					УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Пропущен параметр или лишняя запятая'"), Подстрока.Символы));
				КонецЕсли;
			КонецЕсли;
			Если ОписаниеПараметра.Строки.Количество() > 0 Тогда
				СоставПараметров.Добавить(ОписаниеПараметра);
				ОписаниеПараметра.КонечнаяСтрока = Подстрока;
			КонецЕсли;
			ОписаниеПараметра = Новый Структура("Строки, КонечнаяСтрока", Новый Массив);
			ПредыдущаяПодстрокаЭтоЧастьАргумента = Ложь;
			Продолжить;
		КонецЕсли;
		
		ПредыдущаяПодстрокаЭтоЧастьАргумента = Истина;
		
		ОписаниеПараметра.Строки.Добавить(Подстрока);
	КонецЦикла;
	
	Если ОписаниеПараметра.Строки.Количество() > 0 Тогда
		СоставПараметров.Добавить(ОписаниеПараметра);
		ОписаниеПараметра.КонечнаяСтрока = Строка.КонечнаяСтрока;
	Иначе
		УстановитьОшибкуВСтроке(Подстрока, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Лишняя запятая или после запятой не указан параметр'"), Подстрока.Символы), Истина);
	КонецЕсли;
	
	Возврат СоставПараметров;
	
КонецФункции

// Для процедуры РазобратьВыражение.
Процедура РазобратьВыбор(Контекст)
	
	Строка = Контекст.Строка;
	
	СвойстваУзла = "Источник, Узел, Выбор, Когда, Иначе";
	НовоеОписание = Новый Структура(СвойстваУзла, Строка, "Выбор");
	НовоеОписание.Когда = Новый Массив;
	
	ПропуститьАнализКогда = Ложь;
	
	Выбор = Строка.Строки[0];
	Если Выбор.Строки.Количество() > 0 Тогда
		Если Выбор.Строки[0].Вид = "Имя" Тогда
			НовоеОписание.Выбор = ОписаниеУзлаПолеИлиУзлаКонстанта(Выбор.Строки[0]);
		Иначе
			ПропуститьАнализКогда = Истина;
			УстановитьОшибкуВСтроке(Выбор.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Когда аргумент ключевого слова ""%1"" указан, то это может быть только имя поля'"),
				Строка.Символы));
		КонецЕсли;
	КонецЕсли;
	
	Индекс = 1;
	Пока Строка.Строки[Индекс].Уточнение = "Когда" Цикл
		ОписаниеКогдаТогда = Новый Структура("Условие, Значение");
		НовоеОписание.Когда.Добавить(ОписаниеКогдаТогда);
		
		Когда = Строка.Строки[Индекс];
		
		Если Не ПропуститьАнализКогда Тогда
			Если НовоеОписание.Выбор = Неопределено Тогда
				РазобратьВыражение(Когда.Строки, ОписаниеКогдаТогда.Условие, Контекст);
				
			ИначеЕсли Когда.Строки.Количество() = 0 Тогда
				Если ЗначениеЗаполнено(Когда.Символы) Тогда
					УстановитьОшибкуВСтроке(Когда.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Так как после ключевого слова ""%1"" указано поле, то после ключевого слова ""%2""
						           |должно быть указано, либо предопределенное значение, либо константа'"),
						Строка.Символы,
						Когда.Символы));
				КонецЕсли;
				
			ИначеЕсли Когда.Строки[0].Вид = "Число"
			      Или Когда.Строки[0].Вид = "ПроизвольнаяСтрока"
			      Или Когда.Строки[0].Вид = "КлючевоеСлово"
			        И (    Когда.Строки[0].Уточнение = "Истина"
			           Или Когда.Строки[0].Уточнение = "Ложь"
			           Или Когда.Строки[0].Уточнение = "Неопределено"
			           Или Когда.Строки[0].Уточнение = "Значение" ) Тогда
				
				Если Когда.Строки[0].Уточнение = "Значение" Тогда
					ОписаниеКогдаТогда.Условие = Новый Структура("Источник, Узел",
						Когда.Строки[0], Когда.Строки[0].Уточнение);
					
					РазобратьПараметрыФункцииЗначениеИлиФункцииТип(Когда.Строки[0], ОписаниеКогдаТогда.Условие, Истина, Контекст);
				Иначе
					ОписаниеКогдаТогда.Условие = ОписаниеУзлаПолеИлиУзлаКонстанта(Когда.Строки[0]);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Когда.Символы) Тогда
				УстановитьОшибкуВСтроке(Когда.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Так как после ключевого слова ""%1"" указано поле, то после ключевого слова ""%2""
					           |должно быть указано, либо предопределенное значение, либо константа'"),
					Строка.Символы,
					Когда.Символы));
			КонецЕсли;
		КонецЕсли;
		
		СоставТогда = Строка.Строки[Индекс + 1];
		Если СоставТогда.Строки.Количество() > 0 Тогда
			РазобратьВыражение(СоставТогда.Строки, ОписаниеКогдаТогда.Значение, Контекст);
			
		ИначеЕсли ЗначениеЗаполнено(СоставТогда.Символы) Тогда
			УстановитьОшибкуВСтроке(Когда.Строки[0], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'После ключевого слова ""%1"" должно быть указано логическое выражение'"), СоставТогда.Символы));
		КонецЕсли;
		
		Индекс = Индекс + 2;
	КонецЦикла;
	
	РазобратьВыражение(Строка.Строки[Индекс].Строки, НовоеОписание.Иначе, Контекст);
	
	ДобавитьАргументФункциюВыборОператор(Контекст, НовоеОписание);
	
КонецПроцедуры

// Для процедуры РазобратьВыражение.
Процедура РазобратьОшибочноеКлючевоеСлово(Контекст)
	
	Строка = Контекст.Строка;
	Контекст.Описание = Неопределено;
	
	Если Строка.Тип = "Неопределен" Тогда
		// Для зарезервированных слов ошибка уже установлена.
		Возврат;
	КонецЕсли;
	
	Если Строка.Тип = "ЗначениеСравнения" Тогда
		// "ПустаяСсылка" или "Null".
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Значение ""%1"" может использоваться только как уточняемое значение
			           |в параметрах функций проверки разрешений'"),
			Строка.Символы));
		
	ИначеЕсли Строка.Тип = "ЗначениеУточнения" Тогда
		// "Пусто".
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Значение ""%1"" может использоваться только как результат уточнения
			           |в параметрах функций проверки разрешений'"),
			Строка.Символы));
			
	ИначеЕсли Строка.Тип = "ИмяТипа" Тогда
		// "Число", "Строка", "Дата", "Булево".
		УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
			НСтр("ru = 'Имя типа ""%2"" может использоваться только, как параметр функции ""%1"" или
			           |как уточняемое значение в параметрах функций проверки разрешений'"),
			"Тип",
			Строка.Символы));
	Иначе
		УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка ключевого слова ""%1"" не определена'"), Строка.Символы));
	КонецЕсли;
	
КонецПроцедуры

// Для процедур РазобратьВыражение, РазобратьОператор, РазобратьФункцию, РазобратьВыбор.
Процедура ДобавитьАргументФункциюВыборОператор(Контекст, ДобавляемоеОписание)
	
	// Текущий узел: Любой.
	// Добавляемое описание: Поле, Значение, Константа, Не, Выбор, любая функция.
	
	Описание = Контекст.Описание;
	
	Если Описание = Неопределено Тогда
		Контекст.Описание = ДобавляемоеОписание;
		
	ИначеЕсли Описание.Узел = "И"
	      Или Описание.Узел = "Или" Тогда
		
		Если Описание.Аргументы.Количество() = 1 Тогда
			Описание.Аргументы.Добавить(ДобавляемоеОписание);
		Иначе
			ОбработатьПропущеннуюЛогическуюОперацию(Контекст, Описание.Аргументы[1], ДобавляемоеОписание);
		КонецЕсли;
		
	ИначеЕсли Описание.Узел = "Не" Тогда
		
		Если Не ЗначениеЗаполнено(Описание.Аргумент) Тогда
			Описание.Аргумент = ДобавляемоеОписание;
		Иначе
			ОбработатьПропущеннуюЛогическуюОперацию(Контекст, Описание.Аргумент, ДобавляемоеОписание);
		КонецЕсли;
		
	ИначеЕсли Описание.Источник.Вид = "Операция" Тогда
		
		Если Не ЗначениеЗаполнено(Описание.ВторойАргумент) Тогда
			Описание.ВторойАргумент = ДобавляемоеОписание;
			// Проверка корректности аргументов выполняется
			// в процедуре ОтметитьНекорректныеАргументыИЗапрещенныеУзлы.
		Иначе
			ОбработатьПропущеннуюЛогическуюОперацию(Контекст, Описание.ВторойАргумент, ДобавляемоеОписание);
		КонецЕсли;
		
	ИначеЕсли СтрНайти(",Поле,Значение,Константа,В,ЕстьNull,Выбор,", "," + Описание.Узел + ",") > 0
	      Или Описание.Источник.Тип = "Функция" Тогда
		// Второй аргумент операции В уже разобран в процедуре РазобратьОперациюВ.
		// Второй аргумент Null операции Есть уже разобран в функции ФункцииСВыражениямиВСкобках.
		// Остальные узлы не имеют второго аргумента.
		ОбработатьПропущеннуюЛогическуюОперацию(Контекст, Неопределено, ДобавляемоеОписание);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не определена обработка узла ""%1""'"), Описание.Узел);
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ДобавитьАргументФункциюВыборОператор
Процедура ОбработатьПропущеннуюЛогическуюОперацию(Контекст, ПоследнийАргументОписания, ДобавляемоеОписание)
	
	УстановитьОшибкуВСтроке(Контекст.Строка, НСтр("ru = 'Не указана логическая операция'"));
	
	// Восстановление.
	ДополнительнаяСтрока = ДополнительнаяСтрока(Контекст.Строка, "И", Контекст);
	
	НовоеОписание = Новый Структура("Источник, Узел, Аргументы", ДополнительнаяСтрока, "И", Новый Массив);
	НовоеОписание.Аргументы.Добавить();
	
	ТекущаяСтрока = Контекст.Строка;
	Контекст.Строка = ДополнительнаяСтрока;
	
	ВставитьСоединительСУчетомПриоритета(Контекст,
		ПоследнийАргументОписания, НовоеОписание, НовоеОписание.Аргументы[0]);
	
	Контекст.Строка = ТекущаяСтрока;
	
	НовоеОписание.Аргументы.Добавить(ДобавляемоеОписание);
	
КонецПроцедуры

// Для процедуры РазобратьУсловие.
Функция ВыраженияВСкобкахВоВложениях(Строки)
	
	Результат = Новый Массив;
	
	ТекущееВложение = Новый Структура("Строки", Результат);
	Вложения = Новый Массив;
	Вложения.Добавить(ТекущееВложение);
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.Символы = "(" Тогда
			ДобавитьВложение(Строка, Вложения, ТекущееВложение);
			
		ИначеЕсли Строка.Символы = ")" Тогда
			Если Вложения.Количество() = 1 Тогда
				УстановитьОшибкуВСтроке(Строка,
					НСтр("ru = 'Указана закрывающаяся скобка до открывающейся скобки'"));
			Иначе
				УдалитьПоследнееВложение(Вложения, ТекущееВложение, Строка);
			КонецЕсли;
		Иначе
			ТекущееВложение.Строки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Пока Вложения.Количество() > 1 Цикл
		ИндексПоследнегоВложения = Вложения.Количество() - 1;
		Вложение = Вложения[ИндексПоследнегоВложения];
		Вложение.КонечнаяСтрока = Строка;
		Вложения.Удалить(ИндексПоследнегоВложения);
		УстановитьОшибкуВСтроке(Вложение,
			НСтр("ru = 'Указана открывающаяся скобка без закрывающейся скобки'"), Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для процедуры РазобратьУсловие.
Функция ВыраженияВыборКогдаТогдаВоВложениях(Строки, Контекст)
	
	Результат = Новый Массив;
	
	ТекущееВложение = Новый Структура("Строки, Уточнение", Результат, "");
	Вложения = Новый Массив;
	Вложения.Добавить(ТекущееВложение);
	
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Вид <> "КлючевоеСлово"
		 Или Строка.Тип <> "СловоВыбора" Тогда
			
			Если ТекущееВложение.Уточнение = "Выбор" Тогда
				ТекущееВложение.Строки[0].Строки.Добавить(Строка);
			Иначе
				ТекущееВложение.Строки.Добавить(Строка);
				Если Строка.Символы = "(" Тогда
					Строка.Строки = ВыраженияВыборКогдаТогдаВоВложениях(Строка.Строки, Контекст);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.Уточнение = "Выбор" Тогда
			Если Вложения.Количество() = 1 Тогда
				// Стандартная обработка после условия.
			Иначе
				Если ТекущееВложение.Уточнение = "Выбор" Тогда
					УстановитьОшибкуВСтроке(ТекущееВложение, ПодставитьКлючевыеСловаВСтроку(Контекст,
						НСтр("ru = 'После ключевого слова ""%1"" не указано ключевое слова ""%2""'"), "Выбор,Когда"), Истина);
					ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Когда", Контекст);
				КонецЕсли;
			КонецЕсли;
			ДобавитьВложение(Строка, Вложения, ТекущееВложение);
			ТекущееВложение.Строки.Добавить(ДополнительнаяСтрока(ТекущееВложение, "Выбор", Контекст));
			
		ИначеЕсли Строка.Уточнение = "Когда" Тогда
			
			Если Вложения.Количество() = 1 Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевого слова ""%2""'"), "Когда,Выбор"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Выбор", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Выбор" Тогда
				// Стандартная обработка после условия.
				
			ИначеЕсли ТекущееВложение.Уточнение = "Когда" Тогда
				УстановитьОшибкуВСтроке(ТекущееВложение, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'После ключевого слова ""%1"" не указано ключевое слова ""%2""'"), "Когда,Тогда"), Истина);
				ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Тогда", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Тогда" Тогда
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
				
			Иначе // ТекущееВложение.Уточнение = "Иначе"
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" должно быть до ключевого слова ""%2""'"), "Когда,Иначе"));
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			КонецЕсли;
			ДобавитьВложение(Строка, Вложения, ТекущееВложение);
			
		ИначеЕсли Строка.Уточнение = "Тогда" Тогда
			
			Если Вложения.Количество() = 1 Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"" и ""%3""'"), "Тогда,Выбор,Когда"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Выбор,Когда", Контекст);
			
			ИначеЕсли ТекущееВложение.Уточнение = "Выбор" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевого слова ""%2""'"), "Тогда,Когда"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Когда", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Когда" Тогда
				// Стандартная обработка после условия.
				
			ИначеЕсли ТекущееВложение.Уточнение = "Тогда" Тогда
				УстановитьОшибкуВСтроке(ТекущееВложение, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'После ключевого слова ""%1"" не указано ключевое слова ""%2""'"), "Тогда,Когда"), Истина);
				ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Когда", Контекст);
				
			Иначе // ТекущееВложение.Уточнение = "Иначе"
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" должно быть до ключевого слова ""%2""'"), "Тогда,Иначе"));
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Когда", Контекст);
			КонецЕсли;
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			ДобавитьВложение(Строка, Вложения, ТекущееВложение);
			
		ИначеЕсли Строка.Уточнение = "Иначе" Тогда
			
			Если Вложения.Количество() = 1 Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"", ""%3"" и ""%4""'"), "Иначе,Выбор,Когда,Тогда"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Выбор,Когда,Тогда", Контекст);
			
			ИначеЕсли ТекущееВложение.Уточнение = "Выбор" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"" и ""%3""'"), "Иначе,Когда,Тогда"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Когда,Тогда", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Когда" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевого слова ""%2""'"), "Иначе,Тогда"));
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Тогда", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Тогда" Тогда
				// Стандартная обработка после условия.
				
			Иначе // ТекущееВложение.Уточнение = "Иначе"
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано повторно'"), "Иначе"));
			КонецЕсли;
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			ДобавитьВложение(Строка, Вложения, ТекущееВложение);
			
		Иначе // Строка.Уточнение = "Конец"
			
			Если Вложения.Количество() = 1 Тогда
				УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"", ""%3"", ""%4"" и ""%5""'"), "Конец,Выбор,Когда,Тогда,Иначе"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Выбор,Когда,Тогда,Иначе", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Выбор" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"", ""%3"" и ""%4""'"), "Конец,Когда,Тогда,Иначе"));
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Когда,Тогда,Иначе", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Когда" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевых слов ""%2"" и ""%3""'"), "Конец,Тогда,Иначе"));
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Тогда,Иначе", Контекст);
				
			ИначеЕсли ТекущееВложение.Уточнение = "Тогда" Тогда
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(Контекст,
					НСтр("ru = 'Ключевое слово ""%1"" указано до ключевого слова ""%2""'"), "Конец,Иначе"));
				УдалитьПоследнееВложение(Вложения, ТекущееВложение);
				ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, "Иначе", Контекст);
				
			Иначе // ТекущееВложение.Уточнение = "Иначе".
				// Стандартная обработка после условия.
			КонецЕсли;
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
		КонецЕсли;
	КонецЦикла;
	
	Пока Вложения.Количество() > 1 Цикл
		ТекущееВложение = Вложения[Вложения.Количество() - 1];
		
		Если ТекущееВложение.Уточнение = "Выбор" Тогда
			ТекстОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После ключевого слова ""%1"" не указаны ключевые слова ""%2"", ""%3"", ""%4"" и ""%5""'"), "Выбор,Когда,Тогда,Иначе,Конец");
			ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Когда,Тогда,Иначе", Контекст);
			
		ИначеЕсли ТекущееВложение.Уточнение = "Когда" Тогда
			ТекстОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После ключевого слова ""%1"" не указаны ключевые слова ""%2"", ""%3"", ""%4""'"), "Когда,Тогда,Иначе,Конец");
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Тогда,Иначе", Контекст);
			
		ИначеЕсли ТекущееВложение.Уточнение = "Тогда" Тогда
			ТекстОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После ключевого слова ""%1"" не указаны ключевые слова ""%2"" и ""%3""'"), "Тогда,Иначе,Конец");
			УдалитьПоследнееВложение(Вложения, ТекущееВложение);
			ВосстановитьСтруктуруВыбора(ТекущееВложение, Вложения, ТекущееВложение, "Иначе", Контекст);
			
		Иначе // ТекущееВложение.Уточнение = "Иначе"
			ТекстОшибки = ПодставитьКлючевыеСловаВСтроку(Контекст,
				НСтр("ru = 'После ключевого слова ""%1"" не указано ключевое слово ""%2""'"), "Иначе,Конец");
		КонецЕсли;
		УстановитьОшибкуВСтроке(ТекущееВложение, ТекстОшибки, Истина);
		УдалитьПоследнееВложение(Вложения, ТекущееВложение);
		УдалитьПоследнееВложение(Вложения, ТекущееВложение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для процедуры РазобратьУсловие.
Функция ФункцииСВыражениямиВСкобках(Строки, ВнутренниеДанные)
	
	Результат = Новый Массив;
	КоличествоСтрок = Строки.Количество();
	
	Строка = Неопределено;
	Индекс = 0;
	Пока Индекс < КоличествоСтрок Цикл
		ПредыдущаяСтрока = Строка;
		Строка = Строки[Индекс];
		
		Если Строка.Символы = "(" Тогда
			Строка.Строки = ФункцииСВыражениямиВСкобках(Строка.Строки, ВнутренниеДанные);
			
		ИначеЕсли Строка.Вид = "КлючевоеСлово"
		        И (    Строка.Тип = "Функция"
		           Или Строка.Уточнение = "В" ) Тогда
			
			Если Индекс + 1 < Строки.Количество()
			   И Строки[Индекс + 1].Символы = "(" Тогда
				
				Индекс = Индекс + 1;
				Строка.Строки = ФункцииСВыражениямиВСкобках(Строки[Индекс].Строки, ВнутренниеДанные);
				Строка.КонечнаяСтрока = Строки[Индекс].КонечнаяСтрока;
				
				Если Строка.Строки.Количество() = 0 Тогда
					Если Строка.Тип = "Функция" Тогда
						УстановитьОшибкуВСтроке(Строки[Индекс], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У функции ""%1"" не указано ни одного параметра'"), Строка.Символы), Истина);
					Иначе
						УстановитьОшибкуВСтроке(Строки[Индекс], СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'В списке значений операции ""%1"" не указано ни одного значения'"), Строка.Символы), Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Строка.Строки = Новый Массив;
				Если Строка.Тип = "Функция" Тогда
					УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'После функции ""%1"" не указаны параметры в скобках'"), Строка.Символы), Истина);
				Иначе
					УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'После ключевого слова ""%1"" не указаны значения в скобках'"), Строка.Символы), Истина);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Строка.Вид = "КлючевоеСлово"
		        И Строка.Уточнение = "Есть"  Тогда
			
			Если Индекс + 1 < Строки.Количество()
			   И Строки[Индекс + 1].Вид = "КлючевоеСлово"
			   И Строки[Индекс + 1].Уточнение = "Null" Тогда
				
				Индекс = Индекс + 1;
				Строка.Строки.Добавить(Строки[Индекс]);
			Иначе
				Строка.Строки = Новый Массив;
				УстановитьОшибкуВСтроке(Строка, ПодставитьКлючевыеСловаВСтроку(ВнутренниеДанные,
						НСтр("ru = 'После ключевого слова ""%2"" не указано ключевое слово ""%1""'"),
						"Null",
						Строка.Символы),
					Истина);
			КонецЕсли;
			
		ИначеЕсли Строка.Вид = "Имя"
		        И СтрНачинаетсяС(Строка.Символы, ".")
		        И ПредыдущаяСтрока <> Неопределено Тогда
			
			Если ПредыдущаяСтрока <> Неопределено
			   И ПредыдущаяСтрока.Вид = "КлючевоеСлово"
			   И ПредыдущаяСтрока.Уточнение = "Выразить" Тогда
				
				Строка.Тип = "ДополнениеКВыразить";
				ПредыдущаяСтрока.Строки.Добавить(Строка);
				Индекс = Индекс + 1;
				Продолжить;
			Иначе
				УстановитьОшибкуВСтроке(Строка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя поля не может начинаться с символа "".""'"), Строка.Символы));
			КонецЕсли;
		КонецЕсли;
		
		Результат.Добавить(Строка);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для функций ВыраженияВСкобкахВоВложениях, ВыраженияВыборКогдаТогдаВоВложениях.
Процедура ДобавитьВложение(Строка, Вложения, ТекущееВложение)
	
	ТекущееВложение.Строки.Добавить(Строка);
	ТекущееВложение = Строка;
	Вложения.Добавить(ТекущееВложение);
	
КонецПроцедуры

// Для функций ВыраженияВСкобкахВоВложениях, ВыраженияВыборКогдаТогдаВоВложениях.
Процедура УдалитьПоследнееВложение(Вложения, ТекущееВложение, КонечнаяСтрока = Неопределено)
	
	Если КонечнаяСтрока = Неопределено Тогда
		Если ТекущееВложение.Строки.Количество() = 0 Тогда
			КонечнаяСтрока = ТекущееВложение;
		Иначе
			КонечнаяСтрока = ТекущееВложение.Строки[ТекущееВложение.Строки.Количество() - 1];
			Если КонечнаяСтрока.КонечнаяСтрока <> Неопределено Тогда
				КонечнаяСтрока = КонечнаяСтрока.КонечнаяСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущееВложение.КонечнаяСтрока = КонечнаяСтрока;
	
	ИндексПоследнегоВложения = Вложения.Количество() - 1;
	Вложения.Удалить(ИндексПоследнегоВложения);
	ТекущееВложение = Вложения[ИндексПоследнегоВложения - 1];
	
КонецПроцедуры

// Для функции ВыраженияВыборКогдаТогдаВоВложениях.
Процедура ВосстановитьСтруктуруВыбора(Строка, Вложения, ТекущееВложение, СписокНедостающихСлов, Контекст)
	
	НедостающиеСлова = СтрРазделить(СписокНедостающихСлов, ",", Ложь);
	
	Для Каждого НедостающееСлово Из НедостающиеСлова Цикл
		НоваяСтрока = ДополнительнаяСтрока(Строка, НедостающееСлово, Контекст);
		ТекущееВложение.Строки.Добавить(НоваяСтрока);
		
		Если НедостающееСлово = "Выбор" Тогда
			ТекущееВложение = НоваяСтрока;
			Вложения.Добавить(ТекущееВложение);
		КонецЕсли;
	КонецЦикла;
	
	Если НедостающееСлово <> "Выбор" Тогда
		ТекущееВложение = НоваяСтрока;
		Вложения.Добавить(ТекущееВложение);
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ОбработатьПропущеннуюЛогическуюОперацию, ВыраженияВыборКогдаТогдаВоВложениях,
// ВосстановитьСтруктуруВыбора и для функции ПараметрыРазделенныеЗапятыми.
//
Функция ДополнительнаяСтрока(Строка, Уточнение = "", Контекст = Неопределено)
	
	Поля = "Символы, Вид, Тип, Приоритет, Уточнение, ИсходнаяСтрока, Строки, КонечнаяСтрока, ПозицияОшибки, ТекстОшибки";
	
	НоваяСтрока = Новый Структура(Поля);
	НоваяСтрока.Уточнение      = Уточнение;
	НоваяСтрока.Строки         = Новый Массив;
	НоваяСтрока.ИсходнаяСтрока = Строка;
	
	СвойстваСлова = ?(Контекст = Неопределено,
		Неопределено, Контекст.СинтаксисЯзыка.СловаЯзыка.Получить(ВРег(Уточнение)));
	
	Если СвойстваСлова <> Неопределено Тогда
		НоваяСтрока.Вид       = "КлючевоеСлово";
		НоваяСтрока.Тип       = СвойстваСлова.Тип;
		НоваяСтрока.Приоритет = СвойстваСлова.Приоритет;
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Для процедур РазобратьДополнительныеТаблицы, РазобратьУсловиеОграничения.
Процедура ИзменитьВидКлючевогоСловаСписокНаИмя(СтрокиЧасти, ИсключаемаяСтрока = Неопределено)
	
	Для Каждого Строка Из СтрокиЧасти Цикл
		Если Строка = ИсключаемаяСтрока
		 Или Строка.Вид <> "КлючевоеСлово"
		 Или Строка.Уточнение <> "ЭтотСписок" Тогда
			Продолжить;
		КонецЕсли;
		Строка.Вид = "Имя";
		Строка.Уточнение = "";
	КонецЦикла;
	
КонецПроцедуры

// Для процедур РазобратьДополнительныеТаблицы, РазобратьСоединение.
Процедура УстановитьПсевдоним(СтрокаЧасти, ОписаниеСоединения, ВнутренниеДанные)
	
	Если ЗначениеЗаполнено(СтрокаЧасти.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ПозицияТочки = СтрНайти(СтрокаЧасти.Символы, ".");
	Если ПозицияТочки > 0 Тогда
		СтрокаЧасти.ПозицияОшибки = ПозицияТочки - 1;
		СтрокаЧасти.ТекстОшибки =
			НСтр("ru = 'Псевдоним не может содержать символа "".""'");
			
	ИначеЕсли ТипЗнч(ОписаниеСоединения) = Тип("Строка") Тогда
		ОписаниеСоединения = СтрокаЧасти.Символы;
		ВнутренниеДанные.Псевдонимы.Вставить(ВРег(СтрокаЧасти.Символы), "");
	Иначе
		ОписаниеСоединения.Псевдоним = СтрокаЧасти.Символы;
		Если ВнутренниеДанные.Псевдонимы.Получить(ВРег(СтрокаЧасти.Символы)) = Неопределено Тогда
			Если ЗначениеЗаполнено(ОписаниеСоединения.Таблица) Тогда
				ВнутренниеДанные.Псевдонимы.Вставить(ВРег(СтрокаЧасти.Символы), ОписаниеСоединения.Таблица);
			КонецЕсли;
		Иначе
			СтрокаЧасти.ТекстОшибки = НСтр("ru = 'Псевдоним повторяется'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры РазобратьСоединение.
Процедура УстановитьИмяТаблицы(СтрокаЧасти, ОписаниеСоединения, ВнутренниеДанные)
	
	Если ЗначениеЗаполнено(СтрокаЧасти.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(СтрокаЧасти.Символы, ".") Тогда
		СтрокаЧасти.ТекстОшибки =
			НСтр("ru = 'Имя таблицы не может начинаться с символа "".""'");
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоВхождений(СтрокаЧасти.Символы, ".") > 2 Тогда
		
		ПозицияТочки = СтрНайти(СтрокаЧасти.Символы, ".");
		ПозицияТочки = ПозицияТочки + СтрНайти(Сред(СтрокаЧасти.Символы, ПозицияТочки + 1), ".");
		
		ПозицияТочки = ПозицияТочки + СтрНайти(Сред(СтрокаЧасти.Символы, ПозицияТочки + 1), ".");
		СтрокаЧасти.ТекстОшибки =
			НСтр("ru = 'Полное имя таблицы не может содержать более двух символов "".""'");
		
		СтрокаЧасти.ПозицияОшибки = ПозицияТочки - 1;
		Возврат;
	КонецЕсли;
	
	ОписаниеСоединения.Таблица = СтрокаЧасти.Символы;
	
	ДобавитьТребуемуюТаблицуКакИсточникДанных(ВнутренниеДанные, ОписаниеСоединения.Таблица, СтрокаЧасти);
	
КонецПроцедуры

// Для процедуры УстановитьИмяТаблицы.
Процедура ДобавитьТребуемуюТаблицуКакИсточникДанных(Контекст, Таблица, Источник)
	
	Если ЗначениеЗаполнено(Источник.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваИмени = СвойстваИмениТаблицы(Контекст, Таблица);
	
	Если СвойстваИмени.ЧислоЧастейИмени < 2
	 Или СвойстваИмени.ЧислоЧастейИмени > 3 Тогда
		УстановитьОшибкуВСтроке(Источник,
			НСтр("ru = 'В имени присоединяемой таблицы должна быть одна или две точки'"));
		Возврат;
	КонецЕсли;
	
	Если СвойстваИмени.СвойстваТипаТаблиц = Неопределено Тогда
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное начало ""%1"" имени таблицы ""%2""'"), СвойстваИмени.ИмяТипа, Таблица));
		Возврат;
	КонецЕсли;
	
	Если СвойстваИмени.ЧислоЧастейИмени = 3 Тогда
		СвойстваУточнения = СвойстваИмени.СвойстваТипаТаблиц.УточнениеТаблиц.Получить(
			ВРег(СвойстваИмени.Расширение));
		
		Если СвойстваУточнения <> Неопределено
		   И СвойстваУточнения.Использование <> "Разрешено" Тогда
			
			Если СвойстваУточнения.Использование = "Недопустимо" Тогда
				УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимо использовать таблицы ""%1"" группы таблиц ""%2""'"),
					СвойстваИмени.Расширение, СвойстваИмени.ИмяТипа));
			Иначе
				УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запрещено присоединять таблицы ""%1"" группы таблиц ""%2""'"),
					СвойстваИмени.Расширение, СвойстваИмени.ИмяТипа));
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Свойства = СвойстваТребуемойТаблицы(Контекст, СвойстваИмени);
	Свойства.Источники.Добавить(Источник);
	
КонецПроцедуры

// Для процедур ВыделитьПсевдонимПоля, РазобратьПервыйПараметрПроверочнойФункции,
// РазобратьДополнительныйПараметрПроверочнойФункции, РазобратьПараметрыФункцииЗначениеИлиФункцииТип.
//
Процедура ДобавитьТребуемуюТаблицуКакСсылочныйТип(Контекст, Таблица, Источник)
	
	Если ЗначениеЗаполнено(Источник.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваИмени = СвойстваИмениТаблицы(Контекст, Таблица);
	
	Если СвойстваИмени.ЧислоЧастейИмени <> 2 Тогда
		УстановитьОшибкуВСтроке(Источник,
			НСтр("ru = 'В имени таблицы, указанной в качестве типа, должна быть одна точка'"));
		Возврат;
	КонецЕсли;
	
	Если СвойстваИмени.СвойстваТипаТаблиц = Неопределено Тогда
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное начало ""%1"" имени таблицы ""%2""'"), СвойстваИмени.ИмяТипа, Таблица));
		Возврат;
	КонецЕсли;
	
	Если Не СвойстваИмени.СвойстваТипаТаблиц.ЭтоСсылочныйТип Тогда
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Группа таблиц ""%1"" не входит в состав ссылочных типов'"), СвойстваИмени.ИмяТипа, Таблица));
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваТребуемойТаблицы(Контекст, СвойстваИмени);
	Свойства.Источники.Добавить(Источник);
	
КонецПроцедуры

// Для процедуры РазобратьПараметрыФункцииЗначениеИлиФункцииТип.
Процедура ДобавитьТребуемыйПредопределенныйЭлемент(Контекст, ПолноеИмяПредопределенного, Источник)
	
	Если ЗначениеЗаполнено(Источник.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваИмени = СвойстваИмениТаблицы(Контекст, ПолноеИмяПредопределенного);
	
	Если СвойстваИмени.ЧислоЧастейИмени <> 3 Тогда
		УстановитьОшибкуВСтроке(Источник,
			НСтр("ru = 'В имени предопределенного значения должно быть две точки'"));
		Возврат;
	КонецЕсли;
	
	Если СвойстваИмени.СвойстваТипаТаблиц = Неопределено Тогда
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное начало ""%1"" имени таблицы ""%2""'"),
			СвойстваИмени.ИмяТипа,
			СвойстваИмени.ИмяТипа + "." + СвойстваИмени.ИмяБезТипа));
		Возврат;
	КонецЕсли;
	
	Если Не СвойстваИмени.СвойстваТипаТаблиц.ЭтоСсылочныйТип Тогда
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Группа таблиц ""%1"" не входит в состав ссылочных типов'"), СвойстваИмени.ИмяТипа));
		Возврат;
	КонецЕсли;
	
	СвойстваСлова = Контекст.СинтаксисЯзыка.СловаЯзыка.Получить(ВРег(СвойстваИмени.Расширение));
	
	Если Не СвойстваИмени.СвойстваТипаТаблиц.ЕстьПредопределенные
	   И Не СвойстваИмени.ИмяТипа = "Перечисление"
	   И (    СвойстваСлова = Неопределено
	      Или СвойстваСлова.Идентификатор <> "ПустаяСсылка") Тогда
		
		УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В группе таблиц ""%1"" нет предопределенных элементов'"), СвойстваИмени.ИмяТипа));
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваТребуемойТаблицы(Контекст, СвойстваИмени, Истина);
	
	СвойстваПредопределенного = Свойства.Предопределенные.Получить(ВРег(СвойстваИмени.Расширение));
	Если СвойстваПредопределенного = Неопределено Тогда
		СвойстваПредопределенного = Новый Структура;
		СвойстваПредопределенного.Вставить("ИмяСуществует", Ложь);
		СвойстваПредопределенного.Вставить("Источники", Новый Массив);
		Свойства.Предопределенные.Вставить(ВРег(СвойстваИмени.Расширение), СвойстваПредопределенного);
	КонецЕсли;
	СвойстваПредопределенного.Источники.Добавить(Источник);
	
КонецПроцедуры

// Для процедур ОтметитьНекорректныеАргументыИЗапрещенныеУзлы, ВыделитьПсевдонимПоля,
// ДобавитьТипыВидовДоступаПользователиИВнешниеПользователиДляПроверкиОтсутствия.
//
Процедура ДобавитьТребуемоеПолеТаблицы(Контекст, Таблица, ИмяПоля, Источник,
			ТипПоля = "", ИсточникТипаПоля = Неопределено, УзелПоле = Неопределено)
	
	Если ЗначениеЗаполнено(Источник.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваИмени = СвойстваИмениТаблицы(Контекст, Таблица);
	Если СвойстваИмени.СвойстваТипаТаблиц = Неопределено Тогда
		
		Если СвойстваИмени.ЭтоОсновнаяТаблица
		   И Не Контекст.Свойство("ОшибкаНаПервоеПолеОсновнойТаблицыУстановлена") Тогда
			
			Контекст.Вставить("ОшибкаНаПервоеПолеОсновнойТаблицыУстановлена");
			УстановитьОшибкуВСтрокеИмениПоля(Контекст, Источник,
				НСтр("ru = 'Поле не найдено, так как не найдена таблица ""%1""'"), 0, ,
				Контекст.ОсновнаяТаблица);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваТребуемойТаблицы(Контекст, СвойстваИмени);
	
	СвойстваПоля = Свойства.Поля.Получить(ВРег(ИмяПоля));
	Если СвойстваПоля = Неопределено Тогда
		СвойстваПоля = Новый Структура;
		СвойстваПоля.Вставить("ПолеСОшибкой", 0);
		СвойстваПоля.Вставить("ВидОшибки",    "");
		СвойстваПоля.Вставить("Коллекция",    "");
		СвойстваПоля.Вставить("СодержитТипы", Новый Соответствие);
		СвойстваПоля.Вставить("Источники",    Новый Соответствие);
		СвойстваПоля.Вставить("УзлыПоле",     Новый Массив);
		Свойства.Поля.Вставить(ВРег(ИмяПоля), СвойстваПоля);
		
		Если Свойства.Свойство("ПервоеПоле")
		   И Свойства.ПервоеПоле = Неопределено
		   И Источник <> Неопределено Тогда
			
			СвойстваПоля.Вставить("ПервыйИсточник", Новый Структура("Ключ,Значение", Источник, Таблица));
			Свойства.ПервоеПоле = СвойстваПоля;
		КонецЕсли;
	КонецЕсли;
	СвойстваПоля.Источники.Вставить(Источник, Таблица);
	Если УзелПоле <> Неопределено Тогда
		СвойстваПоля.УзлыПоле.Добавить(УзелПоле);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникТипаПоля) = Тип("СтрокаТаблицыЗначений")
	   И ЗначениеЗаполнено(ИсточникТипаПоля.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТипа = СвойстваПоля.СодержитТипы.Получить(ВРег(ТипПоля));
	Если СвойстваТипа = Неопределено Тогда
		СоставИмени = СтрРазделить(ТипПоля, ".");
		СвойстваТипаТаблиц = Контекст.СинтаксисЯзыка.ТипыТаблиц.ПоИменам.Получить(ВРег(СоставИмени[0]));
		Если СвойстваТипаТаблиц = Неопределено Тогда
			ИмяТипа = ТипПоля;
			ИмяКоллекцииТипа = "";
			ИмяОбъектаКоллекцииТипа = "";
		Иначе
			ИмяТипа = СвойстваТипаТаблиц.ЯзыкРусский + "Ссылка." + СоставИмени[1];
			ИмяКоллекцииТипа = СвойстваТипаТаблиц.ИмяКоллекции;
			ИмяОбъектаКоллекцииТипа = СоставИмени[1];
		КонецЕсли;
		СвойстваТипа = Новый Структура;
		СвойстваТипа.Вставить("СодержитТип", Ложь);
		СвойстваТипа.Вставить("ИмяТипа", ИмяТипа);
		СвойстваТипа.Вставить("ИмяКоллекцииТипа", ИмяКоллекцииТипа);
		СвойстваТипа.Вставить("ИмяОбъектаКоллекцииТипа", ИмяОбъектаКоллекцииТипа);
		СвойстваТипа.Вставить("Источники", Новый Соответствие);
		СвойстваПоля.СодержитТипы.Вставить(ВРег(ТипПоля), СвойстваТипа);
	КонецЕсли;
	СвойстваТипа.Источники.Вставить(ИсточникТипаПоля, Источник);
	
КонецПроцедуры

// Для процедур ДобавитьТребуемуюТаблицуКакИсточникДанных, ДобавитьТребуемуюТаблицуКакСсылочныйТип,
// ДобавитьТребуемыйПредопределенныйЭлемент, ДобавитьТребуемоеПолеТаблицы.
//
Функция СвойстваИмениТаблицы(Контекст, ПолноеИмя)
	
	Если ЗначениеЗаполнено(ПолноеИмя) Тогда
		Таблица = ПолноеИмя;
	Иначе
		Таблица = Контекст.ОсновнаяТаблица;
	КонецЕсли;
	
	СоставИмени = СтрРазделить(Таблица, ".", Ложь);
	
	Свойства = Новый Структура;
	Свойства.Вставить("ЧислоЧастейИмени", СоставИмени.Количество());
	Свойства.Вставить("ИмяТипа",    СоставИмени[0]);
	Свойства.Вставить("ИмяБезТипа", ?(СоставИмени.Количество() > 1, СоставИмени[1], Неопределено));
	Свойства.Вставить("Расширение", ?(СоставИмени.Количество() = 3, СоставИмени[2], Неопределено));
	Свойства.Вставить("ЭтоОсновнаяТаблица", ВРег(Таблица) = ВРег(Контекст.ОсновнаяТаблица));
	Свойства.Вставить("СвойстваТипаТаблиц",
		Контекст.СинтаксисЯзыка.ТипыТаблиц.ПоИменам.Получить(ВРег(СоставИмени[0])));
	
	Возврат Свойства;
	
КонецФункции

// Для процедур ДобавитьТребуемуюТаблицуКакИсточникДанных, ДобавитьТребуемуюТаблицуКакСсылочныйТип,
// ДобавитьТребуемыйПредопределенныйЭлемент, ДобавитьТребуемоеПолеТаблицы.
//
Функция СвойстваТребуемойТаблицы(Контекст, СвойстваИмени, БезРасширения = Ложь)
	
	ИмяКоллекции = СвойстваИмени.СвойстваТипаТаблиц.ИмяКоллекции;
	
	СвойстваКоллекции = Контекст.ПоляТаблиц.Получить(ИмяКоллекции);
	Если СвойстваКоллекции = Неопределено Тогда
		СвойстваКоллекции = Новый Соответствие;
		Контекст.ПоляТаблиц.Вставить(ИмяКоллекции, СвойстваКоллекции);
	КонецЕсли;
	
	Свойства = СвойстваКоллекции.Получить(ВРег(СвойстваИмени.ИмяБезТипа));
	Если Свойства = Неопределено Тогда
		Свойства = Новый Структура;
		Свойства.Вставить("ТаблицаСуществует", Ложь);
		Свойства.Вставить("Источники",         Новый Массив);
		Свойства.Вставить("Поля",              Новый Соответствие);
		Свойства.Вставить("Предопределенные",  Новый Соответствие);
		Свойства.Вставить("Расширения",        Новый Соответствие);
		Если СвойстваИмени.ЭтоОсновнаяТаблица И СвойстваИмени.Расширение = Неопределено Тогда
			Свойства.Вставить("ПервоеПоле");
		КонецЕсли;
		СвойстваКоллекции.Вставить(ВРег(СвойстваИмени.ИмяБезТипа), Свойства);
	КонецЕсли;
	
	Если СвойстваИмени.Расширение = Неопределено Или БезРасширения Тогда
		Возврат Свойства;
	КонецЕсли;
	
	СвойстваРасширения = Свойства.Расширения.Получить(ВРег(СвойстваИмени.Расширение));
	Если СвойстваРасширения = Неопределено Тогда
		СвойстваРасширения = Новый Структура;
		СвойстваРасширения.Вставить("ТаблицаСуществует", Ложь);
		СвойстваРасширения.Вставить("Источники",         Новый Массив);
		СвойстваРасширения.Вставить("Поля",              Новый Соответствие);
		Если СвойстваИмени.ЭтоОсновнаяТаблица Тогда
			СвойстваРасширения.Вставить("ПервоеПоле");
		КонецЕсли;
		Свойства.Расширения.Вставить(ВРег(СвойстваИмени.Расширение), СвойстваРасширения);
	КонецЕсли;
	
	Возврат СвойстваРасширения;
	
КонецФункции

// Для процедур и функций ЧастиОграничения, РазобратьДополнительныеТаблицы, РазобратьСоединение,
// РазобратьУсловиеОграничения, ВыраженияВыборКогдаТогдаВоВложениях.
Функция ПодставитьКлючевыеСловаВСтроку(Контекст, Строка, СписокСлов, ПараметрОдин = "", ПараметрДва = "", ПараметрТри = "")
	
	Слова = СтрРазделить(СписокСлов, ",", Ложь);
	СловаДляПодстановки = Новый Соответствие;
	
	Для Каждого Слово Из Слова Цикл
		СловаДляПодстановки.Вставить(Слова.Найти(Слово),
			КлючевоеСловоСУчетомЯзыка(СокрЛП(Слово), Контекст));
	КонецЦикла;
	
	Индекс = СловаДляПодстановки.Количество();
	СловаДляПодстановки.Вставить(Индекс,     ПараметрОдин);
	СловаДляПодстановки.Вставить(Индекс + 1, ПараметрДва);
	СловаДляПодстановки.Вставить(Индекс + 2, ПараметрТри);
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Строка,
		СловаДляПодстановки[0], СловаДляПодстановки[1], СловаДляПодстановки[2],
		СловаДляПодстановки[3], СловаДляПодстановки[4], СловаДляПодстановки[5],
		СловаДляПодстановки[6], СловаДляПодстановки[7], СловаДляПодстановки[8]);
	
КонецФункции

// Для процедур РазобратьДополнительныеТаблицы, РазобратьСоединение, РазобратьУсловиеОграничения.
Функция КлючевоеСловоСУчетомЯзыка(ИдентификаторСлова, Контекст)
	
	СвойстваСлова = Контекст.СинтаксисЯзыка.СловаЯзыка.Получить(ВРег(ИдентификаторСлова));
	
	Если ВариантВстроенногоЯзыкаРусский() Тогда
		Слово = СвойстваСлова.ЯзыкРусский;
	Иначе
		Слово = СвойстваСлова.ЯзыкАнглийский;
	КонецЕсли;
	
	Если СвойстваСлова.ВерхнийРегистр Тогда
		Слово = ВРег(Слово);
	КонецЕсли;
	
	Возврат Слово;
	
КонецФункции

// Для функций ОписаниеДопустимыхШаблонов, КлючевоеСловоСУчетомЯзыка.
Функция ВариантВстроенногоЯзыкаРусский()
	
	Возврат Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский;
	
КонецФункции

#КонецОбласти

#Область АнализИменТаблицИПолейТаблиц

// Проверка таблиц, полей таблиц и типов полей, найденных при разборе текста ограничения.
// Аналогичная процедура реализуется в СППР.
//
// Параметры:
//  РазобранноеОграничение - Структура - возвращается функцией РазобранноеОграничение.
//
Процедура ПроверитьТаблицыПоляИТипыПолей(РазобранноеОграничение)
	
	Контекст = Новый Структура;
	Контекст.Вставить("ТипыТаблиц",    УправлениеДоступомСлужебныйПовтИсп.СинтаксисЯзыка().ТипыТаблиц);
	
	Для Каждого ТипТаблиц Из РазобранноеОграничение.ПоляТаблиц Цикл
		КоллекцияТаблиц = Метаданные[ТипТаблиц.Ключ];
		
		Для Каждого ПоляТаблицы Из ТипТаблиц.Значение Цикл
			
			МетаданныеТаблицы = КоллекцияТаблиц.Найти(ПоляТаблицы.Ключ);
			Если МетаданныеТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПоляТаблицы.Значение.ТаблицаСуществует = Истина;
			
			Контекст.Вставить("МетаданныеТаблицы",  МетаданныеТаблицы);
			Контекст.Вставить("СвойстваТипаТаблиц", Контекст.ТипыТаблиц.ПоКоллекциям.Получить(ТипТаблиц.Ключ));
			
			Для Каждого ПолеТаблицы Из ПоляТаблицы.Значение.Поля Цикл
				ОписаниеПоля = Новый Структура;
				ОписаниеПоля.Вставить("СоставИмени", СтрРазделить(ПолеТаблицы.Ключ, "."));
				ОписаниеПоля.Вставить("Свойства",    ПолеТаблицы.Значение);
				ОписаниеПоля.Вставить("ТипПоля",     Новый ОписаниеТипов);
				ПроверитьПолеТаблицы(ОписаниеПоля, Контекст);
				Если ОписаниеПоля.Свойства.ПолеСОшибкой = 0 Тогда
					ПроверитьТипыПоля(ОписаниеПоля, Контекст);
				КонецЕсли;
			КонецЦикла;
			
			ПроверитьРасширенияТаблицы(ПоляТаблицы, Контекст);
			ПроверитьПредопределенныеЗначенияТаблицы(ПоляТаблицы, Контекст);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедур ПроверитьТаблицыПоляИТипыПолей, ПроверитьСледующееПолеЧерезТочку.
Процедура ПроверитьПолеТаблицы(ОписаниеПоля, Контекст, Индекс = 0, ПервыйВызов = Истина)
	
	СоставИмени  = ОписаниеПоля.СоставИмени;
	СвойстваПоля = ОписаниеПоля.Свойства;
	
	УточнениеПоля = Контекст.СвойстваТипаТаблиц.УточнениеПолей.Получить(ВРег(СоставИмени[Индекс]));
	
	Если УточнениеПоля <> Неопределено
	   И УточнениеПоля.Использование <> "Разрешено" Тогда
		
		СвойстваПоля.ПолеСОшибкой = Индекс + 1;
		СвойстваПоля.ВидОшибки = УточнениеПоля;
		Возврат;
	КонецЕсли;
	
	Свойства = СвойстваПоляИлиТабличнойЧасти(СоставИмени[Индекс], Контекст, Индекс = 0);
	Если Свойства = Неопределено Тогда
		СвойстваПоля.ПолеСОшибкой = Индекс + 1;
		СвойстваПоля.ВидОшибки = "НеНайдено";
		Возврат;
	КонецЕсли;
	Если Индекс = 0 Тогда
		СвойстваПоля.Коллекция = Свойства.Коллекция;
	КонецЕсли;
	
	Если Свойства.ЭтоТабличнаяЧасть Тогда
		Если Индекс > 0 Тогда
			СвойстваПоля.ПолеСОшибкой = Индекс + 1;
			СвойстваПоля.ВидОшибки = "ТабличнаяЧастьПослеТочки";
			Возврат;
		КонецЕсли;
		Если Индекс + 1 = СоставИмени.Количество() Тогда
			СвойстваПоля.ПолеСОшибкой = Индекс + 1;
			СвойстваПоля.ВидОшибки = "ТабличнаяЧастьБезПоля";
			Возврат;
		КонецЕсли;
		Индекс = Индекс + 1;
		Свойства = СвойстваПоляТабличнойЧасти(СоставИмени[Индекс],
			Свойства.Метаданные, Свойства.Коллекция, Контекст.МетаданныеТаблицы);
		Если Свойства = Неопределено Тогда
			СвойстваПоля.ПолеСОшибкой = Индекс + 1;
			СвойстваПоля.ВидОшибки = "НеНайдено";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьСледующееПолеЧерезТочку(ОписаниеПоля, Индекс, Свойства, Контекст);
	
	Если ПервыйВызов Тогда
		ЗаполнитьТипыПоляСтрокойДополнительно(ОписаниеПоля);
	КонецЕсли;
	
КонецПроцедуры

// Для процедур ПроверитьПолеТаблицы и ПроверитьРасширенияТаблицы.
Процедура ПроверитьСледующееПолеЧерезТочку(ОписаниеПоля, Индекс, СвойстваТекущегоПоля, Контекст)
	
	ДобавитьТипыПоляДополнительно(ОписаниеПоля, Индекс, СвойстваТекущегоПоля, Контекст);
	
	Индекс = Индекс + 1;
	Если Индекс = ОписаниеПоля.СоставИмени.Количество() Тогда
		ОписаниеПоля.ТипПоля = Новый ОписаниеТипов(ОписаниеПоля.ТипПоля, СвойстваТекущегоПоля.Тип.Типы());
		Возврат;
	КонецЕсли;
	
	СвойстваПоля = ОписаниеПоля.Свойства;
	ПолеНайдено = Ложь;
	
	Если ОписаниеПоля.Свойство("ТаблицыСледующегоПоля") Тогда
		// См. процедуру ДобавитьТипыПоляДополнительно.
		Если ОписаниеПоля.ТаблицыСледующегоПоля.Количество() < Индекс + 1 Тогда
			ТаблицыСледующегоПоля = Новый Массив;
			ОписаниеПоля.ТаблицыСледующегоПоля.Добавить(ТаблицыСледующегоПоля);
		Иначе
			ТаблицыСледующегоПоля = ОписаниеПоля.ТаблицыСледующегоПоля[Индекс];
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Тип Из СвойстваТекущегоПоля.Тип.Типы() Цикл
		Если Не ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		СвойстваПоля.ПолеСОшибкой = 0;
		СвойстваПоля.ВидОшибки = "";
		
		// Сохранение текущего контекста.
		ТекущиеМетаданныеТаблицы  = Контекст.МетаданныеТаблицы;
		ТекущиеСвойстваТипаТаблиц = Контекст.СвойстваТипаТаблиц;
		
		Контекст.МетаданныеТаблицы = Метаданные.НайтиПоТипу(Тип);
		ПолноеИмя = Контекст.МетаданныеТаблицы.ПолноеИмя();
		СоставПолногоИмени = СтрРазделить(ПолноеИмя, ".", Ложь);
		Контекст.СвойстваТипаТаблиц = Контекст.ТипыТаблиц.ПоИменам.Получить(ВРег(СоставПолногоИмени[0]));
		
		ТекущийИндекс = Индекс;
		ПроверитьПолеТаблицы(ОписаниеПоля, Контекст, ТекущийИндекс, Ложь);
		
		// Восстановление текущего контекста.
		Контекст.МетаданныеТаблицы  = ТекущиеМетаданныеТаблицы;
		Контекст.СвойстваТипаТаблиц = ТекущиеСвойстваТипаТаблиц;
		
		Если СвойстваПоля.ПолеСОшибкой = 0 Тогда
			ПолеНайдено = Истина;
			Если ТаблицыСледующегоПоля <> Неопределено Тогда
				// См. процедуру ДобавитьТипыПоляДополнительно.
				ТаблицыСледующегоПоля.Добавить(ПолноеИмя);
			КонецЕсли;
		ИначеЕсли СвойстваПоля.ВидОшибки <> "НеНайдено" Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеНайдено Тогда
		СвойстваПоля.ПолеСОшибкой = 0;
		СвойстваПоля.ВидОшибки = "";
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПроверитьПолеТаблицы.
Функция СвойстваПоляИлиТабличнойЧасти(ИмяПоляИлиТабличнойЧасти, Контекст, ЭтоПервоеПоле)
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоТабличнаяЧасть", Ложь);
	Результат.Вставить("Коллекция");
	Результат.Вставить("Метаданные");
	Результат.Вставить("Тип");
	
	МетаданныеТаблицы  = Контекст.МетаданныеТаблицы;
	СвойстваТипаТаблиц = Контекст.СвойстваТипаТаблиц;
	
	Для Каждого КоллекцияТабличныхЧастей Из СвойстваТипаТаблиц.КоллекцииТабличныхЧастей Цикл
		Если КоллекцияТабличныхЧастей.Ключ = "СтандартныеТабличныеЧасти" Тогда
			Для Каждого СтандартнаяТабличнаяЧасть Из МетаданныеТаблицы.СтандартныеТабличныеЧасти Цикл
				Если ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег(СтандартнаяТабличнаяЧасть.Имя) Тогда
					Результат.Метаданные = СтандартнаяТабличнаяЧасть;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.Метаданные = МетаданныеТаблицы[КоллекцияТабличныхЧастей.Ключ].Найти(ИмяПоляИлиТабличнойЧасти);
		КонецЕсли;
		Если Результат.Метаданные <> Неопределено Тогда
			Результат.ЭтоТабличнаяЧасть = Истина;
			Результат.Коллекция = КоллекцияТабличныхЧастей.Ключ;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КоллекцияПолей Из СвойстваТипаТаблиц.КоллекцииПолей Цикл
		Если КоллекцияПолей.Ключ = "СтандартныеРеквизиты" Тогда
			Номер = 0;
			Для Каждого СтандартныйРеквизит Из МетаданныеТаблицы.СтандартныеРеквизиты Цикл
				Номер = Номер + 1;
				Если ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег(СтандартныйРеквизит.Имя) Тогда
					Результат.Метаданные = СтандартныйРеквизит;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Результат.Метаданные = МетаданныеТаблицы[КоллекцияПолей.Ключ].Найти(ИмяПоляИлиТабличнойЧасти);
		КонецЕсли;
		Если Результат.Метаданные <> Неопределено Тогда
			Результат.Коллекция = КоллекцияПолей.Ключ;
			Если Результат.Коллекция = "Графы" Тогда
				Результат.Тип = Новый ОписаниеТипов;
				Для Каждого МетаданныеСсылки Из Результат.Метаданные.Ссылки Цикл
					Результат.Тип = Новый ОписаниеТипов(Результат.Тип, МетаданныеСсылки.Тип.Типы());
				КонецЦикла;
			Иначе
				Результат.Тип = Результат.Метаданные.Тип;
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если СвойстваТипаТаблиц.ОбщиеРеквизиты <> "Отсутствуют" Тогда
		Результат.Метаданные = Метаданные.ОбщиеРеквизиты.Найти(ИмяПоляИлиТабличнойЧасти);
		Если Результат.Метаданные <> Неопределено Тогда
			Результат.Коллекция = "ОбщиеРеквизиты";
			Результат.Тип = Результат.Метаданные.Тип;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойстваТипаТаблиц.ИмяКоллекции = "Константы" Тогда
		
		Если ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Значение")
		 Или ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Value") Тогда
			
			Результат.Коллекция = "СпециальныеПоля";
			Результат.Тип = МетаданныеТаблицы.Тип;
			Результат.Вставить("ОсновнойПорядок", "001"); // См. процедуру ДобавитьОсновнойПорядокПоля.
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли СвойстваТипаТаблиц.ИмяКоллекции = "Последовательности" Тогда
		
		Если ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Период")
		 Или ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Period") Тогда
		
			Результат.Коллекция = "СпециальныеПоля";
			Результат.Тип = Новый ОписаниеТипов("Дата");
			Результат.Вставить("ОсновнойПорядок", "001"); // См. процедуру ДобавитьОсновнойПорядокПоля.
			Возврат Результат;
		КонецЕсли;
		
		Если ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Регистратор")
		 Или ВРег(ИмяПоляИлиТабличнойЧасти) = ВРег("Recorder") Тогда
			
			Результат.Коллекция = "СпециальныеПоля";
			Результат.Тип = Новый ОписаниеТипов;
			Для Каждого ДокументМетаданные Из МетаданныеТаблицы.Документы Цикл
				Результат.Тип = Новый ОписаниеТипов(Результат.Тип, "ДокументСсылка." + ДокументМетаданные.Имя);
			КонецЦикла;
			Результат.Вставить("ОсновнойПорядок", "002"); // См. процедуру ДобавитьОсновнойПорядокПоля.
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для процедур ПроверитьРасширенияТаблицы, ПроверитьПолеТаблицы.
Функция СвойстваПоляТабличнойЧасти(ИмяПоляТабличнойЧасти, МетаданныеТабличнойЧасти, ИмяКоллекции, МетаданныеТаблицы)
	
	Результат = Новый Структура;
	Результат.Вставить("Тип");
	Результат.Вставить("ИмяТабличнойЧасти", МетаданныеТабличнойЧасти.Имя);
	
	Если ВРег(ИмяПоляТабличнойЧасти) = ВРег("Ссылка")
	 Или ВРег(ИмяПоляТабличнойЧасти) = ВРег("Ref") Тогда
		
		Для Каждого СтандартныйРеквизит Из МетаданныеТаблицы.СтандартныеРеквизиты Цикл
			Если ВРег(ИмяПоляТабличнойЧасти) = ВРег(СтандартныйРеквизит.Имя) Тогда
				Результат.Тип = СтандартныйРеквизит.Тип;
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
		Если ВРег(ИмяПоляТабличнойЧасти) = ВРег(СтандартныйРеквизит.Имя) Тогда
			Результат.Тип = СтандартныйРеквизит.Тип;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяКоллекции = "ТабличныеЧасти" Тогда
		МетаданныеПоля = МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяПоляТабличнойЧасти);
		Если МетаданныеПоля <> Неопределено Тогда
			Результат.Тип = МетаданныеПоля.Тип;
			Результат.Вставить("МетаданныеТабличнойЧасти", МетаданныеТабличнойЧасти);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для процедур ПроверитьРасширенияТаблицы, ПроверитьПолеТаблицы.
Функция СвойстваПоляПерерасчета(ИмяПоляПерерасчета, МетаданныеПерерасчета, МетаданныеТаблицы)
	
	Результат = Новый Структура;
	Результат.Вставить("Тип");
	Результат.Вставить("Коллекция");
	Результат.Вставить("Метаданные");
	
	Если ВРег(ИмяПоляПерерасчета) = ВРег("ОбъектПерерасчета")
	 Или ВРег(ИмяПоляПерерасчета) = ВРег("RecalculationObject") Тогда
		
		ИмяПоля = "Регистратор";
		
	ИначеЕсли ВРег(ИмяПоляПерерасчета) = ВРег("ВидРасчета")
	      Или ВРег(ИмяПоляПерерасчета) = ВРег("CalculationType") Тогда
	
		ИмяПоля = "ВидРасчета";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		Для Каждого СтандартныйРеквизит Из МетаданныеТаблицы.СтандартныеРеквизиты Цикл
			Если ВРег(ИмяПоля) = ВРег(СтандартныйРеквизит.Имя) Тогда
				Результат.Коллекция = "СтандартныеРеквизиты";
				Результат.Метаданные = СтандартныйРеквизит;
				Результат.Тип = СтандартныйРеквизит.Тип;
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	МетаданныеПоля = МетаданныеПерерасчета.Измерения.Найти(ИмяПоляПерерасчета);
	Если МетаданныеПоля <> Неопределено Тогда
		Результат.Тип = МетаданныеПоля.ИзмерениеРегистра.Тип;
		Результат.Коллекция = "СпециальныеПоля";
		Номер = 200 + МетаданныеТаблицы.Измерения.Индекс(МетаданныеПоля) + 1;
		Результат.Вставить("ОсновнойПорядок", Номер); // См. процедуру ДобавитьОсновнойПорядокПоля.
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для процедуры ПроверитьПолеТаблицы.
Процедура ДобавитьТипыПоляДополнительно(ОписаниеПоля, Индекс, СвойстваТекущегоПоля, Контекст)
	
	// Дополнительный сбор типов для использования в служебных процедурах.
	
	// Расширение свойств узла Поле для использования в служебных процедурах.
	Если Индекс = 0 Тогда
		Если ОписаниеПоля.СоставИмени.Количество() > 1 Тогда
			ОписаниеПоля.Вставить("ТаблицыСледующегоПоля", Новый Массив);
		КонецЕсли;
		Если Не Контекст.СвойстваТипаТаблиц.ЭтоСсылочныйТип Тогда
			ДобавитьОсновнойПорядокПоля(СвойстваТекущегоПоля, Контекст);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого УзелПоле Из ОписаниеПоля.Свойства.УзлыПоле Цикл
		Если СвойстваТекущегоПоля.Свойство("ОсновнойПорядок")
		   И Не УзелПоле.Свойство("ОсновнойПорядок") Тогда
			УзелПоле.Вставить("ОсновнойПорядок", СвойстваТекущегоПоля.ОсновнойПорядок);
		КонецЕсли;
		Если ОписаниеПоля.Свойство("ТаблицыСледующегоПоля")
		   И Не УзелПоле.Свойство("ТаблицыСледующегоПоля") Тогда
			УзелПоле.Вставить("ТаблицыСледующегоПоля", ОписаниеПоля.ТаблицыСледующегоПоля);
		КонецЕсли;
		Если Не УзелПоле.Свойство("ТипыПоля") Тогда
			УзелПоле.Вставить("ТипыПоля", Новый Массив);
			УстановитьПолеСодержитNull(УзелПоле, СвойстваТекущегоПоля, Контекст);
		КонецЕсли;
		Если СвойстваТекущегоПоля.Свойство("ИмяТабличнойЧасти")
		   И ВРег(СвойстваТекущегоПоля.ИмяТабличнойЧасти) = ВРег(ОписаниеПоля.СоставИмени[0]) Тогда
			
			УзелПоле.ТипыПоля.Добавить(СвойстваТекущегоПоля.ИмяТабличнойЧасти);
		КонецЕсли;
		Если Индекс > УзелПоле.ТипыПоля.Количество() - 1 Тогда
			УзелПоле.ТипыПоля.Добавить(СвойстваТекущегоПоля.Тип);
		КонецЕсли;
		УзелПоле.ТипыПоля[Индекс] = Новый ОписаниеТипов(УзелПоле.ТипыПоля[Индекс],
			СвойстваТекущегоПоля.Тип.Типы());
	КонецЦикла;
	
	// Добавление типов поля строкой для проверки изменения в служебных процедурах.
	ПолноеИмяПоля = Контекст.СвойстваТипаТаблиц.ЯзыкРусский + "." + ВРег(Контекст.МетаданныеТаблицы.Имя);
	
	Если СвойстваТекущегоПоля.Свойство("ИмяТабличнойЧасти") Тогда
		ПолноеИмяПоля = ПолноеИмяПоля + "." + ВРег(СвойстваТекущегоПоля.ИмяТабличнойЧасти);
	КонецЕсли;
	
	ПолноеИмяПоля = ПолноеИмяПоля + "." + ОписаниеПоля.СоставИмени[Индекс];
	
	Если Не ОписаниеПоля.Свойство("ВсеПоля") Тогда
		ОписаниеПоля.Вставить("ВсеПоля",       Новый Соответствие);
		ОписаниеПоля.Вставить("ТипыВсехПолей", Новый СписокЗначений);
	КонецЕсли;
	Если ОписаниеПоля.ВсеПоля.Получить(ПолноеИмяПоля) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОписаниеПоля.ВсеПоля.Вставить(ПолноеИмяПоля, Истина);
	
	ТипыСтрокой = СтрокаДанныхДляХеширования(СвойстваТекущегоПоля.Тип);
	ОписаниеПоля.ТипыВсехПолей.Добавить(ТипыСтрокой, ПолноеИмяПоля);
	
КонецПроцедуры

// Для процедуры ПроверитьПолеТаблицы.
Процедура ЗаполнитьТипыПоляСтрокойДополнительно(ОписаниеПоля)
	
	Если ОписаниеПоля.ТипыВсехПолей.Количество() > 1 Тогда
		ОписаниеПоля.ТипыВсехПолей.СортироватьПоПредставлению();
	КонецЕсли;
	ТипыСтрокой = СтрСоединить(ОписаниеПоля.ТипыВсехПолей.ВыгрузитьЗначения(), Символы.ПС);
	УзлыПоле = ОписаниеПоля.Свойства.УзлыПоле;
	
	Для Каждого УзелПоле Из УзлыПоле Цикл
		УзелПоле.Вставить("ТипыСтрокой", ТипыСтрокой);
	КонецЦикла;
	
	ОписаниеПоля.Удалить("ВсеПоля");
	ОписаниеПоля.Удалить("ТипыВсехПолей");
	
КонецПроцедуры

// Для процедуры ДобавитьТипыПоляДополнительно.
Процедура ДобавитьОсновнойПорядокПоля(СвойстваТекущегоПоля, Контекст)
	
	Если СвойстваТекущегоПоля.Коллекция = "СпециальныеПоля" Тогда
		Возврат; // Установлен в функции СвойстваПоляИлиТабличнойЧасти.
	КонецЕсли;
	
	МетаданныеТаблицы = Контекст.МетаданныеТаблицы;
	МетаданныеПоля    = СвойстваТекущегоПоля.Метаданные;
	
	Если СвойстваТекущегоПоля.Коллекция = "СтандартныеРеквизиты" Тогда
		Индекс = 0;
		Для Каждого СтандартныйРеквизит Из МетаданныеТаблицы.СтандартныеРеквизиты Цикл
			Если СтандартныйРеквизит = МетаданныеПоля Тогда
				Прервать;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		Номер = 100 + Индекс + 1;
		
	ИначеЕсли СвойстваТекущегоПоля.Коллекция = "Измерения" Тогда
		Номер = 200 + МетаданныеТаблицы.Измерения.Индекс(МетаданныеПоля) + 1;
		
	ИначеЕсли СвойстваТекущегоПоля.Коллекция = "Ресурсы" Тогда
		Номер = 300 + МетаданныеТаблицы.Ресурсы.Индекс(МетаданныеПоля) + 1;
		
	ИначеЕсли СвойстваТекущегоПоля.Коллекция = "Реквизиты" Тогда
		Номер = 400 + МетаданныеТаблицы.Реквизиты.Индекс(МетаданныеПоля) + 1;
		
	ИначеЕсли СвойстваТекущегоПоля.Коллекция = "ОбщиеРеквизиты" Тогда
		Номер = 500 + Контекст.СвойстваТипаТаблиц.ОбщиеРеквизиты.Индекс(МетаданныеПоля) + 1;
	КонецЕсли;
	
	СвойстваТекущегоПоля.Вставить("ОсновнойПорядок", Строка(Номер));
	
КонецПроцедуры

// Для процедуры ДобавитьТипыПоляДополнительно.
Процедура УстановитьПолеСодержитNull(УзелПоле, СвойстваТекущегоПоля, Контекст)
	
	Если Контекст.СвойстваТипаТаблиц.ИмяКоллекции <> "Справочники"
	   И Контекст.СвойстваТипаТаблиц.ИмяКоллекции <> "ПланыВидовХарактеристик"
	 Или Не Контекст.МетаданныеТаблицы.Иерархический Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Контекст.СвойстваТипаТаблиц.ИмяКоллекции = "Справочники"
	   И Контекст.МетаданныеТаблицы.ВидИерархии
	       <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		Возврат;
	КонецЕсли;
	
	Если СвойстваТекущегоПоля.Свойство("ИмяТабличнойЧасти") Тогда
		Если СвойстваТекущегоПоля.Свойство("МетаданныеТабличнойЧасти")
		   И СвойстваТекущегоПоля.МетаданныеТабличнойЧасти.Использование
		      <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
			
			УзелПоле.Вставить("ПолеСодержитNull");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если СвойстваТекущегоПоля.Коллекция = "Реквизиты"
	   И СвойстваТекущегоПоля.Метаданные.Использование
	      <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
		
		УзелПоле.Вставить("ПолеСодержитNull");
	КонецЕсли;
	
КонецПроцедуры

// Для процедуры ПроверитьТаблицыПоляИТипыПолей.
Процедура ПроверитьРасширенияТаблицы(ПоляТаблицы, Контекст)
	
	СвойстваТипаТаблиц = Контекст.СвойстваТипаТаблиц;
	
	Если СвойстваТипаТаблиц.КоллекцииТабличныхЧастей.Количество() = 0
	   И СвойстваТипаТаблиц.ИмяКоллекции <> "РегистрыРасчета" Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеТаблицы = Контекст.МетаданныеТаблицы;
	
	Для Каждого РасширениеТаблицы Из ПоляТаблицы.Значение.Расширения Цикл
		
		Если СвойстваТипаТаблиц.ИмяКоллекции = "РегистрыРасчета" Тогда
			МетаданныеРасширения = МетаданныеТаблицы.Перерасчеты.Найти(РасширениеТаблицы.Ключ);
		Иначе
			Для Каждого КоллекцияТабличныхЧастей Из СвойстваТипаТаблиц.КоллекцииТабличныхЧастей Цикл
				Если КоллекцияТабличныхЧастей.Ключ = "СтандартныеТабличныеЧасти" Тогда
					Для Каждого СтандартнаяТабличнаяЧасть Из МетаданныеТаблицы.СтандартныеТабличныеЧасти Цикл
						Если ВРег(РасширениеТаблицы.Ключ) = ВРег(СтандартнаяТабличнаяЧасть.Имя) Тогда
							МетаданныеРасширения = СтандартнаяТабличнаяЧасть;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					МетаданныеРасширения = МетаданныеТаблицы[КоллекцияТабличныхЧастей.Ключ].Найти(РасширениеТаблицы.Ключ);
				КонецЕсли;
				Если МетаданныеРасширения <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если МетаданныеРасширения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РасширениеТаблицы.Значение.ТаблицаСуществует = Истина;
		
		Для Каждого ПолеТаблицы Из РасширениеТаблицы.Значение.Поля Цикл
			ОписаниеПоля = Новый Структура;
			ОписаниеПоля.Вставить("СоставИмени", СтрРазделить(ПолеТаблицы.Ключ, "."));
			ОписаниеПоля.Вставить("Свойства",    ПолеТаблицы.Значение);
			ОписаниеПоля.Вставить("ТипПоля",     Новый ОписаниеТипов);
			
			Индекс = 0;
			Если СвойстваТипаТаблиц.ИмяКоллекции = "РегистрыРасчета" Тогда
				СвойстваПоля = СвойстваПоляПерерасчета(ОписаниеПоля.СоставИмени[Индекс],
					МетаданныеРасширения, МетаданныеТаблицы);
			Иначе
				СвойстваПоля = СвойстваПоляТабличнойЧасти(ОписаниеПоля.СоставИмени[Индекс],
					МетаданныеРасширения, КоллекцияТабличныхЧастей.Ключ, МетаданныеТаблицы);
			КонецЕсли;
			
			Если СвойстваПоля = Неопределено Тогда
				ОписаниеПоля.Свойства.ПолеСОшибкой = Индекс + 1;
				ОписаниеПоля.Свойства.ВидОшибки = "НеНайдено";
				Продолжить;
			КонецЕсли;
			ПроверитьСледующееПолеЧерезТочку(ОписаниеПоля, Индекс, СвойстваПоля, Контекст);
			ЗаполнитьТипыПоляСтрокойДополнительно(ОписаниеПоля);
			Если ОписаниеПоля.Свойства.ПолеСОшибкой = 0 Тогда
				ПроверитьТипыПоля(ОписаниеПоля, Контекст);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Для процедур ПроверитьТаблицыПоляИТипыПолей и ПроверитьРасширенияТаблицы.
Процедура ПроверитьТипыПоля(ОписаниеПоля, Контекст)
	
	ОписаниеТиповПоля = ОписаниеПоля.ТипПоля;
	
	Для Каждого ОписаниеТипа Из ОписаниеПоля.Свойства.СодержитТипы Цикл
		СвойстваТипа = ОписаниеТипа.Значение;
		Если ЗначениеЗаполнено(СвойстваТипа.ИмяКоллекцииТипа)
		   И Метаданные[СвойстваТипа.ИмяКоллекцииТипа].Найти(СвойстваТипа.ИмяОбъектаКоллекцииТипа) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Тип = Тип(ОписаниеТипа.Значение.ИмяТипа);
		СвойстваТипа.СодержитТип = ОписаниеТиповПоля.СодержитТип(Тип);
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ПроверитьТаблицыПоляИТипыПолей.
Процедура ПроверитьПредопределенныеЗначенияТаблицы(ПоляТаблицы, Контекст)
	
	СвойстваТипаТаблиц = Контекст.СвойстваТипаТаблиц;
	
	Если ПоляТаблицы.Значение.Предопределенные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СвойстваТипаТаблиц.ЕстьПредопределенные Тогда
		МетаданныеТаблицы = Контекст.МетаданныеТаблицы;
		
		Если СвойстваТипаТаблиц.ИмяКоллекции = "Перечисления" Тогда
			ИменаПредопределенных = Новый Массив;
			Для Каждого ЗначениеПеречисления Из МетаданныеТаблицы.ЗначенияПеречисления Цикл
				ИменаПредопределенных.Добавить(ЗначениеПеречисления.Имя);
			КонецЦикла;
		Иначе
			ИменаПредопределенных = Новый Массив(МетаданныеТаблицы.ПолучитьИменаПредопределенных());
		КонецЕсли;
	Иначе
		ИменаПредопределенных = Новый Массив;
	КонецЕсли;
	
	ИменаПредопределенных.Добавить("ПустаяСсылка");
	ИменаПредопределенных.Добавить("EmptyRef");
	
	Для Каждого Предопределенный Из ПоляТаблицы.Значение.Предопределенные Цикл
		Для Каждого ИмяПредопределенного Из ИменаПредопределенных Цикл
			Если ВРег(ИмяПредопределенного) = Предопределенный.Ключ Тогда
				Предопределенный.Значение.ИмяСуществует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


// Для функции СтруктураОграничения.
Процедура ОтметитьНекорректныеИменаТаблицПолейИТиповПолей(ПоляТаблиц, Контекст)
	
	Для Каждого ТипТаблиц Из ПоляТаблиц Цикл
		Для Каждого ОписаниеТаблицы Из ТипТаблиц.Значение Цикл
			СвойстваТаблицы = ОписаниеТаблицы.Значение;
			
			Если Не СвойстваТаблицы.ТаблицаСуществует Тогда
				Для Каждого Источник Из СвойстваТаблицы.Источники Цикл
					УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не найдена таблица ""%1""'"), Источник.Символы), , 2);
				КонецЦикла;
				Если СвойстваТаблицы.Свойство("ПервоеПоле")
				   И СвойстваТаблицы.ПервоеПоле.ПервыйИсточник <> Неопределено Тогда
					
					УстановитьОшибкуВСтрокеИмениПоля(Контекст, СвойстваТаблицы.ПервоеПоле.ПервыйИсточник.Ключ,
						НСтр("ru = 'Поле не найдено, так как не найдена таблица ""%1""'"), 0, ,
						СвойстваТаблицы.ПервоеПоле.ПервыйИсточник.Значение);
				КонецЕсли;
				Для Каждого ОписаниеПредопределенного Из СвойстваТаблицы.Предопределенные Цикл
					Для Каждого Источник Из ОписаниеПредопределенного.Значение.Источники Цикл
						СоставИмени = СтрРазделить(Источник.Символы, ".");
						
						УстановитьОшибкуВСтроке(Источник, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Предопределенное значение не найдено, так как не найдена таблица ""%1""'"),
								СоставИмени[0] + "." + СоставИмени[1]), , 2);
					КонецЦикла;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			
			Для Каждого ОписаниеПредопределенного Из СвойстваТаблицы.Предопределенные Цикл
				СвойстваПредопределенного = ОписаниеПредопределенного.Значение;
				Если СвойстваПредопределенного.ИмяСуществует Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Источник Из СвойстваПредопределенного.Источники Цикл
					СоставИмени = СтрРазделить(Источник.Символы, ".");
					Источник.ПозицияОшибки = СтрДлина(СоставИмени[0] + "." + СоставИмени[1]) + 1;
					Источник.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдено предопределенное значение ""%1""'"), СоставИмени[2]);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ОписаниеПоля Из СвойстваТаблицы.Поля Цикл
				ОтметитьНекорректноеПолеИТипыПоля(ОписаниеПоля, Контекст);
			КонецЦикла;
			
			Для Каждого ОписаниеРасширения Из СвойстваТаблицы.Расширения Цикл
				СвойстваРасширения = ОписаниеРасширения.Значение;
				Если Не СвойстваРасширения.ТаблицаСуществует Тогда
					Для Каждого Источник Из СвойстваРасширения.Источники Цикл
						УстановитьОшибкуВСтроке(Источник,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не найдена таблица ""%1""'"), Источник.Символы), , 2);
					КонецЦикла;
					Если СвойстваРасширения.Свойство("ПервоеПоле")
					   И СвойстваРасширения.ПервоеПоле.ПервыйИсточник <> Неопределено Тогда
						
						УстановитьОшибкуВСтрокеИмениПоля(Контекст, СвойстваРасширения.ПервоеПоле.ПервыйИсточник.Ключ,
							НСтр("ru = 'Поле не найдено, так как не найдена таблица ""%1""'"), 0, ,
							СвойстваРасширения.ПервоеПоле.ПервыйИсточник.Значение);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Для Каждого ОписаниеПоля Из СвойстваРасширения.Поля Цикл
					ОтметитьНекорректноеПолеИТипыПоля(ОписаниеПоля, Контекст);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОтметитьНекорректныеИменаТаблицПолейИТиповПолей.
Процедура ОтметитьНекорректноеПолеИТипыПоля(ОписаниеПоля, Контекст)
	
	СвойстваПоля = ОписаниеПоля.Значение;
	Если СвойстваПоля.ПолеСОшибкой = 1 Тогда
		Для Каждого ОписаниеИсточника Из ОписаниеПоля.Значение.Источники Цикл
			ВКонце = Ложь;
			Если СвойстваПоля.ВидОшибки = "ТабличнаяЧастьБезПоля" Тогда
				ВКонце = Истина;
				ШаблонОшибки = НСтр("ru = 'Не указано поле после табличной части ""%1"" таблицы ""%2""'");
					
			ИначеЕсли СвойстваПоля.ВидОшибки = "Недопустимо" Тогда
				ШаблонОшибки = НСтр("ru = 'Недопустимо использовать поле ""%1"" таблицы ""%2""'");
				
			ИначеЕсли СвойстваПоля.ВидОшибки = "Запрещено" Тогда
				ШаблонОшибки = НСтр("ru = 'Запрещено использовать поле ""%1"" таблицы ""%2""'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'Не найдено поле ""%1"" таблицы ""%2""'");
			КонецЕсли;
			УстановитьОшибкуВСтрокеИмениПоля(Контекст,
				 ОписаниеИсточника.Ключ, ШаблонОшибки, 1, Истина, ОписаниеИсточника.Значение, ВКонце);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если СвойстваПоля.ПолеСОшибкой > 1 Тогда
		Для Каждого ОписаниеИсточника Из ОписаниеПоля.Значение.Источники Цикл
			Если СвойстваПоля.ВидОшибки = "ТабличнаяЧастьПослеТочки" Тогда
				ШаблонОшибки = НСтр("ru = 'Табличная часть ""%1"" не поддерживается ""через точку"" от поля'");
				
			ИначеЕсли СвойстваПоля.ВидОшибки = "Недопустимо" Тогда
				ШаблонОшибки = НСтр("ru = 'Недопустимо использовать поле ""%1""'");
				
			ИначеЕсли СвойстваПоля.ВидОшибки = "Запрещено" Тогда
				ШаблонОшибки = НСтр("ru = 'Запрещено использовать поле ""%1""'");
			Иначе
				ШаблонОшибки = НСтр("ru = 'Не найдено поле ""%1""'");
			КонецЕсли;
			УстановитьОшибкуВСтрокеИмениПоля(Контекст,
				ОписаниеИсточника.Ключ, ШаблонОшибки, СвойстваПоля.ПолеСОшибкой, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоставИмени = СтрРазделить(ОписаниеПоля.Ключ, ".");
	Если СоставИмени.Количество() > 1
	   И (    СоставИмени[1] = ВРег("Ссылка")
	      Или СоставИмени[1] = ВРег("Ref") )
	   И СвойстваПоля.Коллекция <> "ТабличныеЧасти"
	   И СвойстваПоля.Коллекция <> "СтандартныеТабличныеЧасти" Тогда
		
			Для Каждого ОписаниеИсточника Из ОписаниеПоля.Значение.Источники Цикл
				ШаблонОшибки = НСтр("ru = 'Поле ""%1"" избыточно указывать ""через точку"" от любого поля'");
				УстановитьОшибкуВСтрокеИмениПоля(Контекст,
					ОписаниеИсточника.Ключ, ШаблонОшибки, 2, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеТипа Из СвойстваПоля.СодержитТипы Цикл
		СвойстваТипа = ОписаниеТипа.Значение;
		Для Каждого ОписаниеИсточника Из ОписаниеТипа.Значение.Источники Цикл
			Если ТипЗнч(ОписаниеИсточника.Ключ) = Тип("СтрокаТаблицыЗначений") Тогда
				Если Не СвойстваТипа.СодержитТип Тогда
					УстановитьОшибкуВСтроке(ОписаниеИсточника.Ключ,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'У поля ""%1"" не найден тип ""%2""'"),
							ОписаниеИсточника.Значение.Символы,
							ОписаниеИсточника.Ключ.Символы),
						, 2);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Для процедуры ОтметитьНекорректныеИменаТаблицПолейИТиповПолей.
Процедура УстановитьОшибкуВСтрокеИмениПоля(Контекст, Строка, ШаблонОшибки, ПолеСОшибкой,
			ВставитьИмя = Ложь, Таблица = Null, ВКонце = Ложь)
	
	Если ЗначениеЗаполнено(Строка.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВставитьИмя) = Тип("Строка") Тогда
		СоставИмени = СтрРазделить(ВставитьИмя, ".");
		ВставитьИмя = Истина;
	Иначе
		СоставИмени = СтрРазделить(Строка.Символы, ".");
	КонецЕсли;
	
	Если СоставИмени.Количество() > 1
	   И Контекст.Псевдонимы.Получить(ВРег(СоставИмени[0])) <> Неопределено Тогда
		
		Строка.ПозицияОшибки = СтрДлина(СоставИмени[0]) + 1;
		СоставИмени.Удалить(0);
	КонецЕсли;
	
	Для Номер = 1 По ПолеСОшибкой - 1 Цикл
		Строка.ПозицияОшибки = Строка.ПозицияОшибки + СтрДлина(СоставИмени[0]) + 1;
		СоставИмени.Удалить(0);
	КонецЦикла;
	Если ВКонце Тогда
		Строка.ПозицияОшибки = Строка.ПозицияОшибки + СтрДлина(СоставИмени[0]);
	КонецЕсли;
	ИмяПоля = СоставИмени[0];
	
	Если ВставитьИмя И Таблица <> Null Тогда
		Строка.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			ИмяПоля, ?(ЗначениеЗаполнено(Таблица), Таблица, Контекст.ОсновнаяТаблица));
			
	ИначеЕсли ВставитьИмя Тогда
		Строка.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ИмяПоля);
		
	ИначеЕсли Таблица <> Null Тогда
		Строка.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
			?(ЗначениеЗаполнено(Таблица), Таблица, Контекст.ОсновнаяТаблица));
	Иначе
		Строка.ТекстОшибки = ШаблонОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеПрогрессаОбновленияДоступа

Процедура ОбновитьПрогрессВФоне(Контекст, АдресРезультата) Экспорт
	
	ДатаНачалаОбновленияПрогресса = ТекущаяДатаСеанса();
	ПоместитьВоВременноеХранилище(Истина, АдресРезультата); // Обновление прогресса выполняется.
	
	СтрокиСписков   = Контекст.ХранимыеДанные.СтрокиСписков;
	СвойстваСписков = Контекст.ХранимыеДанные.СвойстваСписков;
	Если Не Контекст.ЭтоПовторноеОбновлениеПрогресса Тогда
		Контекст.ХранимыеДанные.ДатаПоследнегоОбновления = '00010101';
	КонецЕсли;
	
	ДействующиеПараметры = Неопределено;
	ИдентификаторыТаблиц = ИдентификаторыСписковСОграничением(ДействующиеПараметры);
	
	Для Каждого КлючИЗначение Из ИдентификаторыТаблиц Цикл
		Если Не Контекст.ПоказыватьОбработанныеСписки Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокиСписков.Получить(КлючИЗначение.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяСтрокаСписка(Контекст, КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаксимальнаяДата", МаксимальнаяДата());
	Запрос.УстановитьПараметр("ДатаПоследнегоОбновления", Контекст.ХранимыеДанные.ДатаПоследнегоОбновления);
	Запрос.УстановитьПараметр("ПустойУникальныйИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Контекст.ХранимыеДанные.ДатаПоследнегоОбновления = ДатаНачалаОбновленияПрогресса;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВсеСпискиОбновления.Список КАК Список,
	|	МАКСИМУМ(ВсеСпискиОбновления.ОбновлениеЭлементов) КАК ОбновлениеЭлементов,
	|	МАКСИМУМ(ВсеСпискиОбновления.ОбновлениеКлючейДоступа) КАК ОбновлениеКлючейДоступа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОбновлениеКлючейДоступаКДанным.Список КАК Список,
	|		ИСТИНА КАК ОбновлениеЭлементов,
	|		ЛОЖЬ КАК ОбновлениеКлючейДоступа
	|	ИЗ
	|		РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК ОбновлениеКлючейДоступаКДанным
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОбновлениеКлючейДоступаПользователей.Список,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.ОбновлениеКлючейДоступаПользователей КАК ОбновлениеКлючейДоступаПользователей) КАК ВсеСпискиОбновления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСпискиОбновления.Список
	|
	|УПОРЯДОЧИТЬ ПО
	|	Список
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Списки.Список КАК Список,
	|	ОбновлениеКлючейДоступаКДанным.ДатаПоследнегоОбновленногоЭлемента КАК ДатаПоследнегоОбновленногоЭлемента,
	|	ОбновлениеКлючейДоступаКДанным.ПоследнийОбновленныйЭлемент КАК ПоследнийОбновленныйЭлемент,
	|	ОбновлениеКлючейДоступаКДаннымДляВнешнихПользователей.ДатаПоследнегоОбновленногоЭлемента КАК ДатаПоследнегоОбновленногоЭлементаДляВнешнихПользователей,
	|	ОбновлениеКлючейДоступаКДаннымДляВнешнихПользователей.ПоследнийОбновленныйЭлемент КАК ПоследнийОбновленныйЭлементДляВнешнихПользователей
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбновлениеКлючейДоступаКДанным.Список КАК Список,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбновлениеКлючейДоступаКДанным.ДляВнешнихПользователей
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ОбновлениеКлючейДоступаКДанным.КлючУникальности <> &ПустойУникальныйИдентификатор
	|						ИЛИ ОбновлениеКлючейДоступаКДанным.ДатаПоследнегоОбновленногоЭлемента = &МаксимальнаяДата
	|			КОНЕЦ) КАК ПолноеОбновление,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбновлениеКлючейДоступаКДанным.ДляВнешнихПользователей
	|					ТОГДА ОбновлениеКлючейДоступаКДанным.КлючУникальности <> &ПустойУникальныйИдентификатор
	|							ИЛИ ОбновлениеКлючейДоступаКДанным.ДатаПоследнегоОбновленногоЭлемента = &МаксимальнаяДата
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ПолноеОбновлениеДляВнешнихПользователей
	|	ИЗ
	|		РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК ОбновлениеКлючейДоступаКДанным
	|	ГДЕ
	|		ОбновлениеКлючейДоступаКДанным.ДатаИзмененияЗаписиРегистра >= &ДатаПоследнегоОбновления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОбновлениеКлючейДоступаКДанным.Список) КАК Списки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК ОбновлениеКлючейДоступаКДанным
	|		ПО (НЕ Списки.ПолноеОбновление)
	|			И (ОбновлениеКлючейДоступаКДанным.Список = Списки.Список)
	|			И (ОбновлениеКлючейДоступаКДанным.ДляВнешнихПользователей = ЛОЖЬ)
	|			И (ОбновлениеКлючейДоступаКДанным.КлючУникальности = &ПустойУникальныйИдентификатор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбновлениеКлючейДоступаКДанным КАК ОбновлениеКлючейДоступаКДаннымДляВнешнихПользователей
	|		ПО (НЕ Списки.ПолноеОбновлениеДляВнешнихПользователей)
	|			И (ОбновлениеКлючейДоступаКДанным.Список = Списки.Список)
	|			И (ОбновлениеКлючейДоступаКДанным.ДляВнешнихПользователей = ИСТИНА)
	|			И (ОбновлениеКлючейДоступаКДанным.КлючУникальности = &ПустойУникальныйИдентификатор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Списки.Список КАК Список,
	|	ОбновлениеКлючейДоступаДляПользователей.Контекст КАК Контекст,
	|	ОбновлениеКлючейДоступаДляВнешнихПользователей.Контекст КАК КонтекстДляВнешнихПользователей
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбновлениеКлючейДоступаПользователей.Список КАК Список,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбновлениеКлючейДоступаПользователей.ДляВнешнихПользователей
	|					ТОГДА ЛОЖЬ
	|				ИНАЧЕ ОбновлениеКлючейДоступаПользователей.КлючУникальности <> &ПустойУникальныйИдентификатор
	|			КОНЕЦ) КАК ПолноеОбновление,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА ОбновлениеКлючейДоступаПользователей.ДляВнешнихПользователей
	|					ТОГДА ОбновлениеКлючейДоступаПользователей.КлючУникальности <> &ПустойУникальныйИдентификатор
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ПолноеОбновлениеДляВнешнихПользователей
	|	ИЗ
	|		РегистрСведений.ОбновлениеКлючейДоступаПользователей КАК ОбновлениеКлючейДоступаПользователей
	|	ГДЕ
	|		ОбновлениеКлючейДоступаПользователей.ДатаИзмененияЗаписиРегистра >= &ДатаПоследнегоОбновления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОбновлениеКлючейДоступаПользователей.Список) КАК Списки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбновлениеКлючейДоступаПользователей КАК ОбновлениеКлючейДоступаДляПользователей
	|		ПО (НЕ Списки.ПолноеОбновление)
	|			И (ОбновлениеКлючейДоступаДляПользователей.Список = Списки.Список)
	|			И (ОбновлениеКлючейДоступаДляПользователей.ДляВнешнихПользователей = ЛОЖЬ)
	|			И (ОбновлениеКлючейДоступаДляПользователей.КлючУникальности = &ПустойУникальныйИдентификатор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбновлениеКлючейДоступаПользователей КАК ОбновлениеКлючейДоступаДляВнешнихПользователей
	|		ПО (НЕ Списки.ПолноеОбновлениеДляВнешнихПользователей)
	|			И (ОбновлениеКлючейДоступаДляВнешнихПользователей.Список = Списки.Список)
	|			И (ОбновлениеКлючейДоступаДляВнешнихПользователей.ДляВнешнихПользователей = ИСТИНА)
	|			И (ОбновлениеКлючейДоступаДляВнешнихПользователей.КлючУникальности = &ПустойУникальныйИдентификатор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.КлючиДоступа КАК КлючиДоступа";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВсеСпискиОбновления = РезультатыЗапроса[0].Выгрузить();
	СтрокиОбновленияКоличестваЭлементов = Новый Массив;
	СтрокиОбновленияКоличестваОбработанныхЭлементов = Новый Массив;
	СтрокиОбновленияКоличестваКлючейДоступа = Новый Массив;
	СтрокиОбновленияКоличестваОбработанныхКлючейДоступа = Новый Массив;
	
	Для Каждого СписокОбновления Из ВсеСпискиОбновления Цикл
		Строка = СтрокиСписков.Получить(СписокОбновления.Список);
		Если Строка = Неопределено Тогда
			Строка = НоваяСтрокаСписка(Контекст, СписокОбновления.Список, "");
		КонецЕсли;
	КонецЦикла;
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого КлючИЗначение Из СтрокиСписков Цикл
		Строка = КлючИЗначение.Значение;
		СписокОбновления = ВсеСпискиОбновления.Найти(Строка.Список, "Список");
		Если СписокОбновления = Неопределено И Не Контекст.ПоказыватьОбработанныеСписки Тогда
			УдаляемыеСтроки.Добавить(Строка);
			Продолжить;
		КонецЕсли;
		СвойстваСписка = СвойстваСписков.Получить(Строка.Список);
		Если СписокОбновления = Неопределено Или Не СписокОбновления.ОбновлениеЭлементов Тогда
			СвойстваСписка.ДатаПоследнегоОбновленногоЭлемента = '00010101';
			СвойстваСписка.ПоследнийОбновленныйЭлемент = Неопределено;
			СвойстваСписка.ДатаПоследнегоОбновленногоЭлементаДляВнешнихПользователей = '00010101';
			СвойстваСписка.ПоследнийОбновленныйЭлементДляВнешнихПользователей = Неопределено;
			Если Контекст.РассчитыватьПоКоличествуДанных Тогда
				Если Строка.ОбработаноЭлементов <> 100 Тогда
					СтрокиОбновленияКоличестваЭлементов.Добавить(Строка);
					СтрокиОбновленияКоличестваОбработанныхЭлементов.Добавить(Строка);
				КонецЕсли;
			Иначе
				ОбновитьЗначениеВСтроке(Строка.КоличествоЭлементов, 0, Строка, Контекст);
				ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов, 0, Строка, Контекст);
			КонецЕсли;
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов, 100, Строка, Контекст);
		КонецЕсли;
		Если СписокОбновления = Неопределено Или Не СписокОбновления.ОбновлениеКлючейДоступа Тогда
			СвойстваСписка.Контекст = Неопределено;
			СвойстваСписка.КонтекстДляВнешнихПользователей = Неопределено;
			Если Контекст.РассчитыватьПоКоличествуДанных Тогда
				Если Строка.ОбработаноКлючейДоступа <> 100 Тогда
					СтрокиОбновленияКоличестваКлючейДоступа.Добавить(Строка);
					СтрокиОбновленияКоличестваОбработанныхКлючейДоступа.Добавить(Строка);
				КонецЕсли;
			Иначе
				ОбновитьЗначениеВСтроке(Строка.КоличествоКлючейДоступа, 0, Строка, Контекст);
				ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа, 0, Строка, Контекст);
			КонецЕсли;
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа, 100, Строка, Контекст);
		КонецЕсли;
	КонецЦикла;
	
	СпискиОбновленияЭлементов = РезультатыЗапроса[1].Выгрузить();
	ОбъектыМетаданныхПоИдентификаторам =
		Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(
			СпискиОбновленияЭлементов.ВыгрузитьКолонку("Список"), Истина);
	
	Для Каждого ОписаниеОбновления Из СпискиОбновленияЭлементов Цикл
		Строка = СтрокиСписков.Получить(ОписаниеОбновления.Список);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = ОбъектыМетаданныхПоИдентификаторам.Получить(ОписаниеОбновления.Список);
		Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
			Если УдаляемыеСтроки.Найти(Строка) = Неопределено Тогда
				УдаляемыеСтроки.Добавить(Строка);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ИмяТаблицы) Тогда
			Строка.ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		Если Не Контекст.РассчитыватьПоКоличествуДанных Тогда
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.КоличествоЭлементов, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов, 0, Строка, Контекст);
		Иначе
			Свойства = СвойстваСписков.Получить(Строка.Список);
			ЗаполнитьЗначенияСвойств(Свойства, ОписаниеОбновления);
			Если Контекст.ЭтоПовторноеОбновлениеПрогресса Тогда
				СтрокиОбновленияКоличестваЭлементов.Добавить(Строка);
				СтрокиОбновленияКоличестваОбработанныхЭлементов.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СпискиОбновленияКлючейДоступа = РезультатыЗапроса[2].Выгрузить();
	ОбъектыМетаданныхПоИдентификаторам =
		Справочники.ИдентификаторыОбъектовМетаданных.ОбъектыМетаданныхПоИдентификаторам(
			СпискиОбновленияКлючейДоступа.ВыгрузитьКолонку("Список"), Истина);
	
	Для Каждого ОписаниеОбновления Из СпискиОбновленияКлючейДоступа Цикл
		ОбъектМетаданных = ОбъектыМетаданныхПоИдентификаторам.Получить(ОписаниеОбновления.Список);
		Строка = СтрокиСписков.Получить(ОписаниеОбновления.Список);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
			Если УдаляемыеСтроки.Найти(Строка) = Неопределено Тогда
				УдаляемыеСтроки.Добавить(Строка);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Строка.ИмяТаблицы) Тогда
			Строка.ИмяТаблицы = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		Если Не Контекст.РассчитыватьПоКоличествуДанных Тогда
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.КоличествоКлючейДоступа, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа, 0, Строка, Контекст);
		Иначе
			Свойства = СвойстваСписков.Получить(Строка.Список);
			ЗаполнитьЗначенияСвойств(Свойства, ОписаниеОбновления);
			Если Контекст.ЭтоПовторноеОбновлениеПрогресса Тогда
				СтрокиОбновленияКоличестваКлючейДоступа.Добавить(Строка);
				СтрокиОбновленияКоличестваОбработанныхКлючейДоступа.Добавить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		СтрокиСписков.Удалить(УдаляемаяСтрока.Список);
		СвойстваСписков.Удалить(УдаляемаяСтрока.Список);
		Индекс = Контекст.ДобавленныеСтроки.Найти(УдаляемаяСтрока);
		Если Индекс <> Неопределено Тогда
			Контекст.ДобавленныеСтроки.Удалить(Индекс);
			Продолжить;
		КонецЕсли;
		Контекст.УдаленныеСтроки.Вставить(УдаляемаяСтрока.Список, Истина);
	КонецЦикла;
	
	Индекс = Контекст.ДобавленныеСтроки.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если Не ЗначениеЗаполнено(Контекст.ДобавленныеСтроки[Индекс].ИмяТаблицы) Тогда
			Контекст.ДобавленныеСтроки.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если Не Контекст.ЭтоПовторноеОбновлениеПрогресса Тогда
		Для Каждого ОписаниеСтроки Из СтрокиСписков Цикл
			СтрокиОбновленияКоличестваЭлементов.Добавить(ОписаниеСтроки.Значение);
			СтрокиОбновленияКоличестваОбработанныхЭлементов.Добавить(ОписаниеСтроки.Значение);
			СтрокиОбновленияКоличестваКлючейДоступа.Добавить(ОписаниеСтроки.Значение);
			СтрокиОбновленияКоличестваОбработанныхКлючейДоступа.Добавить(ОписаниеСтроки.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КоличествоКлючей = РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Количество");
	Если Контекст.ЭтоПовторноеОбновлениеПрогресса
	   И Контекст.ХранимыеДанные.КоличествоКлючей <> КоличествоКлючей Тогда
		
		Для Каждого ОписаниеСтроки Из СтрокиСписков Цикл
			Если СтрокиОбновленияКоличестваКлючейДоступа.Найти(ОписаниеСтроки.Значение) = Неопределено Тогда
				СтрокиОбновленияКоличестваКлючейДоступа.Добавить(ОписаниеСтроки.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Контекст.ХранимыеДанные.КоличествоКлючей = КоличествоКлючей;
	
	Если Контекст.РассчитыватьПоКоличествуДанных Тогда
		ТекущийКонтекст = Новый Структура;
		ТекущийКонтекст.Вставить("ДобавленныеСтроки",                                   Контекст.ДобавленныеСтроки);
		ТекущийКонтекст.Вставить("ИзмененныеСтроки",                                    Контекст.ИзмененныеСтроки);
		ТекущийКонтекст.Вставить("СвойстваСписков",                                     СвойстваСписков);
		ТекущийКонтекст.Вставить("ДействующиеПараметры",                                ДействующиеПараметры);
		ТекущийКонтекст.Вставить("СтрокиОбновленияКоличестваЭлементов",                 СтрокиОбновленияКоличестваЭлементов);
		ТекущийКонтекст.Вставить("СтрокиОбновленияКоличестваОбработанныхЭлементов",     СтрокиОбновленияКоличестваОбработанныхЭлементов);
		ТекущийКонтекст.Вставить("СтрокиОбновленияКоличестваКлючейДоступа",             СтрокиОбновленияКоличестваКлючейДоступа);
		ТекущийКонтекст.Вставить("СтрокиОбновленияКоличестваОбработанныхКлючейДоступа", СтрокиОбновленияКоличестваОбработанныхКлючейДоступа);
		ОбновитьКоличествоЭлементовИКлючейДоступа(ТекущийКонтекст);
	КонецЕсли;
	
	ВсегоКоличество = ИдентификаторыТаблиц.Количество();
	Если СтрокиСписков.Количество() > ВсегоКоличество Тогда
		ВсегоКоличество = СтрокиСписков.Количество();
	КонецЕсли;
	ВсегоОбновлено = (100 + 100) * (ВсегоКоличество - СтрокиСписков.Количество());
	Для Каждого КлючИЗначение Из СтрокиСписков Цикл
		Строка = КлючИЗначение.Значение;
		ВсегоОбновлено = ВсегоОбновлено + Строка.ОбработаноЭлементов + Строка.ОбработаноКлючейДоступа;
	КонецЦикла;
	ВсегоОбновлено = ВсегоОбновлено / 2 / ВсегоКоличество;
	Если ВсегоОбновлено > 100 Тогда
		ВсегоОбновлено = 100;
	КонецЕсли;
	Контекст.ВсегоОбновлено = Цел(ВсегоОбновлено);
	
	ВремяОбновления = ТекущаяДатаСеанса() - ДатаНачалаОбновленияПрогресса;
	
	Если Контекст.ЭтоПовторноеОбновлениеПрогресса
	   И ВремяОбновления > Контекст.ПериодОбновленияПрогресса Тогда
		
		Контекст.ПериодОбновленияПрогресса = ВремяОбновления;
	Иначе
		Контекст.Удалить("ПериодОбновленияПрогресса");
	КонецЕсли;
	
	Если Не Контекст.ЭтоПовторноеОбновлениеПрогресса И ВремяОбновления > 60 Тогда
		Контекст.АвтообновлениеПрогресса = Ложь;
	Иначе
		Контекст.Удалить("АвтообновлениеПрогресса");
	КонецЕсли;
	
	Включено = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(
		Метаданные.РегламентныеЗадания.ОбновлениеДоступаНаУровнеЗаписей);
	
	Если Не Включено И Контекст.ВсегоОбновлено < 100 Тогда
		Контекст.Вставить("РегламентноеЗаданиеОтключено");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Контекст, АдресРезультата);
	
КонецПроцедуры

Функция НоваяСтрокаСписка(Контекст, Список, ИмяТаблицы)
	
	Строка = Новый Структура;
	Строка.Вставить("Список", Список);
	Строка.Вставить("СписокПредставление", Строка(Список));
	Строка.Вставить("ИмяТаблицы", ИмяТаблицы);
	Строка.Вставить("ПозицияОбновления", "");
	Строка.Вставить("ОбработаноЭлементов", 0);
	Строка.Вставить("ОбработаноКлючейДоступа", 0);
	Строка.Вставить("КоличествоЭлементов", 0);
	Строка.Вставить("КоличествоОбработанныхЭлементов", 0);
	Строка.Вставить("КоличествоКлючейДоступа", 0);
	Строка.Вставить("КоличествоОбработанныхКлючейДоступа", 0);
	
	Контекст.ХранимыеДанные.СтрокиСписков.Вставить(Список, Строка);
	Контекст.ДобавленныеСтроки.Добавить(Строка);
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДатаПоследнегоОбновленногоЭлемента", '00010101');
	Свойства.Вставить("ПоследнийОбновленныйЭлемент", Неопределено);
	Свойства.Вставить("Контекст", Неопределено);
	
	Свойства.Вставить("ДатаПоследнегоОбновленногоЭлементаДляВнешнихПользователей", '00010101');
	Свойства.Вставить("ПоследнийОбновленныйЭлементДляВнешнихПользователей", Неопределено);
	Свойства.Вставить("КонтекстДляВнешнихПользователей", Неопределено);
	
	Контекст.ХранимыеДанные.СвойстваСписков.Вставить(Список, Свойства);
	
	Возврат Строка;
	
КонецФункции

Процедура ОбновитьКоличествоЭлементовИКлючейДоступа(Контекст)
	
	Запрос = Новый Запрос;
	Индекс = 0;
	ТекстПакетаЗапросов = "";
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваЭлементов Цикл
		ДобавитьТекстЗапросаКоличестваЭлементов(Запрос, Строка, Индекс);
	КонецЦикла;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваОбработанныхЭлементов Цикл
		ДобавитьТекстЗапросаКоличестваОбработанныхЭлементов(Запрос, Строка, Индекс, Контекст, Ложь);
		ДобавитьТекстЗапросаКоличестваОбработанныхЭлементов(Запрос, Строка, Индекс, Контекст, Истина);
	КонецЦикла;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваКлючейДоступа Цикл
		ДобавитьТекстЗапросаКоличестваКлючейДоступа(Запрос, Строка, Индекс);
	КонецЦикла;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваОбработанныхКлючейДоступа Цикл
		ДобавитьТекстЗапросаКоличестваОбработанныхКлючейДоступа(Запрос, Строка, Индекс, Контекст, Ложь);
		ДобавитьТекстЗапросаКоличестваОбработанныхКлючейДоступа(Запрос, Строка, Индекс, Контекст, Истина);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Индекс = 0;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваЭлементов Цикл
		Выборка = РезультатыЗапроса[Индекс].Выбрать();
		ОбновитьЗначениеВСтроке(Строка.КоличествоЭлементов,
			?(Выборка.Следующий(), Выборка.Количество, 0), Строка, Контекст);
		Если Строка.КоличествоЭлементов = 0 Тогда
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов, 100, Строка, Контекст);
		Иначе
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов,
				Цел(Строка.КоличествоОбработанныхЭлементов / Строка.КоличествоЭлементов * 100), Строка, Контекст);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваОбработанныхЭлементов Цикл
		Если Строка.КоличествоЭлементов = 0 Тогда
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов, 100, Строка, Контекст);
			Индекс = Индекс + 2;
		Иначе
			КоличествоОбработанныхЭлементов = 0;
			СвойстваСписка = Контекст.СвойстваСписков.Получить(Строка.Список);
			Для ВидПользователей = 0 По 1 Цикл
				ПоследнийОбновленныйЭлемент = СвойстваСписка["ПоследнийОбновленныйЭлемент"
					+ ?(ВидПользователей = 0, "", "ДляВнешнихПользователей")];
				Если ПоследнийОбновленныйЭлемент = Неопределено Тогда
					КоличествоОставшихсяЭлементов = 0;
				Иначе
					Выборка = РезультатыЗапроса[Индекс].Выбрать();
					КоличествоОставшихсяЭлементов = ?(Выборка.Следующий(), Выборка.Количество, 0);
				КонецЕсли;
				Если ТипЗнч(КоличествоОставшихсяЭлементов) = Тип("Число") Тогда
					КоличествоОбработанныхЭлементов = КоличествоОбработанныхЭлементов
						+ (Строка.КоличествоЭлементов - КоличествоОставшихсяЭлементов) / 2;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов,
				Цел(КоличествоОбработанныхЭлементов), Строка, Контекст);
			Если Строка.КоличествоОбработанныхЭлементов > Строка.КоличествоЭлементов Тогда
				ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхЭлементов,
					Строка.КоличествоЭлементов, Строка, Контекст);
			КонецЕсли;
			ОбновитьЗначениеВСтроке(Строка.ОбработаноЭлементов,
				Цел(Строка.КоличествоОбработанныхЭлементов / Строка.КоличествоЭлементов * 100), Строка, Контекст);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваКлючейДоступа Цикл
		Выборка = РезультатыЗапроса[Индекс].Выбрать();
		ОбновитьЗначениеВСтроке(Строка.КоличествоКлючейДоступа,
			?(Выборка.Следующий(), Выборка.Количество, 0), Строка, Контекст);
		Если Строка.КоличествоКлючейДоступа = 0 Тогда
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа, 100, Строка, Контекст);
		Иначе
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа,
				Цел(Строка.КоличествоОбработанныхКлючейДоступа / Строка.КоличествоКлючейДоступа * 100), Строка, Контекст);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Для Каждого Строка Из Контекст.СтрокиОбновленияКоличестваОбработанныхКлючейДоступа Цикл
		Если Строка.КоличествоКлючейДоступа = 0 Тогда
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа, 0, Строка, Контекст);
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа, 100, Строка, Контекст);
			Индекс = Индекс + 2;
		Иначе
			КоличествоОбработанныхКлючейДоступа = 0;
			СвойстваСписка = Контекст.СвойстваСписков.Получить(Строка.Список);
			Для ВидПользователей = 0 По 1 Цикл
				ПоследнийКлючДоступа = СвойстваСписка["Контекст"
					+ ?(ВидПользователей = 0, "", "ДляВнешнихПользователей")];
				Если ПоследнийКлючДоступа = Неопределено Тогда
					КоличествоОставшихсяКлючейДоступа = 0;
				Иначе
					Выборка = РезультатыЗапроса[Индекс].Выбрать();
					КоличествоОставшихсяКлючейДоступа = ?(Выборка.Следующий(), Выборка.Количество, 0);
				КонецЕсли;
				Если ТипЗнч(КоличествоОставшихсяКлючейДоступа) = Тип("Число") Тогда
					КоличествоОбработанныхКлючейДоступа = КоличествоОбработанныхКлючейДоступа
						+ (Строка.КоличествоКлючейДоступа - КоличествоОставшихсяКлючейДоступа) / 2;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа,
				Цел(КоличествоОбработанныхКлючейДоступа), Строка, Контекст);
			Если Строка.КоличествоОбработанныхКлючейДоступа > Строка.КоличествоКлючейДоступа Тогда
				ОбновитьЗначениеВСтроке(Строка.КоличествоОбработанныхКлючейДоступа,
					Строка.КоличествоКлючейДоступа, Строка, Контекст);
			КонецЕсли;
			ОбновитьЗначениеВСтроке(Строка.ОбработаноКлючейДоступа,
				Цел(Строка.КоличествоОбработанныхКлючейДоступа / Строка.КоличествоКлючейДоступа * 100), Строка, Контекст);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗначениеВСтроке(СтароеЗначение, НовоеЗначение, Строка, Контекст)
	
	Если СтароеЗначение = НовоеЗначение Тогда
		Возврат;
	КонецЕсли;
	СтароеЗначение = НовоеЗначение;
	
	Если Контекст.ДобавленныеСтроки.Найти(Строка) = Неопределено
	   И Контекст.ИзмененныеСтроки.Получить(Строка) = Неопределено Тогда
		
		Контекст.ИзмененныеСтроки.Вставить(Строка.Список, Строка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаКоличестваЭлементов(Запрос, Строка, Индекс)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	&ТекущаяТаблица КАК ТекущаяТаблица";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", Строка.ИмяТаблицы);
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Индекс = Индекс + 1;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаКоличестваОбработанныхЭлементов(Запрос, Строка, Индекс, Контекст, ДляВнешнихПользователей)
	
	СвойстваСписка = Контекст.СвойстваСписков.Получить(Строка.Список);
	СпискиСДатой = Контекст.ДействующиеПараметры.СпискиСДатой;
	
	Если ДляВнешнихПользователей Тогда
		ДатаПоследнегоОбновленногоЭлемента = СвойстваСписка.ДатаПоследнегоОбновленногоЭлементаДляВнешнихПользователей;
		ПоследнийОбновленныйЭлемент        = СвойстваСписка.ПоследнийОбновленныйЭлементДляВнешнихПользователей;
	Иначе
		ДатаПоследнегоОбновленногоЭлемента = СвойстваСписка.ДатаПоследнегоОбновленногоЭлемента;
		ПоследнийОбновленныйЭлемент        = СвойстваСписка.ПоследнийОбновленныйЭлемент;
	КонецЕсли;
	
	Если ТипЗнч(ПоследнийОбновленныйЭлемент) = Тип("ХранилищеЗначения") Тогда
		ПоследнийОбновленныйЭлемент = ПоследнийОбновленныйЭлемент.Получить();
	КонецЕсли;
	
	УсловиеОтбора = "";
	Если ТипЗнч(ПоследнийОбновленныйЭлемент) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ПоследнийОбновленныйЭлемент Цикл
			ИмяПараметра = КлючИЗначение.Ключ + Формат(Индекс, "ЧГ=");
			УсловиеОтбора = ?(УсловиеОтбора = "", "", "
			|	И ТекущаяТаблица." + КлючИЗначение.Ключ + " = &" + ИмяПараметра);
			Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		КонецЦикла;
		
	ИначеЕсли СпискиСДатой.Получить(Строка.ИмяТаблицы) <> Неопределено Тогда
		
		Если ТипЗнч(ДатаПоследнегоОбновленногоЭлемента) = Тип("Дата") Тогда
			ИмяПараметра = "ПоследняяДата" + Формат(Индекс, "ЧГ=");
			УсловиеОтбора = "ТекущаяТаблица.Дата <= &" + ИмяПараметра;
			Запрос.УстановитьПараметр(ИмяПараметра, ДатаПоследнегоОбновленногоЭлемента);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПоследнийОбновленныйЭлемент) Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ПоследнийОбновленныйЭлемент));
		Если ОбъектМетаданных <> Неопределено
		   И ОбъектМетаданных.ПолноеИмя() = Строка.ИмяТаблицы Тогда
			
			ИмяПараметра = "ПоследняяСсылка" + Формат(Индекс, "ЧГ=");
			УсловиеОтбора = "ТекущаяТаблица.Ссылка >= &" + ИмяПараметра;
			Запрос.УстановитьПараметр(ИмяПараметра, ПоследнийОбновленныйЭлемент);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица
		|ГДЕ
		|	&УсловиеОтбора";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", Строка.ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Количество";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Индекс = Индекс + 1;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаКоличестваКлючейДоступа(Запрос, Строка, Индекс)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КлючиДоступа.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.КлючиДоступа КАК КлючиДоступа
	|ГДЕ
	|	КлючиДоступа.Список = &Список";
	
	ИмяПараметра = "СписокКлючей" + Формат(Индекс, "ЧГ=");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Список", "&" + ИмяПараметра);
	Запрос.УстановитьПараметр(ИмяПараметра, Строка.Список);
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Индекс = Индекс + 1;
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаКоличестваОбработанныхКлючейДоступа(Запрос, Строка, Индекс, Контекст, ДляВнешнихПользователей)
	
	СвойстваСписка = Контекст.СвойстваСписков.Получить(Строка.Список);
	Если ДляВнешнихПользователей Тогда
		ПоследнийКлючДоступа = СвойстваСписка.КонтекстДляВнешнихПользователей;
	Иначе
		ПоследнийКлючДоступа = СвойстваСписка.Контекст;
	КонецЕсли;
	Если ТипЗнч(ПоследнийКлючДоступа) = Тип("ХранилищеЗначения") Тогда
		ПоследнийКлючДоступа = ПоследнийКлючДоступа.Получить();
	КонецЕсли;
	
	УсловиеОтбора = "";
	Если ТипЗнч(ПоследнийКлючДоступа) = Тип("СправочникСсылка.КлючиДоступа") Тогда
		ИмяПараметра = "СписокОбработанныхКлючей" + Формат(Индекс, "ЧГ=");
		УсловиеОтбора = "КлючиДоступа.Список = &" + ИмяПараметра;
		Запрос.УстановитьПараметр(ИмяПараметра, Строка.Список);
		
		ИмяПараметра = "ПоследнийКлючДоступа" + Формат(Индекс, "ЧГ=");
		УсловиеОтбора = "ТекущаяТаблица.Ссылка >= &" + ИмяПараметра;
		Запрос.УстановитьПараметр(ИмяПараметра, ПоследнийКлючДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.КлючиДоступа КАК КлючиДоступа
		|ГДЕ
		|	&УсловиеОтбора";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Количество";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса;
	Индекс = Индекс + 1;
	
КонецПроцедуры

Функция ИдентификаторыСписковСОграничением(ДействующиеПараметры)
	
	ДействующиеПараметры = ДействующиеПараметрыОграниченияДоступа(Неопределено);
	
	Списки = Новый Массив;
	Для Каждого ОписаниеВерсии Из ДействующиеПараметры.ВерсииОграниченийСписков Цикл
		Списки.Добавить(ОписаниеВерсии.Ключ);
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(Списки);
	
КонецФункции

Функция ПоследнееОбновлениеДоступа(ТекущееЗначение = Неопределено) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ДатаЗапускаНаСервере",    '00010101');
	Свойства.Вставить("ДатаЗавершенияНаСервере", '00010101');
	Свойства.Вставить("ТекстОшибкиЗавершения",   "");
	Свойства.Вставить("НомерСеанса",             0);
	Свойства.Вставить("НачалоСеанса",            '00010101');
	Свойства.Вставить("ИмяКомпьютера",           "");
	Свойства.Вставить("ИдентификаторФоновогоЗадания",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Если ТипЗнч(ТекущееЗначение) <> Тип("ХранилищеЗначения") Тогда
		Возврат Свойства;
	КонецЕсли;
	
	ТекущиеСвойства = ТекущееЗначение.Получить();
	
	Если ТипЗнч(ТекущиеСвойства) <> Тип("Структура") Тогда
		Возврат Свойства;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Свойства, ТекущиеСвойства);
	
	Возврат Свойства;
	
КонецФункции

Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат ТекущаяДата(); // Тут должна быть ТекущаяДата сервера, т.к. именно она записывается в журнал регистрации.
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Проверят доступна ли загрузка внешних компонент с сайта.
//
// Возвращаемое значение:
//  Булево - признак доступности.
//
Функция ДоступнаЗагрузкаССайта() Экспорт 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда 
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		Возврат МодульПолучениеВнешнихКомпонент.ДоступнаЗагрузкаВнешнихКомпонент();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Разбирает файл компоненты для получения служебной информации о компоненте
//
// Параметры:
//  АдресХранилищаФайла - Строка - адрес хранилища, в котором расположены двоичные данные файла компоненты.
//  ВыполнятьРазборИнфоФайла - Булево - (необязательный) требуется ли дополнительно анализировать
//          данные файла INFO.XML, если он есть.
//  ПараметрыПоискаДополнительнойИнформации - Соответствие - (необязательный)
//          См. ВнешниеКомпонентыКлиент.ПараметрыЗагрузки.
//
// Возвращаемое значение:
//  Структура - состав информации.
//      * Разобрано - Булево - признак успешного разбора компоненты.
//      * Реквизиты - Структура - разобранные реквизиты компоненты.
//          ** Windows_x86 - Булево
//          ** Windows_x86_64 - Булево
//          ** Linux_x86 - Булево
//          ** Linux_x86_64 - Булево
//          ** Windows_x86_Firefox - Булево
//          ** Linux_x86_Firefox - Булево
//          ** Linux_x86_64_Firefox - Булево
//          ** Windows_x86_MSIE - Булево
//          ** Windows_x86_64_MSIE - Булево
//          ** Windows_x86_Chrome - Булево
//          ** Linux_x86_Chrome - Булево
//          ** Linux_x86_64_Chrome - Булево
//          ** MacOS_x86_64_Safari - Булево
//          ** Идентификатор - Строка
//          ** Наименование - Строка
//          ** Версия - Строка
//          ** ДатаВерсии - Дата
//          ** ИмяФайла - Строка
//      * ДвоичныеДанные - ДвоичныеДанные - выгрузка файла компоненты.
//      * ДополнительнаяИнформация - Соответствие - информация, полученная по переданным параметрам поиска.
//      * ОписаниеОшибки - Строка - текст ошибки, в случае, если не разобрано.
//
Функция ИнформацияОКомпоненте(АдресХранилищаФайла, ВыполнятьРазборИнфоФайла = Истина, 
	Знач ПараметрыПоискаДополнительнойИнформации = Неопределено) Экспорт
	
	Если ПараметрыПоискаДополнительнойИнформации = Неопределено Тогда 
		ПараметрыПоискаДополнительнойИнформации = Новый Соответствие;
	КонецЕсли;
	
	// Значения заполнения по умолчанию.
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Windows_x86", Ложь);
	Реквизиты.Вставить("Windows_x86_64", Ложь);
	Реквизиты.Вставить("Linux_x86", Ложь);
	Реквизиты.Вставить("Linux_x86_64",  Ложь);
	Реквизиты.Вставить("Windows_x86_Firefox", Ложь);
	Реквизиты.Вставить("Linux_x86_Firefox", Ложь);
	Реквизиты.Вставить("Linux_x86_64_Firefox", Ложь);
	Реквизиты.Вставить("Windows_x86_MSIE", Ложь);
	Реквизиты.Вставить("Windows_x86_64_MSIE", Ложь);
	Реквизиты.Вставить("Windows_x86_Chrome", Ложь);
	Реквизиты.Вставить("Linux_x86_Chrome", Ложь);
	Реквизиты.Вставить("Linux_x86_64_Chrome", Ложь);
	Реквизиты.Вставить("MacOS_x86_64_Safari", Ложь);
	Реквизиты.Вставить("Идентификатор", Неопределено);
	Реквизиты.Вставить("Наименование", Неопределено);
	Реквизиты.Вставить("Версия", Неопределено);
	Реквизиты.Вставить("ДатаВерсии", Неопределено);
	Реквизиты.Вставить("ИмяФайла", Неопределено);
	
	// Дополнительная запрашиваемая информация.
	ДополнительнаяИнформация = Новый Соответствие;
	
	// Получение и загрузка двоичных данных компоненты.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	
	// Очищаем выделенную память в хранилище
	УдалитьИзВременногоХранилища(АдресХранилищаФайла);
	
	// Контроль соответствия компоненты.
	НайденМанифест = Ложь;
	
	// Разбор данных архива компоненты.
	Попытка
		Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
		ЧтениеАрхива = Новый ЧтениеZipФайла(Поток);
	Исключение
		ТекстОшибки = НСтр("ru = 'В файле отсутствует информация о компоненте.'");
		
		Результат = РезультатРазбораКомпоненты();
		Результат.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Результат;
	КонецПопытки;
	
	ВременныйКаталог = ОбщегоНазначения.СоздатьВременныйКаталог("ExtComp");
	
	Для Каждого ЭлементАрхива Из ЧтениеАрхива.Элементы Цикл
		
		Если ЭлементАрхива.Зашифрован Тогда
			
			// Очищаем временные файлы и освобождаем память.
			ОбщегоНазначения.УдалитьВременныйКаталог(ВременныйКаталог);
			ЧтениеАрхива.Закрыть();
			Поток.Закрыть();
			
			ТекстОшибки = НСтр("ru = 'ZIP-архив не должен быть зашифрован.'");
			
			Результат = РезультатРазбораКомпоненты();
			Результат.ОписаниеОшибки = ТекстОшибки;
			
			Возврат Результат;
			
		КонецЕсли;
		
		Попытка
			
			// Поиск и разбор манифеста.
			Если НРег(ЭлементАрхива.ИсходноеПолноеИмя) = "manifest.xml" Тогда
				
				Реквизиты.ДатаВерсии = ЭлементАрхива.ВремяИзменения;
				
				ЧтениеАрхива.Извлечь(ЭлементАрхива, ВременныйКаталог);
				ВременныйФайлXML = ВременныйКаталог + ПолучитьРазделительПути() + ЭлементАрхива.ПолноеИмя;
				РазобратьМанифестКомпоненты(ВременныйФайлXML, Реквизиты);
				
				НайденМанифест = Истина;
				
			КонецЕсли;
			
			Если НРег(ЭлементАрхива.ИсходноеПолноеИмя) = "info.xml" И ВыполнятьРазборИнфоФайла Тогда
				
				ЧтениеАрхива.Извлечь(ЭлементАрхива, ВременныйКаталог);
				ВременныйФайлXML = ВременныйКаталог + ПолучитьРазделительПути() + ЭлементАрхива.ПолноеИмя;
				РазобратьИнфоКомпоненты(ВременныйФайлXML, Реквизиты);
				
			КонецЕсли;
			
			Для Каждого ПараметрПоиска Из ПараметрыПоискаДополнительнойИнформации Цикл 
				
				ИмяФайлаXML = ПараметрПоиска.Значение.ИмяФайлаXML;
				
				Если ЭлементАрхива.ИсходноеПолноеИмя = ИмяФайлаXML Тогда 
					
					КлючДополнительнойИнформации = ПараметрПоиска.Ключ;
					ВыражениеXPath = ПараметрПоиска.Значение.ВыражениеXPath;
					
					ЧтениеАрхива.Извлечь(ЭлементАрхива, ВременныйКаталог);
					ВременныйФайлXML = ВременныйКаталог + ПолучитьРазделительПути() + ЭлементАрхива.ПолноеИмя;
					
					ДокументDOM = ДокументDOM(ВременныйФайлXML);
					ЗначениеXPath = ВычислитьВыражениеXPath(ВыражениеXPath, ДокументDOM);
					
					ДополнительнаяИнформация.Вставить(КлючДополнительнойИнформации, ЗначениеXPath);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
			Результат = РезультатРазбораКомпоненты();
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при разборе файла %1
				           |%2'"),
				ЭлементАрхива.ИсходноеПолноеИмя,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			Возврат Результат;
		КонецПопытки;
	КонецЦикла;
	
	// Очищаем временные файлы и освобождаем память.
	ОбщегоНазначения.УдалитьВременныйКаталог(ВременныйКаталог);
	ЧтениеАрхива.Закрыть();
	Поток.Закрыть();
	
	// Контроль соответствия компоненты.
	Если Не НайденМанифест Тогда 
		ТекстОшибки = НСтр("ru = 'В архиве компоненты отсутствует обязательный файл MANIFEST.XML.'");
		
		Результат = РезультатРазбораКомпоненты();
		Результат.ОписаниеОшибки = ТекстОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат = РезультатРазбораКомпоненты();
	Результат.Разобрано = Истина;
	Результат.Реквизиты = Реквизиты;
	Результат.ДвоичныеДанные = ДвоичныеДанные;
	Результат.ДополнительнаяИнформация = ДополнительнаяИнформация;
	
	Возврат Результат;
	
КонецФункции

#Область ОбработчикиСобытийПодсистемКонфигурации

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами.
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.ВнешниеКомпоненты.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Справочники.ВнешниеКомпоненты);
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхГлавному.
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеКомпоненты") Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриОтправкеДанныхПодчиненному.
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеКомпоненты") Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтГлавного.
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеКомпоненты") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

// См. СтандартныеПодсистемыСервер.ПриПолученииДанныхОтПодчиненного.
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВнешниеКомпоненты") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает ссылку на справочник внешней компоненты по идентификатору и версии.
//
// Параметры:
//  Идентификатор - Строка - идентификатор объекта внешнего компонента.
//  Версия        - Строка - (необязательный) версия компоненты.
//
// Возвращаемое значение:
//  СправочникСсылка.ВнешниеКомпоненты - ссылка на контейнер внешней компоненты в информационной базе.
//
Функция СсылкаПоИдентификатору(Идентификатор, Версия = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Если Версия = Неопределено Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВнешниеКомпоненты.Идентификатор КАК Идентификатор,
			|	МАКСИМУМ(ВнешниеКомпоненты.ДатаВерсии) КАК ДатаВерсии
			|ПОМЕСТИТЬ ВТ_МаксимальнаяВерсияКомпоненты
			|ИЗ
			|	Справочник.ВнешниеКомпоненты КАК ВнешниеКомпоненты
			|ГДЕ
			|	ВнешниеКомпоненты.Идентификатор = &Идентификатор
			|
			|СГРУППИРОВАТЬ ПО
			|	ВнешниеКомпоненты.Идентификатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВнешниеКомпоненты.Ссылка КАК Ссылка,
			|	ВнешниеКомпоненты.Использование КАК Использование
			|ИЗ
			|	ВТ_МаксимальнаяВерсияКомпоненты КАК ВТ_МаксимальнаяВерсияКомпоненты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВнешниеКомпоненты КАК ВнешниеКомпоненты
			|		ПО (ВнешниеКомпоненты.Идентификатор = ВТ_МаксимальнаяВерсияКомпоненты.Идентификатор)
			|			И ВТ_МаксимальнаяВерсияКомпоненты.ДатаВерсии = ВнешниеКомпоненты.ДатаВерсии";
	Иначе 
		Запрос.УстановитьПараметр("Версия", Версия);
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВнешниеКомпоненты.Ссылка КАК Ссылка,
			|	ВнешниеКомпоненты.Использование КАК Использование
			|ИЗ
			|	Справочник.ВнешниеКомпоненты КАК ВнешниеКомпоненты
			|ГДЕ
			|	ВнешниеКомпоненты.Идентификатор = &Идентификатор
			|	И ВнешниеКомпоненты.Версия = &Версия";
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		Возврат Справочники.ВнешниеКомпоненты.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Использование = Перечисления.ВариантыИспользованияВнешнихКомпонент.Отключена Тогда
		ВызватьИсключение НСтр("ru = 'Внешняя компонента отключена.
		                             |Необходимо обратиться к администратору.'");
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

// Выполняется в длительной операции.
// Выполняет подготовку компоненты к подключению и возвращает информацию для проверки 
// совместимости компоненты на клиенте.
// В случае отсутствия компоненты, выполняет ее получение средствами подсистемы интернет поддержки.
// Компонента помещается во временное хранилище до завершения сеанса,
// Для оптимизации памяти после попытки подключения рекомендуется выполнить очистку хранилища.
//
// Параметры:
//  Параметры - Структура - параметры подготовки.
//      * Идентификатор - Строка               - идентификатор объекта внешнего компонента.
//      * Версия        - Строка, Неопределено - версия компоненты. 
//
//  АдресРезультата - Строка - Адрес в хранилище с результатом.
//      * Структура - информация о компоненте 
//          * Подготовлена   - Булево - признак отсутствия компоненты.
//          * ОписаниеОшибки - Строка - краткое описание ошибки.
//          * Местоположение - Строка - временное хранилище двоичных данных ZIP-архива компоненты.
//
Процедура ПодготовитьКомпонентуКПодключению(Параметры, АдресРезультата) Экспорт
	
	Идентификатор = Параметры.Идентификатор;
	Версия        = Параметры.Версия;
	
	Ссылка = СсылкаПоИдентификатору(Идентификатор, Версия);
	Если Ссылка.Пустая() Тогда 
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда 
		
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ВнешниеКомпонентыВМоделиСервиса") Тогда
				
				МодульВнешниеКомпоненты = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыВМоделиСервисаСлужебный");
				Результат = МодульВнешниеКомпоненты.ПолучениеСлужебнойИнформацииОКомпоненте(Идентификатор, Версия);
				
				ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Если ДоступнаЗагрузкаССайта() Тогда
			
				Ссылка = НоваяКомпонентаССайта(Идентификатор, Версия);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ссылка.Пустая() Тогда
	
		ТекстОшибки = НСтр("ru = 'Требуется загрузить внешнюю компоненту в информационную базу.
		                         |Рекомендуем обратиться к администратору.'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление внешних компонент'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Windows_x86");
	Результат.Вставить("Windows_x86_64");
	Результат.Вставить("Linux_x86");
	Результат.Вставить("Linux_x86_64");
	Результат.Вставить("Windows_x86_Firefox");
	Результат.Вставить("Linux_x86_Firefox");
	Результат.Вставить("Linux_x86_64_Firefox");
	Результат.Вставить("Windows_x86_MSIE");
	Результат.Вставить("Windows_x86_64_MSIE");
	Результат.Вставить("Windows_x86_Chrome");
	Результат.Вставить("Linux_x86_Chrome");
	Результат.Вставить("Linux_x86_64_Chrome");
	Результат.Вставить("MacOS_x86_64_Safari");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Результат);
	
	ЗаполнитьЗначенияСвойств(Результат, Реквизиты);
	
	Местоположение = ПолучитьНавигационнуюСсылку(Ссылка, "ХранилищеКомпоненты");
	Результат.Вставить("Местоположение", Местоположение);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура РазобратьМанифестКомпоненты(ФайлXML, Реквизиты)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);
	
	ЧтениеXML.ПерейтиКСодержимому();
	Если ЧтениеXML.Имя = "bundle" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.Имя = "component" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ОперационнаяСистема  = НРег(ЧтениеXML.ЗначениеАтрибута("os"));
				ТипКомпоненты        = НРег(ЧтениеXML.ЗначениеАтрибута("type"));
				АрхитектураПлатформы = НРег(ЧтениеXML.ЗначениеАтрибута("arch"));
				ПрограммаПросмотра   = НРег(ЧтениеXML.ЗначениеАтрибута("client"));
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "i386"
					И (ТипКомпоненты = "native" Или ТипКомпоненты = "com") Тогда 
					
					Реквизиты.Windows_x86 = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "x86_64"
					И (ТипКомпоненты = "native" Или ТипКомпоненты = "com") Тогда 
					
					Реквизиты.Windows_x86_64 = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "i386"
					И ТипКомпоненты = "native" Тогда 
					
					Реквизиты.Linux_x86 = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "x86_64"
					И ТипКомпоненты = "native" Тогда 
					
					Реквизиты.Linux_x86_64 = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "i386"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "firefox" Тогда
					
					Реквизиты.Windows_x86_Firefox = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "i386" 
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "firefox" Тогда
					
					Реквизиты.Linux_x86_Firefox = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "x86_64"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "firefox" Тогда
					
					Реквизиты.Linux_x86_64_Firefox = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "i386"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "msie" Тогда
					
					Реквизиты.Windows_x86_MSIE = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "x86_64"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "msie" Тогда
					
					Реквизиты.Windows_x86_64_MSIE = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "windows" И АрхитектураПлатформы = "i386"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "chrome" Тогда
					
					Реквизиты.Windows_x86_Chrome = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "i386"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "chrome" Тогда
					
					Реквизиты.Linux_x86_Chrome = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "linux" И АрхитектураПлатформы = "x86_64"
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "chrome" Тогда
					
					Реквизиты.Linux_x86_64_Chrome = Истина;
					Продолжить;
				КонецЕсли;
				
				Если ОперационнаяСистема = "macos" 
					И (АрхитектураПлатформы = "x86_64" Или АрхитектураПлатформы = "universal")
					И ТипКомпоненты = "plugin" И ПрограммаПросмотра = "safari" Тогда 
					
					Реквизиты.MacOS_x86_64_Safari = Истина;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

Процедура РазобратьИнфоКомпоненты(ФайлXML, Реквизиты)
	
	ИнфоРазобран = Ложь;
	
	// Пытаемся разобрать по формату БПО.
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлXML);
	
	ЧтениеXML.ПерейтиКСодержимому();
	Если ЧтениеXML.Имя = "drivers" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "component" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				Идентификатор = ЧтениеXML.ЗначениеАтрибута("progid");
				
				Реквизиты.Идентификатор = Сред(Идентификатор, СтрНайти(Идентификатор, ".") + 1);
				Реквизиты.Наименование  = ЧтениеXML.ЗначениеАтрибута("name");
				Реквизиты.Версия        = ЧтениеXML.ЗначениеАтрибута("version");
				
				ИнфоРазобран = Истина;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	
	Если Не ИнфоРазобран Тогда
		
		// Пытаемся разобрать по формату БЭД.
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ФайлXML);
	
		info = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Реквизиты.Идентификатор = info.progid;
		Реквизиты.Наименование = info.name;
		Реквизиты.Версия = info.version;
		
		ЧтениеXML.Закрыть();
	
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM)
	
	ЗначениеXPath = Неопределено;
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	
	УзелРезультата = РезультатXPath.ПолучитьСледующий();
	Если ТипЗнч(УзелРезультата) = Тип("АтрибутDOM") Тогда 
		ЗначениеXPath = УзелРезультата.Значение;
	КонецЕсли;
	
	Возврат ЗначениеXPath
	
КонецФункции

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Функция РезультатРазбораКомпоненты()
	
	Результат = Новый Структура;
	Результат.Вставить("Разобрано", Ложь);
	Результат.Вставить("Реквизиты", Новый Структура);
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ДополнительнаяИнформация", Новый Соответствие);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеКомпоненты(Идентификатор, Версия) Экспорт
	
	Если ЗначениеЗаполнено(Версия) Тогда 
		ПредставлениеКомпоненты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (версии %2)'"), 
			Идентификатор, 
			Версия);
	Иначе 
		ПредставлениеКомпоненты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 (последней версии)'"), 
			Идентификатор, 
			Версия);
	КонецЕсли;
	
	Возврат ПредставлениеКомпоненты;
	
КонецФункции

#Область ЗагрузкаССайта

Функция НоваяКомпонентаССайта(Идентификатор, Версия = Неопределено)
	
	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
	
	ОписаниеВнешнихКомпонент  = МодульПолучениеВнешнихКомпонент.ОписаниеВнешнихКомпонент();
	ОписаниеВнешнейКомпоненты = ОписаниеВнешнихКомпонент.Добавить();
	ОписаниеВнешнейКомпоненты.Идентификатор = Идентификатор;
	ОписаниеВнешнейКомпоненты.Версия        = Версия;
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		РезультатОперации = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	Иначе
		РезультатОперации = МодульПолучениеВнешнихКомпонент.ВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ТекстИсключения = ?(Пользователи.ЭтоПолноправныйПользователь(),
			РезультатОперации.ИнформацияОбОшибке,
			РезультатОперации.СообщениеОбОшибке);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если РезультатОперации.ДанныеВнешнихКомпонент.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'На Портале 1С:ИТС внешняя компонента не обнаружена.'");
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление внешних компонент'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстИсключения);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СтрокаРезультата = РезультатОперации.ДанныеВнешнихКомпонент[0]; // Фокусировка на первой строке результата.
	
	КодОшибки = СтрокаРезультата.КодОшибки;
	
	Если ЗначениеЗаполнено(КодОшибки) Тогда
		
		ИнформацияОбОшибке = "";
		Если КодОшибки = "ОтсутствуетКомпонента" Тогда 
			ИнформацияОбОшибке = НСтр("ru = 'В сервисе внешних компонент не обнаружена внешняя компонента'");
		ИначеЕсли КодОшибки = "ФайлНеЗагружен" Тогда 
			ИнформацияОбОшибке = НСтр("ru = 'При попытке загрузить файл внешней компоненты из сервиса, возникла ошибка'");
		ИначеЕсли КодОшибки = "АктуальнаяВерсия" Тогда
			ИнформацияОбОшибке = 
				НСтр("ru = 'Скорее всего произошла ошибка сервера при загрузке компоненты.
				           |Получен код ошибки: АктуальнаяВерсия, однако в ИБ компоненты не обнаружено.'");
		КонецЕсли;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При загрузке внешней компоненты %1 возникала ошибка:
			           |%2'"),
			ПредставлениеКомпоненты(Идентификатор, Версия),
			ИнформацияОбОшибке);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление внешних компонент'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Информация = ИнформацияОКомпоненте(СтрокаРезультата.АдресФайла, Ложь);
	
	Если Не Информация.Разобрано Тогда 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление внешних компонент'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , Информация.ОписаниеОшибки);
		ВызватьИсключение Информация.ОписаниеОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создание экземпляра компоненты.
	Объект = Справочники.ВнешниеКомпоненты.СоздатьЭлемент();
	Объект.Заполнить(Неопределено); // Конструктор по умолчанию.
	
	ЗаполнитьЗначенияСвойств(Объект, Информация.Реквизиты); // По данным манифеста.
	ЗаполнитьЗначенияСвойств(Объект, СтрокаРезультата);     // По данным с сайта.
	
	Объект.ДополнительныеСвойства.Вставить("ДвоичныеДанныеКомпоненты", Информация.ДвоичныеДанные);
	
	НачатьТранзакцию();
	Попытка
		
		// Если это компонента последней версии, то устанавливаем ОбновлятьССайта.
		Если Версия = Неопределено Тогда // Если изначальный запрос конкретной версии - пропускаем.
			
			// Запрос требуется для контроля наличия компоненты старшей версии с отключенным обновлением.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВнешниеКомпоненты.ДатаВерсии) КАК ДатаВерсии
				|ИЗ
				|	Справочник.ВнешниеКомпоненты КАК ВнешниеКомпоненты
				|ГДЕ
				|	ВнешниеКомпоненты.Идентификатор = &Идентификатор";
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ЭтоМаксимальнаяВерсия = (Выборка.ДатаВерсии = Null) Или (Выборка.ДатаВерсии = Объект.ДатаВерсии);
			
			Объект.ОбновлятьСПортала1СИТС = ЭтоМаксимальнаяВерсия;
			
		КонецЕсли;
		
		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление внешних компонент'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Объект.Ссылка;
	
КонецФункции

// Выполняется в длительной операции.
// Вызывается из формы элемента и списка.
//
Процедура ОбновитьКомпонентыССайта(МассивСсылок, АдресРезультата) Экспорт
	
	Если Не ДоступнаЗагрузкаССайта() Тогда
		ВызватьИсключение 
			НСтр("ru = 'Обновление внешних компонент не доступно.
			           |Требуется подсистема обновления внешних компонент библиотеки интернет поддержки.'");
	КонецЕсли;
	
	ОписаниеВнешнихКомпонент = ВнешниеКомпонентыСервер.АвтоматическиОбновляемыеКомпоненты(МассивСсылок);
	МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
	РезультатОперации = МодульПолучениеВнешнихКомпонент.АктуальныеВерсииВнешнихКомпонент(ОписаниеВнешнихКомпонент);
	
	Если ЗначениеЗаполнено(РезультатОперации.КодОшибки) Тогда
		ТекстИсключения = ?(Пользователи.ЭтоПолноправныйПользователь(),
			РезультатОперации.ИнформацияОбОшибке,
			РезультатОперации.СообщениеОбОшибке);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ВнешниеКомпонентыСервер.ОбновитьВнешниеКомпоненты(РезультатОперации.ДанныеВнешнихКомпонент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


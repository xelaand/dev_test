
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	ИнициализироватьРеквизитыФормы();
	
	ИнициализироватьСвойстваФормы();
	
	УстановитьНачальноеОтображениеЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьТаблицуЭтаповНастройки();
	ОбновитьОтображениеТекущегоСостоянияНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УзелОбмена)
		Или Не НастройкаСинхронизацииЗавершена(УзелОбмена)
		Или (НастройкаРИБ И Не ПродолжениеНастройкиВПодчиненномУзлеРИБ И Не НачальныйОбразСоздан(УзелОбмена))Тогда
		ТекстПредупреждения = НСтр("ru = 'Настройка синхронизации данных еще не завершена.
		|Завершить работу с помощником? Настройку можно будет продолжить позже.'");
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияПроизвольнойФормы(
			ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, "ЗакрытьФормуБезусловно");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		Оповестить("Запись_УзелПланаОбмена");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияРезервноеКопированиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РезервноеКопирование Тогда
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаОбработкиРезервногоКопирования);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодробноеОписаниеСинхронизацииДанных(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(ПодробнаяИнформацияПоОбмену);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключения(Команда)
	
	Если Не НастройкаНовойСинхронизации Тогда
		Если МодельСервиса Тогда
			СтрокаПредупреждение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Настройка подключения к ""%1"" уже выполнена.
				|Редактирование параметров подключения не предусмотрено.'"), УзелОбмена);
			ПоказатьПредупреждение(, СтрокаПредупреждение);
			Возврат;
		Иначе
			Отбор              = Новый Структура("Корреспондент", УзелОбмена);
			ЗначенияЗаполнения = Новый Структура("Корреспондент", УзелОбмена);
			
			ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор,
				ЗначенияЗаполнения, "НастройкиТранспортаОбменаДанными", ЭтотОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("ИмяПланаОбмена",         ИмяПланаОбмена);
	ПараметрыПомощника.Вставить("ИдентификаторНастройки", ИдентификаторНастройки);
	Если ПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		ПараметрыПомощника.Вставить("ПродолжениеНастройкиВПодчиненномУзлеРИБ");
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьПараметрыПодключенияЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаПодключения",
		ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПравилаОтправкиИПолученияДанных(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("НастроитьПравилаОтправкиИПолученияДанныхПродолжение", ЭтотОбъект);
	
	// Для плана обмена XDTO перед настройкой правил выгрузки и загрузки
	// должны быть получены настройки корреспондента.
	Если НастройкаXDTO Тогда
		СостояниеНастройки = СостояниеНастройкиСинхронизации(УзелОбмена);
		Если Не СостояниеНастройки.НастройкаСинхронизацииЗавершена
			И Не СостояниеНастройки.ПолученыНастройкиXDTOКорреспондента Тогда
			
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("УзелОбмена", УзелОбмена);
			
			ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ЗагрузкаНастроекXDTO",
				ПараметрыЗагрузки, ЭтотОбъект, , , , ОповещениеПродолжения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеПродолжения, "Успешно");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачальныйОбразРИБ(Команда)
	
	ПараметрыПомощника = Новый Структура("Ключ, Узел", УзелОбмена, УзелОбмена);
			
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СоздатьНачальныйОбразРИБЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИмяФормыСозданияНачальногоОбраза,
		ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставлениеИЗагрузкуДанных(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(УзелОбмена, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальнуюВыгрузкуДанных(Команда)
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("УзелОбмена", УзелОбмена);
	ПараметрыПомощника.Вставить("НачальнаяВыгрузка");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНачальнуюВыгрузкуДанныхЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ВыгрузкаДанныхДляСопоставления",
		ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	РасписаниеВыполненияОбменаДанными = ПредопределенноеРасписаниеКаждыйЧас();
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеВыполненияОбменаДанными);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СостояниеНастройкиСинхронизации(УзелОбмена)
	
	Результат = Новый Структура;
	Результат.Вставить("НастройкаСинхронизацииЗавершена",           НастройкаСинхронизацииЗавершена(УзелОбмена));
	Результат.Вставить("НачальныйОбразСоздан",                      НачальныйОбразСоздан(УзелОбмена));
	Результат.Вставить("ПолученоСообщениеСДаннымиДляСопоставления", ПолученоСообщениеСДаннымиДляСопоставления(УзелОбмена));
	Результат.Вставить("ПолученыНастройкиXDTOКорреспондента",       ПолученыНастройкиXDTOКорреспондента(УзелОбмена));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолученоСообщениеСДаннымиДляСопоставления(УзелОбмена)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СообщенияДляСопоставленияДанных.ПолученоСообщениеДляСопоставленияДанных КАК ПолученоСообщениеДляСопоставленияДанных
	|ИЗ
	|	#ТаблицаПланаОбмена КАК ТаблицаПланаОбмена
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СообщенияДляСопоставленияДанных КАК СообщенияДляСопоставленияДанных
	|		ПО (СообщенияДляСопоставленияДанных.УзелИнформационнойБазы = ТаблицаПланаОбмена.Ссылка)
	|ГДЕ
	|	ТаблицаПланаОбмена.Ссылка = &УзелОбмена");
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбмена);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПланаОбмена", "ПланОбмена." + ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена));
	
	ОбменДаннымиСервер.ПолучитьСообщенияДляСопоставленияДанных(Запрос.МенеджерВременныхТаблиц);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПолученоСообщениеДляСопоставленияДанных;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолученыНастройкиXDTOКорреспондента(УзелОбмена)
	
	НастройкиКорреспондента = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФорматаКорреспондента(УзелОбмена, "ОтправкаПолучение");
	
	Возврат НастройкиКорреспондента.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция НачальныйОбразСоздан(УзелОбмена)
	
	Возврат РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.НачальныйОбразСоздан(УзелОбмена);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждыйЧас()
	
	Возврат Обработки.ПомощникСозданияОбменаДанными.ПредопределенноеРасписаниеКаждыйЧас();
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьСценарийОбменаДаннымиПоРасписанию(УзелОбмена, Расписание)
	
	Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелОбмена, Расписание);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПодключенияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		УзелОбмена = РезультатЗакрытия;
		Если ТекущийЭтапНастройки = "НастройкаПодключения" Тогда
			ПерейтиКСледующемуЭтапуНастройки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПравилаОтправкиИПолученияДанныхПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = "Успешно" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПомощника = Новый Структура;
	
	Если ПустаяСтрока(ИмяФормыПомощникаНастройкиСинхронизацииДанных) Тогда
		ПараметрыПомощника.Вставить("Ключ", УзелОбмена);
		ПараметрыПомощника.Вставить("ИмяФормыПомощника", "ПланОбмена.[ИмяПланаОбмена].ФормаОбъекта");
		
		ПараметрыПомощника.ИмяФормыПомощника = СтрЗаменить(ПараметрыПомощника.ИмяФормыПомощника,
			"[ИмяПланаОбмена]", ИмяПланаОбмена);
	Иначе
		ПараметрыПомощника.Вставить("УзелОбмена", УзелОбмена);
		ПараметрыПомощника.Вставить("ИмяФормыПомощника", ИмяФормыПомощникаНастройкиСинхронизацииДанных);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьПравилаОтправкиИПолученияДанныхЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ПараметрыПомощника.ИмяФормыПомощника,
		ПараметрыПомощника, ЭтотОбъект, , , , ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПравилаОтправкиИПолученияДанныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТекущийЭтапНастройки = "НастройкаПравил"
		И НастройкаСинхронизацииЗавершена(УзелОбмена) Тогда
		Оповестить("Запись_УзелПланаОбмена");
		ПерейтиКСледующемуЭтапуНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачальныйОбразРИБЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТекущийЭтапНастройки = "НачальныйОбразРИБ"
		И НачальныйОбразСоздан(УзелОбмена) Тогда
		ПерейтиКСледующемуЭтапуНастройки();
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНачальнуюВыгрузкуДанныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТекущийЭтапНастройки = "НачальнаяВыгрузкаДанных"
		И РезультатЗакрытия = УзелОбмена Тогда
		ПерейтиКСледующемуЭтапуНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		СоздатьСценарийОбменаДаннымиПоРасписанию(УзелОбмена, Расписание);
		
		Если ТекущийЭтапНастройки = "НастройкаРасписания" Тогда
			ПерейтиКСледующемуЭтапуНастройки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеТекущегоСостоянияНастройки()
	
	Если ПустаяСтрока(ТекущийЭтапНастройки) Тогда
		// Все этапы завершены.
		Для Каждого ЭтапНастройки Из ЭтапыНастройки Цикл
			Элементы["Группа" + ЭтапНастройки.Название].Доступность = Истина;
			Элементы[ЭтапНастройки.Кнопка].Шрифт = ЭтапНастройки.ШрифтОбычный;
			
			// Зеленый флажок только для основных этапов настройки.
			Если ВсеЭтапыНастройки[ЭтапНастройки.Название] = "Основное" Тогда
				Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Успешно"];
			Иначе
				Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Пустой"];
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекущийЭтапНайден = Ложь;
		Для Каждого ЭтапНастройки Из ЭтапыНастройки Цикл
			
			Если ВсеЭтапыНастройки[ЭтапНастройки.Название] = "Основное" Тогда
				Если ЭтапНастройки.Название = ТекущийЭтапНастройки Тогда
					Элементы["Группа" + ЭтапНастройки.Название].Доступность = Истина;
					Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Текущий"];
					Элементы[ЭтапНастройки.Кнопка].Шрифт = ЭтапНастройки.ШрифтЖирный;
					ТекущийЭтапНайден = Истина;
				ИначеЕсли Не ТекущийЭтапНайден Тогда
					Элементы["Группа" + ЭтапНастройки.Название].Доступность = Истина;
					Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Успешно"];
					Элементы[ЭтапНастройки.Кнопка].Шрифт = ЭтапНастройки.ШрифтОбычный;
				Иначе
					Элементы["Группа" + ЭтапНастройки.Название].Доступность = Ложь;
					Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Пустой"];
					Элементы[ЭтапНастройки.Кнопка].Шрифт = ЭтапНастройки.ШрифтОбычный;
				КонецЕсли;
			Иначе
				Элементы["Группа" + ЭтапНастройки.Название].Доступность = Ложь;
				Элементы["Панель" + ЭтапНастройки.Название].ТекущаяСтраница = Элементы["Страница" + ЭтапНастройки.Название + "Пустой"];
				Элементы[ЭтапНастройки.Кнопка].Шрифт = ЭтапНастройки.ШрифтОбычный;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСледующемуЭтапуНастройки()
	
	СледующаяСтрока = Неопределено;
	ТекущийЭтапНайден = Ложь;
	Для Каждого СтрокаЭтапыНастройки Из ЭтапыНастройки Цикл
		Если ТекущийЭтапНайден Тогда
			СледующаяСтрока = СтрокаЭтапыНастройки;
			Прервать;
		КонецЕсли;
		
		Если СтрокаЭтапыНастройки.Название = ТекущийЭтапНастройки Тогда
			ТекущийЭтапНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СледующаяСтрока <> Неопределено Тогда
		ТекущийЭтапНастройки = СледующаяСтрока.Название;
		Если ВсеЭтапыНастройки[ТекущийЭтапНастройки] <> "Основное" Тогда
			ТекущийЭтапНастройки = "";
		КонецЕсли;
	Иначе
		ТекущийЭтапНастройки = "";
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОтображениеТекущегоСостоянияНастройки", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаСинхронизацииЗавершена(УзелОбмена)
	
	Возврат ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелОбмена);
	
КонецФункции

#Область ИнициализацияФормыПриСоздании

&НаСервере
Процедура ИнициализироватьСвойстваФормы()
	
	Если ПустаяСтрока(ЗаголовокПомощникаСозданияОбмена) Тогда
		Если НастройкаРИБ Тогда
			Заголовок = НСтр("ru = 'Настройка распределенной информационной базы'");
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Настройка синхронизации данных с ""%1""'"),
				НаименованиеКонфигурацииКорреспондента);
		КонецЕсли;
	Иначе
		Заголовок = ЗаголовокПомощникаСозданияОбмена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	НастройкаНовойСинхронизации = Параметры.Свойство("НастройкаНовойСинхронизации");
	
	Если НастройкаНовойСинхронизации Тогда
		ИмяПланаОбмена         = Параметры.ИмяПланаОбмена;
		ИдентификаторНастройки = Параметры.ИдентификаторНастройки;
		
		ПродолжениеНастройкиВПодчиненномУзлеРИБ = Параметры.Свойство("ПродолжениеНастройкиВПодчиненномУзлеРИБ");
		
		Если Не ПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
			Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
				ИмяПланаОбменаРИБ = ОбменДаннымиСервер.ГлавныйУзел().Метаданные().Имя;
				
				ПродолжениеНастройкиВПодчиненномУзлеРИБ = (ИмяПланаОбмена = ИмяПланаОбменаРИБ)
					И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить();
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
			ОбменДаннымиСервер.ПриПродолженииНастройкиПодчиненногоУзлаРИБ();
			УзелОбмена = ОбменДаннымиСервер.ГлавныйУзел();
		КонецЕсли;
	Иначе
		УзелОбмена = Параметры.УзелОбмена;
		
		ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбмена);
		ИдентификаторНастройки = ОбменДаннымиСервер.СохраненныйВариантНастройкиУзлаПланаОбмена(УзелОбмена);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелОбмена) Тогда
		НастройкаЗавершена = НастройкаСинхронизацииЗавершена(УзелОбмена);
	КонецЕсли;
	
	МодельСервиса = ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		
	РезервноеКопирование = Не МодельСервиса
		И Не ПродолжениеНастройкиВПодчиненномУзлеРИБ
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ");
		
	Если РезервноеКопирование Тогда
		МодульРезервноеКопированиеИБСервер = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеИБСервер");
		
		НавигационнаяСсылкаОбработкиРезервногоКопирования =
			МодульРезервноеКопированиеИБСервер.НавигационнаяСсылкаОбработкиРезервногоКопирования();
	КонецЕсли;
		
	НастройкаРИБ  = ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена);
	НастройкаXDTO = ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена);
	
	Если Не НастройкаНовойСинхронизации Тогда
		ВидТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.ВидТранспортаСообщенийОбменаПоУмолчанию(УзелОбмена);
		Если ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.COM
			Или ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WS
			Или ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена.WSПассивныйРежим Тогда
			ПолученыДанныеДляСопоставления = ПолученоСообщениеСДаннымиДляСопоставления(УзелОбмена);
		Иначе
			ПолученыДанныеДляСопоставления = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияНастроекДляВарианта = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена,
		"НаименованиеКонфигурацииКорреспондента,
		|КраткаяИнформацияПоОбмену,
		|ЗаголовокПомощникаСозданияОбмена,
		|ПодробнаяИнформацияПоОбмену,
		|ИмяФормыСозданияНачальногоОбраза,
		|ИмяФормыПомощникаНастройкиСинхронизацииДанных",
		ИдентификаторНастройки);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияНастроекДляВарианта);
	
	Если ПустаяСтрока(ИмяФормыСозданияНачальногоОбраза)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		ИмяФормыСозданияНачальногоОбраза = "ОбщаяФорма.[ФормаСозданияНачальногоОбраза]";
		ИмяФормыСозданияНачальногоОбраза = СтрЗаменить(ИмяФормыСозданияНачальногоОбраза,
			"[ФормаСозданияНачальногоОбраза]", "СозданиеНачальногоОбразаСФайлами");
	КонецЕсли;
	
	ТекущийЭтапНастройки = "";
	Если НастройкаНовойСинхронизации Тогда
		ТекущийЭтапНастройки = "НастройкаПодключения";
	Иначе
		Если Не НастройкаСинхронизацииЗавершена(УзелОбмена) Тогда
			ТекущийЭтапНастройки = "НастройкаПравил";
		ИначеЕсли НастройкаРИБ
			И Не ПродолжениеНастройкиВПодчиненномУзлеРИБ
			И Не НачальныйОбразСоздан(УзелОбмена) Тогда
			Если Не ПустаяСтрока(ИмяФормыСозданияНачальногоОбраза) Тогда
				ТекущийЭтапНастройки = "НачальныйОбразРИБ";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВсеЭтапыНастройки = Новый Структура;
	ВсеЭтапыНастройки.Вставить("НастройкаПодключения",    "Основное");
	ВсеЭтапыНастройки.Вставить("НастройкаПравил",         "Основное");
	ВсеЭтапыНастройки.Вставить("НачальныйОбразРИБ",       "Основное");
	ВсеЭтапыНастройки.Вставить("СопоставлениеИЗагрузка",  "Основное");
	ВсеЭтапыНастройки.Вставить("НачальнаяВыгрузкаДанных", "Основное");
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьЭтапНастройки(Название, Кнопка)
	
	СтрокаЭтап = ЭтапыНастройки.Добавить();
	СтрокаЭтап.Название     = Название;
	СтрокаЭтап.Кнопка       = Кнопка;
	СтрокаЭтап.ШрифтОбычный = Новый Шрифт(Элементы[Кнопка].Шрифт);
	СтрокаЭтап.ШрифтЖирный  = Новый Шрифт(СтрокаЭтап.ШрифтОбычный, , , Истина);
	
	Возврат СтрокаЭтап;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуЭтаповНастройки()
	
	ЭтапыНастройки.Очистить();
	
	ДобавитьЭтапНастройки("НастройкаПодключения", "НастроитьПараметрыПодключения");
	ДобавитьЭтапНастройки("НастройкаПравил", "НастроитьПравилаОтправкиИПолучения");
	
	Если НастройкаРИБ
		И Не ПродолжениеНастройкиВПодчиненномУзлеРИБ
		И Не ПустаяСтрока(ИмяФормыСозданияНачальногоОбраза) Тогда
		ДобавитьЭтапНастройки("НачальныйОбразРИБ", "СоздатьНачальныйОбразРИБ");
	КонецЕсли;
		
	Если Не НастройкаРИБ Тогда
		ДобавитьЭтапНастройки("НачальнаяВыгрузкаДанных", "ВыполнитьНачальнуюВыгрузкуДанных");
	КонецЕсли;
	
	Если Не НастройкаРИБ
		И ПолученыДанныеДляСопоставления Тогда
		ДобавитьЭтапНастройки("СопоставлениеИЗагрузка", "ВыполнитьСопоставлениеИЗагрузкуДанных");
	КонецЕсли;
	
	// Видимость элементов настройки.
	Для Каждого ЭтапНастройки Из ВсеЭтапыНастройки Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Группа" + ЭтапНастройки.Ключ,
			"Видимость",
			ЭтапыНастройки.НайтиСтроки(Новый Структура("Название", ЭтапНастройки.Ключ)).Количество() > 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальноеОтображениеЭлементовФормы()
	
	Элементы.ДекорацияКраткаяИнформацияПоОбменуНадпись.Заголовок = КраткаяИнформацияПоОбмену;
	Элементы.ГруппаРезервноеКопирование.Видимость = РезервноеКопирование;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
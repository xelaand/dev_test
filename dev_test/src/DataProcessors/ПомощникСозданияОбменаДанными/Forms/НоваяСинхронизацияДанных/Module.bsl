#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКомандыСозданияНовогоОбмена();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаПараметровТранспортаОбменаДанными(Команда)
	
	СтрокиКоманды = КомандыСозданияОбмена.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
		
	Если СтрокиКоманды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("ИмяПланаОбмена",         СтрокиКоманды[0].ИмяПланаОбмена);
	ПараметрыПомощника.Вставить("ИдентификаторНастройки", СтрокиКоманды[0].ИдентификаторНастройки);
	ПараметрыПомощника.Вставить("НастройкаНовойСинхронизации");
	
	КлючУникальностиПомощника = ПараметрыПомощника.ИмяПланаОбмена + "_" + ПараметрыПомощника.ИдентификаторНастройки;
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаСинхронизации", ПараметрыПомощника, , КлючУникальностиПомощника);
	
	Закрыть();
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДобавитьКомандыСозданияНовогоОбмена()
	
	КомандыСозданияОбмена.Очистить();
	
	ТаблицаНастройки = Неопределено;
	Обработки.ПомощникСозданияОбменаДанными.ПриПолученииДоступныхНастроекСинхронизацииДанных(ТаблицаНастройки, Истина);
	
	НаименованияКонфигураций = Новый Соответствие;
	Для Каждого СтрокаНастройки Из ТаблицаНастройки Цикл
		Если СтрокаНастройки.ЭтоПланОбменаРаспределеннойИнформационнойБазы Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованияКонфигураций.Вставить(СтрокаНастройки.ИмяКонфигурацииКорреспондента,
			СтрокаНастройки.НаименованиеКонфигурацииКорреспондента);
	КонецЦикла;
	
	ТаблицаНастройки.Сортировать("ЭтоПланОбменаXDTO");
	
	ТаблицаКонфигурации = ТаблицаНастройки.Скопировать(,
		"ИмяКонфигурацииКорреспондента, ЭтоПланОбменаРаспределеннойИнформационнойБазы");
	ТаблицаКонфигурации.Свернуть("ИмяКонфигурацииКорреспондента, ЭтоПланОбменаРаспределеннойИнформационнойБазы");
	
	НомерКонфигурации = 0;
	Для Каждого СтрокаКонфигурация Из ТаблицаКонфигурации Цикл
		
		НомерКонфигурации = НомерКонфигурации + 1;
		
		Отбор = Новый Структура("ИмяКонфигурацииКорреспондента, ЭтоПланОбменаРаспределеннойИнформационнойБазы");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаКонфигурация);
		
		СтрокиНастройки = ТаблицаНастройки.НайтиСтроки(Отбор);
		
		Если СтрокиНастройки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РодительскаяГруппа = Неопределено;
		
		Если СтрокаКонфигурация.ЭтоПланОбменаРаспределеннойИнформационнойБазы Тогда
			РодительскаяГруппа = Элементы.ГруппаОбменРИБ;
		Иначе
			РодительскаяГруппа = Элементы.ГруппаОбменДругиеПрограммы;
		КонецЕсли;
		
		НомерНастройки = 0;
		Для Каждого СтрокаНастройки Из СтрокиНастройки Цикл
			
			НомерНастройки = НомерНастройки + 1;
			
			ГруппаВариант = Элементы.Добавить("ГруппаКонфигурация" + НомерКонфигурации + "Настройка" + НомерНастройки,
				Тип("ГруппаФормы"), РодительскаяГруппа);
			ГруппаВариант.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаВариант.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаВариант.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаВариант.ОтображатьЗаголовок = Ложь;
			
			ИмяКоманды = "КомандаКонфигурация" + НомерКонфигурации + "Настройка" + НомерНастройки;
			
			СоздатьКомандуИЭлементФормы(ИмяКоманды,
				СтрокаНастройки.ЗаголовокКомандыДляСозданияНовогоОбменаДанными,
				ГруппаВариант,
				СтрокаНастройки.КраткаяИнформацияПоОбмену);
				
			СтрокаКоманды = КомандыСозданияОбмена.Добавить();
			СтрокаКоманды.ИмяКоманды             = ИмяКоманды;
			СтрокаКоманды.ИдентификаторНастройки = СтрокаНастройки.ИдентификаторНастройки;
			СтрокаКоманды.ИмяПланаОбмена         = СтрокаНастройки.ИмяПланаОбмена;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьНастройкиСинхронизацииДанных(Отказ = Ложь)
	
	ТекстСообщения = "";
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			МодульОбменДаннымиВМоделиСервисаПовтИсп = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиВМоделиСервисаПовтИсп");
			Если Не МодульОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		 		ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'В неразделенном режиме настройка синхронизации данных с другими программами недоступна.'");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		СписокПлановОбмена = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
		Если СписокПлановОбмена.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Возможность настройки синхронизации данных в данной программе не предусмотрена.'");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ
		И Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКомандуИЭлементФормы(ИмяКоманды, Заголовок, Родитель, Подсказка)
	
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = Заголовок;
	Команда.Действие  = "НастройкаПараметровТранспортаОбменаДанными";
	Команда.Подсказка = Подсказка;
	
	КнопкаКоманды = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Родитель);
	КнопкаКоманды.ИмяКоманды = ИмяКоманды;
	КнопкаКоманды.Вид = ВидКнопкиФормы.Гиперссылка;
	КнопкаКоманды.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	КнопкаКоманды.АвтоМаксимальнаяШирина = Ложь;
	КнопкаКоманды.РасширеннаяПодсказка.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

#КонецОбласти
// Форма параметризуется:
//
//      Заголовок     - Строка  - заголовок формы.
//      ЗначенияПолей - Строка  - сериализованное значение контактной информации или пустая строка для 
//                                ввода нового.
//      Представление - Строка  - представление адреса (используется только при работе со старыми данными).
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - описание того, что мы
//                                редактируем.
//      Комментарий  - Строка   - необязательный комментарий, для подстановки в поле "Комментарий".
//
//      ВозвращатьСписокЗначений - Булево - необязательный флаг того, что возвращаемое значение поля.
//                                 КонтактнаяИнформация будет иметь тип СписокЗначений (совместимость).
//
//  Результат выбора:
//      Структура - поля:
//          * КонтактнаяИнформация   - Строка - XML контактной информации.
//          * Представление          - Строка - Представление.
//          * Комментарий            - Строка - Комментарий.
//          * ВведеноВСвободнойФорме - Булево - флаг ввода.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ОткрытаПоСценарию") Тогда
		ВызватьИсключение НСтр("ru = 'Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	// Настройки формы
	СведенияОАдресномКлассификаторе = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.СведенияОДоступностиАдресногоКлассификатора();
	Если СведенияОАдресномКлассификаторе <> Неопределено Тогда
		ЕстьКлассификатор     = СведенияОАдресномКлассификаторе["ИспользоватьЗагруженные"];
		КлассификаторДоступен = СведенияОАдресномКлассификаторе["КлассификаторДоступен"];
		ВебСервисИспользуется = КлассификаторДоступен;
	Иначе
		ЕстьКлассификатор     = Ложь;
		ВебСервисИспользуется = Ложь;
	КонецЕсли;
	
	Если Не ВебСервисИспользуется И Не ЕстьКлассификатор Тогда
		Элементы.АдресныйКлассификаторУстарел.Видимость = Истина;
	КонецЕсли;
	
	МожноЗагружатьКлассификатор = Обработки.РасширенныйВводКонтактнойИнформации.ЕстьВозможностьИзмененияАдресногоКлассификатора();
	
	Параметры.Свойство("ВозвращатьСписокЗначений", ВозвращатьСписокЗначений);
	
	ОсновнаяСтрана           = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	ВидКонтактнойИнформации  = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	ПриСозданииНаСервереХранитьИсториюИзменений();
	
	Заголовок = ?(ПустаяСтрока(Параметры.Заголовок), ВидКонтактнойИнформации.Наименование, Параметры.Заголовок);
	
	СкрыватьНеактуальныеАдреса  = ВидКонтактнойИнформации.СкрыватьНеактуальныеАдреса;
	ТолькоНациональныйАдрес     = ВидКонтактнойИнформации.ТолькоНациональныйАдрес;
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	МеждународныйФорматАдреса   = ВидКонтактнойИнформации.МеждународныйФорматАдреса;
	
	// Пытаемся заполнить из параметров.
	ЗаполнитьПредопределенныеВариантыАдреса(Параметры);
	ЗначенияПолей = ОпределитьЗначениеАдреса(Параметры);
	
	Если ПустаяСтрока(ЗначенияПолей) Тогда
		НаселенныйПунктДетально = УправлениеКонтактнойИнформацией.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес); // Новый адрес
		НаселенныйПунктДетально.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолей) Тогда
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(ЗначенияПолей);
		НаселенныйПунктДетально = РаботаСАдресамиКлиентСервер.АккомодацияСтруктурыАдреса(ДанныеАдреса);
	Иначе
		XDTOКонтактная = ИзвлечьСтарыйФорматАдреса(ЗначенияПолей, ТипКонтактнойИнформации);
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(XDTOКонтактная, ТипКонтактнойИнформации);
		НаселенныйПунктДетально = РаботаСАдресамиКлиентСервер.АккомодацияСтруктурыАдреса(ДанныеАдреса);
	КонецЕсли;
	
	Если МеждународныйФорматАдреса И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
		НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
	КонецЕсли;
	
	УстановитьЗначениеРеквизитовПоКонтактнойИнформации(НаселенныйПунктДетально);
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.Comment) Тогда
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
	Иначе
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Если ТолькоНациональныйАдрес Тогда
		
		Элементы.Страна.Видимость = Ложь;
		Элементы.ОКТМО.Видимость  = ВидКонтактнойИнформации.УказыватьОКТМО;
		
		Если Страна <> ОсновнаяСтрана Тогда
			
			// Считаем адрес российским
			ПредставлениеАдресаИзменено = Истина;
			ТекстПредупрежденияПриОткрытии = НСтр("ru = 'Адрес введен некорректно: допускается ввод только национальных адресов.
			|Значение поля ""Страна"" было изменено на %1, необходимо проверить остальные поля.'");
			ТекстПредупрежденияПриОткрытии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупрежденияПриОткрытии, ОсновнаяСтрана.Наименование);
			ПолеПредупрежденияПриОткрытии              = "СтранаВСвободнойФорме";
			Модифицированность                         = Истина;
			Элементы.Страна.Доступность                = Ложь;
			Элементы.Страна.Видимость                  = Истина;
			Элементы.СтранаВСвободнойФорме.Доступность = Ложь;
		
		КонецЕсли;
		
		Страна = ОсновнаяСтрана;
		НаселенныйПунктДетально.Country = Строка(Страна);
		
		
		
	ИначеЕсли МеждународныйФорматАдреса Тогда
		
		Элементы.ПроверитьЗаполнениеАдреса.Видимость             = Ложь;
		Элементы.АдресныйКлассификаторУстарел.Видимость          = Ложь;
		Элементы.МуниципальноеДеление.Видимость                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Видимость = Ложь;
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость           = Ложь;
		Элементы.ЗагрузитьКлассификатор.Видимость                = Ложь;
		Элементы.СтраницаТипАдреса.Видимость                     = Ложь;
		
	КонецЕсли;
	
	ОпределитьОтображениеЭлементовНаФорме();
	
	ДоступностьКлассификатора = Неопределено;
	
	УстановитьКлючИспользованияФормы();
	СформироватьМенюДобавленияСтроенийИПомещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстПредупрежденияПриОткрытии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежденияПриОткрытии,, ПолеПредупрежденияПриОткрытии);
	КонецЕсли;
	
	ОтобразитьПоляПоТипуАдреса();
	ОбновитьМенюДобавленияСтроенийИПомещений();
	ПоказатьПодсказкуПоТипАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "АдресныйКлассификаторАктуализирован" ИЛИ ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		Если ЕстьКлассификатор И СведенияОРегионе(НаселенныйПунктДетально.Area + " " + НаселенныйПунктДетально.AreaType).Загружен = Истина Тогда
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисДоступен;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	
	Если Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
		
		КоличествоПолейПредыдущийТипАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь).Количество();
		
		Если РаботаСАдресамиКлиентСервер.ЭтоОсновнаяСтрана(Страна) Тогда
			НаселенныйПунктДетально.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		ИначеЕсли ЭтоСтранаУчастникЕАЭС(Страна) Тогда
			НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресЕАЭС();
		Иначе
			НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
		КонецЕсли;
		
		КоличествоПолейНовыйТипАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь).Количество();
		Если КоличествоПолейПредыдущийТипАдреса > КоличествоПолейНовыйТипАдреса Тогда
			ПеренестиЗначенияПолейАдресВПоляНовогоТипа();
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобразитьПоляПоТипуАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗначенияПолейАдресВПоляНовогоТипа()
	
	ИменаВсехУровней = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса("Все", Ложь);
	СведенияАдреса = Новый Массив;
	Для каждого ИмяУровня Из ИменаВсехУровней Цикл
		Если НаселенныйПунктДетально.Свойство(ИмяУровня) И ЗначениеЗаполнено(НаселенныйПунктДетально[ИмяУровня]) Тогда
			Сведения = Новый Структура("Наименование, Сокращение, Представление");
			Сведения.Наименование  = НаселенныйПунктДетально[ИмяУровня];
			Сведения.Сокращение    = НаселенныйПунктДетально[ИмяУровня + "Type"];
			Сведения.Представление = СокрЛП(Сведения.Наименование + " " + Сведения.Сокращение);
			СведенияАдреса.Добавить(Сведения);
			
			НаселенныйПунктДетально[ИмяУровня]          = "";
			НаселенныйПунктДетально[ИмяУровня + "Type"] = "";
		КонецЕсли;
	КонецЦикла;
	
	ИменаУровнейНовогоТипа = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
	ИмяУровня = ИменаУровнейНовогоТипа.Получить(0);
	Разделитель = "";
	Для Счетчик = 0 По СведенияАдреса.Количество() - 1 Цикл
		
		Если ИменаУровнейНовогоТипа.Количество() > Счетчик + 1 Тогда
			ИмяУровня = ИменаУровнейНовогоТипа.Получить(Счетчик);
			НаселенныйПунктДетально[ИмяУровня]          = СведенияАдреса.Получить(Счетчик).Наименование;
			НаселенныйПунктДетально[ИмяУровня + "Type"] = СведенияАдреса.Получить(Счетчик).Сокращение;
		Иначе
			НаселенныйПунктДетально[ИмяУровня] = НаселенныйПунктДетально[ИмяУровня] + Разделитель + СведенияАдреса.Получить(Счетчик).Представление;
			Разделитель = ", ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоИностранныйАдрес(НаселенныйПунктДетально.AddressType) 
		 И НаселенныйПунктДетально.Свойство("Street") Тогда
		
		СписокДомовИСтроений = Новый Массив;
		Если НаселенныйПунктДетально.Свойство("HouseNumber") И ЗначениеЗаполнено(НаселенныйПунктДетально["HouseType"]) Тогда
			СписокДомовИСтроений.Добавить(СокрЛП(НаселенныйПунктДетально["HouseType"] + " №" + НаселенныйПунктДетально["HouseNumber"]));
			НаселенныйПунктДетально["HouseNumber"]  = "";
			НаселенныйПунктДетально["HouseType"]    = "";
		КонецЕсли;
		
		Если НаселенныйПунктДетально.Свойство("Buildings") И ТипЗнч(НаселенныйПунктДетально["Buildings"]) = Тип("Массив") Тогда
			Для каждого СтроениеВАдресе Из НаселенныйПунктДетально["Buildings"] Цикл
				СписокДомовИСтроений.Добавить(СокрЛП(СтроениеВАдресе["Type"] + " " + СтроениеВАдресе["Number"]));
			КонецЦикла;
			НаселенныйПунктДетально["Buildings"] = Новый Массив;
		КонецЕсли;
		
		Если НаселенныйПунктДетально.Свойство("Apartments") И ТипЗнч(НаселенныйПунктДетально["Apartments"]) = Тип("Массив") Тогда
			Для каждого ПомещениеВАдресе Из НаселенныйПунктДетально["Apartments"] Цикл
				СписокДомовИСтроений.Добавить(СокрЛП(ПомещениеВАдресе["Type"] + " " + ПомещениеВАдресе["Number"]));
			КонецЦикла;
			НаселенныйПунктДетально["Apartments"] = Новый Массив;
		КонецЕсли;
		
		Если СписокДомовИСтроений.Количество() > 0 Тогда
			СписокДомовИСтроений.Вставить(0, СокрЛП(НаселенныйПунктДетально["Street"] + " " + НаселенныйПунктДетально["StreetType"]));
			НаселенныйПунктДетально["Street"] = СтрСоединить(СписокДомовИСтроений, ", ");
			Улица = НаселенныйПунктДетально["Street"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		// Формирование списка быстрого выбора.
		Если ПустаяСтрока(Текст) Тогда
			ДанныеВыбора = Новый СписокЗначений;
		КонецЕсли;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтранаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
#Если ВебКлиент Тогда
	// Обход особенности платформы.
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора         = Новый СписокЗначений;
	ДанныеВыбора.Добавить(Страна);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СтранаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если СтрДлина(СокрЛП(Текст)) = 6 И СтрСравнить(Индекс, Текст) <> 0 И Страна = ОсновнаяСтрана Тогда
		СтандартнаяОбработка = Ложь;
		НаселенныйПунктДетально.ZipCode = Текст;
		ФормаВыбораУлицПоИндексу(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НаселенныйПунктДетально.ZipCode = Текст;
	Если СтрДлина(СокрЛП(Текст)) = 6 И СтрСравнить(Индекс, Текст) <> 0 И Страна = ОсновнаяСтрана Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбораУлицПоИндексу(Текст);
	Иначе
		Индекс = Текст;
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	НаселенныйПунктДетально.ZipCode = Индекс;
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаКлиенте
Процедура ОКТМОПриИзменении(Элемент)
	НаселенныйПунктДетально.OKTMO = ОКТМО;
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораУлицПоИндексу(Знач Текст)
	
	Модифицированность = Истина;
	Индекс = Текст;
	Если ЕстьКлассификатор Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Индекс", СокрЛП(Текст));
		ПараметрыФормы.Вставить("ВыборАдресаПоПочтовомуИндексу", Истина);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораАдресаПоИндексу", ЭтотОбъект);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоПочтовомуИндексу", ПараметрыФормы, Элементы.Индекс,,,, Оповещение);
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораАдресаПоИндексу(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Отказ Тогда
			Если Результат.Свойство("Индекс") И НЕ ПустаяСтрока(Результат.Индекс) Тогда
				ОбновитьПредставлениеАдреса();
				Возврат;
			Иначе
				Если НЕ ПодборПоИндексуДоступен Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Индекс %1 не найден в адресном классификаторе'"),
						Формат(Результат.Индекс, "ЧРГ=' '; ЧГ=0"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Объект.Индекс");
				Иначе
					ПроверитьДоступностьКлассификатора();
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ОчиститьАдресКлиент();
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ПолученныйАдрес = ОпределитьАдресПоИдентификатору(Результат);
			ЗаполнитьЗначенияСвойств(НаселенныйПунктДетально, ПолученныйАдрес);
			Если ПустаяСтрока(НаселенныйПунктДетально.ZipCode) Тогда
				НаселенныйПунктДетально.ZipCode = Формат(Результат.Индекс,"ЧГ=0");
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаИзмененияАдреса();
		УстановитьФлагиВМенюПоТипуАдреса();
		
		Модифицированность = Истина;
		ТекущийЭлемент = Элементы.Дом;
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	НаселенныйПунктДетально.Comment = Комментарий;
	ПодключитьОбработчикОжидания("УстановитьПиктограммуКомментария", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДомаПриИзменении(Элемент)
	
	НаселенныйПунктДетально.HouseType = ТипДома;
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseNumber) Тогда
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДомПриИзменении(Элемент)
	
	НаселенныйПунктДетально.HouseNumber = Дом;
	Если ПустаяСтрока(НаселенныйПунктДетально.HouseType) Тогда
		НаселенныйПунктДетально.HouseType = ТипДома;
	КонецЕсли;
	ОбновитьПредставлениеАдреса();

КонецПроцедуры

&НаКлиенте
Процедура ДомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьПоляДомовИСтроений(ВыбранноеЗначение);
		Элементы.Дом.ОбновитьТекстРедактирования();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтроениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;
		ЗаполнитьПоляДомовИСтроений(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияПриИзменении(Элемент)
	
	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		НаселенныйПунктДетально.Buildings[0].Type = ТипСтроения;
	КонецЕсли;
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
	ОбработкаИзмененияАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура СтроениеПриИзменении(Элемент)
	
	ЭтоНовый = Истина;
	Для каждого Помещения Из НаселенныйПунктДетально.Buildings Цикл
		Если СтрСравнить(Помещения.Type, ТипСтроения) = 0 Тогда
			Помещения.Type = ЭтотОбъект["ТипСтроения"];
			ЭтоНовый = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНовый Тогда
		ИнформацияОСтроении = ЗначениеСтроенияИлиПомещения(ТипСтроения, Строение);
		НаселенныйПунктДетально.Buildings.Вставить(0, ИнформацияОСтроении);
	ИначеЕсли ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		Для ИндексПозиции = 0 По НаселенныйПунктДетально.Buildings.Количество() - 1 Цикл
			СведенияОСтроении = НаселенныйПунктДетально.Buildings[ИндексПозиции];
			Если СтрСравнить(СведенияОСтроении.Type, ЭтотОбъект["ТипСтроения"]) =0 Тогда
				НаселенныйПунктДетально.Buildings.Удалить(ИндексПозиции);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура СтроениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст)
		И (ЗначениеЗаполнено(ЭтотОбъект.ИдентификаторНаселенногоПункта)
		ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ИдентификаторУлицы)) Тогда
			Идентификатор = ?(ЗначениеЗаполнено(ИдентификаторУлицы),
				ИдентификаторУлицы, ИдентификаторНаселенногоПункта);

			ДанныеВыбора = СписокАвтоподбораВариантовДомов(Идентификатор, Дом);
			Если ДанныеВыбора.Количество() > 1 Тогда
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипСтроенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Отбор = Новый Структура("Значение", ВыбранноеЗначение);
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].Видимость = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияПриИзменении(Элемент)
	
	Если Элемент.ВыделенныйТекст = НаименованиеПриДобавлениеПроизвольногоПомещения() Тогда
		ЭтотОбъект[Элемент.Имя] = "";
	КонецЕсли;
	
	Если НаселенныйПунктДетально.Apartments.Количество() > 0 Тогда
		НаселенныйПунктДетально.Apartments[0].Type = ТипПомещения;
	КонецЕсли;
	
	Если ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		УдалитьПомещениеИзАдреса(ЭтотОбъект["ТипПомещения"]);
	КонецЕсли;
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
	ОбработкаИзмененияАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	
	Если ПустаяСтрока(ЭтотОбъект[Элемент.Имя]) Тогда
		УдалитьПомещениеИзАдреса(ЭтотОбъект["ТипПомещения"]);
	Иначе
		ИнформацияОПомещении = ЗначениеСтроенияИлиПомещения(ТипПомещения, Помещение);
		Если НаселенныйПунктДетально.Apartments.Количество() = 0 Тогда
			НаселенныйПунктДетально.Apartments.Добавить(ИнформацияОПомещении);
		Иначе
			НаселенныйПунктДетально.Apartments[0] = ИнформацияОПомещении;
		КонецЕсли;
	КонецЕсли;
	ОбработкаИзмененияАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПомещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отбор = Новый Структура("Значение", ВыбранноеЗначение);
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденныеСтроки[0].Видимость = Ложь Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Если ПустаяСтрока(НаселенныйПункт) Тогда
		ОчиститьНаселеныйПункт();
		Возврат;
	КонецЕсли;
	
	Если РаботаСАдресамиКлиентСервер.ЭтоОсновнаяСтрана(Страна) Тогда
		ИменаУровнейАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
	ИначеЕсли ЭтоСтранаУчастникЕАЭС Тогда
		ИменаУровнейАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(УправлениеКонтактнойИнформациейКлиентСервер.АдресЕАЭС(), Ложь);
	Иначе
		ИменаУровнейАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес(), Ложь);
	КонецЕсли;
	
	ЭлементыАдреса = СтрРазделить(НаселенныйПункт, ",", Истина);
	
	Для ИндексАдреса = 0 По ИменаУровнейАдреса.Количество() - 1 Цикл
		Если ЭлементыАдреса.Количество() > 0 Тогда
			ЗначениеПоля = СокрЛП(ЭлементыАдреса[0]);
			Позиция = СтрНайти(ЗначениеПоля, " ", НаправлениеПоиска.СКонца);
			Если Позиция > 0 И НЕ РаботаСАдресамиКлиентСервер.ПредставлениеУровняБезСокращения(ИменаУровнейАдреса[ИндексАдреса]) Тогда
				НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = СокрЛП(Лев(ЗначениеПоля, Позиция));
				НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса] + "Type"] = СокрЛП(Сред(ЗначениеПоля, Позиция +1));
			Иначе
				НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = ЗначениеПоля;
			КонецЕсли;
			ЭлементыАдреса.Удалить(0);
		Иначе
			НаселенныйПунктДетально[ИменаУровнейАдреса[ИндексАдреса]] = "";
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементыАдреса.Количество() > 0 Тогда
		НаселенныйПунктДетально[ИменаУровнейАдреса[ИменаУровнейАдреса.Количество() - 1]] = СокрЛП(СтрСоединить(ЭлементыАдреса, ","));
	КонецЕсли;
	
	ОчиститьИдентификаторыАдреса();
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьНаселеныйПункт();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНаселеныйПункт()
	
	ИдентификаторНаселенногоПункта = Неопределено;
	
	УровниАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(НаселенныйПунктДетально.AddressType, Ложь);
	Для каждого ИмяУровня Из УровниАдреса Цикл
		Если НаселенныйПунктДетально.Свойство(ИмяУровня) Тогда
			НаселенныйПунктДетально[ИмяУровня] = "";
			НаселенныйПунктДетально[ИмяУровня + "Type"] = "";
			НаселенныйПунктДетально[ИмяУровня + "ID"] = "";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем адрес.
	Если Элемент.ТекстРедактирования <> НаселенныйПункт Тогда
		Модифицированность = Истина;
		НаселенныйПункт    = Элемент.ТекстРедактирования;
		
		ИдентификаторНаселенногоПункта = Неопределено;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаселенныйПунктДетально", НаселенныйПунктДетально);
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСведенийНаселенногоПункта", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.НаселенныйПунктАдреса", ПараметрыФормы, Элемент,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСведенийНаселенногоПункта(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаселенныйПунктДетально = Результат;
		ОбработкаИзмененияАдреса();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		НаселенныйПунктУстановитьПоляАдреса(НаселенныйПунктДетально, ВыбранноеЗначение);
	КонецЕсли;
	
	ОбработкаИзмененияАдреса();
	УстановитьФлагиВМенюПоТипуАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаПриИзменении(Элемент)
	
	ЧастиАдреса = СтрРазделить(Улица, " ");
	Если ЧастиАдреса.Количество() > 1 Тогда
		Сокращение = ЧастиАдреса[ЧастиАдреса.Количество() - 1];
		ЧастиАдреса.Удалить(ЧастиАдреса.Количество() - 1);
	Иначе
		Сокращение = "";
	КонецЕсли;
	Наименование = СокрЛП(СтрСоединить(ЧастиАдреса, " "));
	
	НаселенныйПунктДетально.Street     = Наименование;
	НаселенныйПунктДетально.StreetType = Сокращение;
	НаселенныйПунктДетально.StreetID   = "";
	
	ОбновитьПредставлениеАдреса();
	
	УстановитьИдентификаторыАдреса(НаселенныйПунктДетально);
	
КонецПроцедуры

&НаКлиенте
Процедура НаселенныйПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если Не ВебСервисИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ТекстДляАвтоПодбора = СокрЛП(Текст);
	Если СтрДлина(ТекстДляАвтоПодбора) < 3 Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	
	ДанныеВыбора = СписокАвтоподбораНаселенногоПункта(ТекстДляАвтоПодбора);
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем.
	Если Элемент.ТекстРедактирования <> Улица Тогда
		Улица = Элемент.ТекстРедактирования;
	КонецЕсли;
	
	ИдентификаторНаселенногоПункта = РаботаСАдресамиКлиентСервер.ИдентификаторАдреса(НаселенныйПунктДетально, Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Родитель",  ИдентификаторНаселенногоПункта);
	ПараметрыФормы.Вставить("Уровень",   7);
	ПараметрыФормы.Вставить("ТипАдреса", НаселенныйПунктДетально.AddressType);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораУлицы", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоУровню", ПараметрыФормы, ЭтотОбъект,
		,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУлицы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		НаселенныйПунктДетально = ОпределитьАдресПоИдентификатору(Результат);
		ОбработкаИзмененияАдреса();
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Выбор из списка недоступен, т.к в адресном классификаторе отсутствует информация о улицах для введенного адреса.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Страна <> ОсновнаяСтрана Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	
	Если ТипЗначения = Тип("УникальныйИдентификатор") Тогда
		СведенияОбАдресе = Новый Структура("Идентификатор", ВыбранноеЗначение);
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда
		СведенияОбАдресе = ВыбранноеЗначение;
	КонецЕсли;
	
	НаселенныйПунктДетально = ОпределитьАдресПоИдентификатору(СведенияОбАдресе);
	ОбработкаИзмененияАдреса();
	Элементы.Улица.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если Не ВебСервисИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ИдентификаторНаселенногоПункта = РаботаСАдресамиКлиентСервер.ИдентификаторАдреса(НаселенныйПунктДетально, Ложь);
	Если СтрДлина(Текст) < 2 Или Не ЗначениеЗаполнено(ИдентификаторНаселенногоПункта)Тогда
		// Нет вариантов, список пуст, стандартную обработку не надо трогать.
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Идентификатор", ИдентификаторНаселенногоПункта);
	ДополнительныеПараметры.Вставить("ТипАдреса", НаселенныйПунктДетально.AddressType);
	ДополнительныеПараметры.Вставить("Уровень", 7);
	
	ДанныеВыбора = СписокАвтоподбораУлицы(Текст, ДополнительныеПараметры);
	
	// Стандартную обработку отключаем, только если есть наши варианты.
	Если ДанныеВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УлицаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаселенныйПунктДетально.StreetID = "";
	НаселенныйПунктДетально.Street = "";
	НаселенныйПунктДетально.StreetType = "";
	Улица = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИностранногоАдресаПриИзменении(Элемент)
	
	НаселенныйПунктДетально.Value = ПредставлениеАдреса;
	
КонецПроцедуры

// Дом, помещения

&НаКлиенте
Процедура ДомАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ВебСервисИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		Идентификатор = РаботаСАдресамиКлиентСервер.ИдентификаторАдреса(НаселенныйПунктДетально, Истина);
		Если ЗначениеЗаполнено(Идентификатор) Тогда
			ДанныеВыбора = СписокАвтоподбораВариантовДомов(Идентификатор, Текст + "%");
			СтандартнаяОбработка = (ДанныеВыбора.Количество() = 0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаДатуАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если СтрСравнить(Текст, НСтр("ru='начало учета'")) = 0 Или ПустаяСтрока(Текст) Тогда
		Элементы.АдресНаДату.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНаДатуПриИзменении(Элемент)
	
	Если Не ВводНовогоАдреса Тогда
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ссылка);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Результат = ОпределитьДатуДействия(АдресНаДату, НайденныеСтроки);
		
		Если Результат.ТекущаяСтрока <> Неопределено Тогда
			Тип = Результат.ТекущаяСтрока.Тип;
			АдресДействуетС = Результат.ДействуетС;
			НаселенныйПунктДетально = АдресСИсторией(Результат.ТекущаяСтрока.Значение);
		Иначе
			Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес");
			АдресДействуетС = АдресНаДату;
			НаселенныйПунктДетально = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(Тип);
		КонецЕсли;
		
		ОбработкаИзмененияАдреса();
		
		Если ЗначениеЗаполнено(Результат.ДействуетПо) Тогда
			ТекстИсторическийАдрес = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'действует по %1'"), Формат(Результат.ДействуетПо - 10, "ДЛФ=DD"));
		Иначе
			ТекстИсторическийАдрес = НСтр("ru = 'действует по настоящее время.'");
		КонецЕсли;
		Элементы.ТекстПроДатуДействия.Заголовок = ТекстИсторическийАдрес;
	Иначе
		АдресДействуетС = АдресНаДату;
	КонецЕсли;
	
	ТекстНачалаУчета = НСтр("ru = 'начало учета'");
	Элементы.АдресНаДату.ФорматРедактирования = ?(ЗначениеЗаполнено(АдресНаДату), "", "ДФ='""" + ТекстНачалаУчета  + """'");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресСИсторией(ЗначенияПолей)
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(ЗначенияПолей);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаОК(Команда)
	ПодтвердитьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеАдреса(Команда)
	
	Если РазрешитьВводАдресаВСвободнойФорме Тогда
		ПоказатьПредупреждение(, НСтр("ru='Адрес не может быть проверен, так как он введен в свободной форме.'"));
		Возврат;
	КонецЕсли;

	ПредупреждатьОбОтсутствииОшибок = Истина;
	ТребуетсяОбновление = Ложь;
	
	СписокОшибок = СписокОшибокЗаполнения(НаселенныйПунктДетально, ВидКонтактнойИнформации, ПредупреждатьОбОтсутствииОшибок, ТребуетсяОбновление);
	СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствииОшибок, ТребуетсяОбновление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдрес(Команда)
	
	ОчиститьАдресКлиент();
	ОбработкаИзмененияАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПочтовомуИндексу(Команда)
	
	Если ЕстьКлассификатор И СтрДлина(Индекс) = 6 Тогда
		ФормаВыбораУлицПоИндексу(Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификатор(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	
	Если ТипЗнч(НаселенныйПунктДетально) = Тип("Структура") И НаселенныйПунктДетально.Свойство("Area") Тогда
		СведенияОРегионе = СведенияОРегионе(НаселенныйПунктДетально.Area + " " + НаселенныйПунктДетально.AreaType);
		ДополнительныеПараметры.Вставить("КодРегионаДляЗагрузки", СведенияОРегионе.КодСубъектаРФ);
	КонецЕсли;
	
	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиАдресВСвободнойФорме(Команда)
	
	Если Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.НациональныйАдрес Тогда
		ПоказатьАдресВСвободнойФорме();
	Иначе
		Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.НациональныйАдрес;
		Элементы.АдресВСвободнойФорме.Пометка = Ложь;
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
			
			Если РаботаСАдресамиКлиентСервер.ЭтоОсновнаяСтрана(Страна) Тогда
				// Попытка восстановить адрес по полям из представления.
				НаселенныйПунктДетально = КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса);
			Иначе
				НаселенныйПунктДетально.Area = ПредставлениеАдреса;
				Если ЭтоСтранаУчастникЕАЭС(НаселенныйПунктДетально.Country) Тогда
					НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресЕАЭС();
				Иначе
					НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
			
		ОтобразитьВыданныйТипАдреса(НаселенныйПунктДетально.AddressType);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса)
	
	Адрес = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса, Перечисления.ТипыКонтактнойИнформации.Адрес);
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьАдресВСвободнойФорме()
	
	ОчиститьАдресКлиент();
	НаселенныйПунктДетально.Value = ПредставлениеАдреса;
	НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме();
	НаселенныйПунктДетально.Comment = Комментарий;
	НаселенныйПунктДетально.Country = Строка(Страна);
	
	Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.ВСвободнойФорме;
	Элементы.АдресВСвободнойФорме.Пометка                  = Истина;
	Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	Элементы.МуниципальноеДеление.Пометка                  = Ложь;
	НаселенныйПунктДетально.AddressType                    = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме();
	
	ПоказатьПодсказкуПоТипАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователей(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("АвторизацияНаСайтеПоддержкиПользователейЗавершение", ЭтотОбъект);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		МодульИнтернетПоддержкаПользователейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		МодульИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокДомов(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СтроениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокДомов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	ОписаниеДополнительныхРеквизитов = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	СписокКонтактнойИнформации = ЗаполнитьСписокКонтактнойИнформации(ВидКонтактнойИнформации.Ссылка, ОписаниеДополнительныхРеквизитов);
	
	ПараметрыФормы = Новый Структура("СписокКонтактнойИнформации", СписокКонтактнойИнформации);
	ПараметрыФормы.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации.Ссылка);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ИзФормыВводаАдреса", Истина);
	ПараметрыФормы.Вставить("ДействуетС", АдресНаДату);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыИстории", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ИсторияКонтактнойИнформации", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытие);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНаЯндексКарты(Команда)
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ПредставлениеАдреса, "Яндекс.Карты");
КонецПроцедуры

&НаКлиенте
Процедура АдресНаGoogleMaps(Команда)
	УправлениеКонтактнойИнформациейКлиент.ПоказатьАдресНаКарте(ПредставлениеАдреса, "GoogleMaps");
КонецПроцедуры

&НаКлиенте
Процедура АдресныйКлассификаторУстарел(Команда)
	
	
	СообщениеОПроверкеАдреса = НСтр("ru='Адресные сведения ФИАС, загруженные в программу, устарели.
		|Рекомендуется выполнить обновление, чтобы проверка адреса выполнялась корректно.'");
	Если ЕстьПравоЗагружатьКлассификатор Тогда
		ВопросОбОбновлениеАдресногоКлассификатора(СообщениеОПроверкеАдреса);
	Иначе
		СообщениеОПроверкеАдреса = СообщениеОПроверкеАдреса + Символы.ПС
			+ НСтр("ru = 'Для обновления адресного классификатора необходимо обратиться к администратору.'");
		ПоказатьПредупреждение(, СообщениеОПроверкеАдреса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдминистративноТерриториальноеДеление(Команда)
	
	ОтобразитьВыданныйТипАдреса(РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес());
	
КонецПроцедуры

&НаКлиенте
Процедура МуниципальноеДеление(Команда)
	
	ОтобразитьВыданныйТипАдреса(РаботаСАдресамиКлиентСервер.МуниципальныйАдрес());
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаКомментарий;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьСтроениеИлиПомещение(Команда)
	
	ТипСтроенияИлиПомещения = СтрРазделить(Команда.Имя, "_")[1];
	
	Отбор = Новый Структура("Ключ", ТипСтроенияИлиПомещения);
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки[0].Видимость = Ложь;
	
	Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");
	ИмяТекущего = ДобавитьПолеСтроенияИлиПомещения(Идентификатор, НайденныеСтроки[0].Тип,
		НайденныеСтроки[0].Значение);
		
	Если ИмяТекущего <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтобразитьВыданныйТипАдреса(ВыбранныйТипАдреса)
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) 
		И ПустаяСтрока(НаселенныйПунктДетально.Area) Тогда
	
			Если РаботаСАдресамиКлиентСервер.ЭтоОсновнаяСтрана(Страна) Тогда
				// Попытка восстановить адрес по полям из представления.
				НаселенныйПунктДетально = КонтактнаяИнформацияПоПредставлению(ПредставлениеАдреса);
			Иначе
				НаселенныйПунктДетально.Street = ПредставлениеАдреса;
			КонецЕсли;
			
	КонецЕсли;
	
	НаселенныйПунктДетально.AddressType = ВыбранныйТипАдреса;
	ОбработкаИзмененияАдреса();
	
	Если Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.ВСвободнойФорме Тогда
		Элементы.АдресПредставлениеКомментарий.ТекущаяСтраница = Элементы.НациональныйАдрес;
	КонецЕсли;
	
	УстановитьФлагиВМенюПоТипуАдреса();
	ПоказатьПодсказкуПоТипАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокДомов(ВключитьОтбор)
	
	Идентификатор = РаботаСАдресамиКлиентСервер.ИдентификаторАдреса(НаселенныйПунктДетально, Истина);
	
	Если ЗначениеЗаполнено(Идентификатор) И ЕстьСписокДомов(Идентификатор) Тогда
		ПараметрыФормы = Новый Структура("Идентификатор, Дом, Строение", Идентификатор, Дом, Строение);
		ПараметрыФормы.Вставить("ТипСтроения", ТипСтроения);
		ПараметрыФормы.Вставить("Отбор", ВключитьОтбор);
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ВыбранДома", ЭтотОбъект);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборДома", ПараметрыФормы,,,,, ОповещениеОЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ЗначениеЗаполнено(ПредставлениеАдреса) Тогда
			ТекстПредупреждения = НСтр("ru = 'Выбор из списка недоступен, т.к в адресном классификаторе отсутствует информация о нумерации домов для введенного адреса.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Для просмотра список домов заполните поля адреса.'");
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбОбновлениеАдресногоКлассификатора(Знач СообщениеОПроверкеАдреса)
	
	Кнопки = Новый СписокЗначений();
	Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
	Кнопки.Добавить("ОбновитьКлассификатор", НСтр("ru = 'Обновить классификатор'"));
	Оповещение = Новый ОписаниеОповещения("ПослеВопросОбОбновление", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, СообщениеОПроверкеАдреса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранДома(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьПоляДомовИСтроений(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПиктограммуКомментария()
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Модифицированность Тогда // При немодифицированности работает как "отмена".
		Контекст = Новый Структура("ВидКонтактнойИнформации, НаселенныйПунктДетально, ОсновнаяСтрана, Страна");
		ЗаполнитьЗначенияСвойств(Контекст, ЭтотОбъект);
		Результат = РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений);
		
		// Флаги вида были прочитаны заново.
		ВидКонтактнойИнформации = Контекст.ВидКонтактнойИнформации;
		
		Если ВидКонтактнойИнформации.ПроверятьКорректность
			И (Не РазрешитьВводАдресаВСвободнойФорме)
			И Результат.ОшибкиЗаполнения.Количество() > 0 Тогда
				СообщитьОбОшибкахЗаполнения(Результат.ОшибкиЗаполнения, Ложь);
					Возврат;
		КонецЕсли;
		
		Результат = Результат.ДанныеВыбора;
		Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
			ОбработатьКонтактнуюИнформациюСИсторией(Результат);
		КонецЕсли;
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			Результат.Вставить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов", КонтактнаяИнформацияОписаниеДополнительныхРеквизитов);
		КонецЕсли;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	ИначеЕсли Комментарий <> КопияКомментария Тогда
		// Изменен только комментарий, пробуем вернуть обновленное.
		Результат = РезультатВыбораТолькоКомментария(Параметры.ЗначенияПолей, Параметры.Представление, Комментарий);
		Результат = Результат.ДанныеВыбора;
		
		СброситьМодифицированностьПриВыборе();
#Если ВебКлиент Тогда
		ФлагЗакрытия = ЗакрыватьПриВыборе;
		ЗакрыватьПриВыборе = Ложь;
		ОповеститьОВыборе(Результат);
		ЗакрыватьПриВыборе = ФлагЗакрытия;
#Иначе
		ОповеститьОВыборе(Результат);
#КонецЕсли
		СохранитьСостояниеФормы();
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если (МодальныйРежим Или ЗакрыватьПриВыборе) И Открыта() Тогда
		СброситьМодифицированностьПриВыборе();
		СохранитьСостояниеФормы();
		Закрыть(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКонтактнуюИнформациюСИсторией(Результат)
	
	Результат.Вставить("ДействуетС", ?(ВводНовогоАдреса, АдресНаДату, АдресДействуетС));
	ИмяРеквизита = "";
	Отбор = Новый Структура("Вид", Результат.Вид);
	
	СтрокаДействующегоАдреса = Неопределено;
	ДатаБылаИзменена         = Истина;
	ТекущаяДатаАдреса        = ОбщегоНазначенияКлиент.ДатаСеанса();
	Дельта                   = АдресНаДату - ТекущаяДатаАдреса;
	МинимальнаяДельта        = ?(Дельта > 0, Дельта, -Дельта);
	НайденныеСтроки          = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(НайденнаяСтрока.ИмяРеквизита) Тогда
			ИмяРеквизита = НайденнаяСтрока.ИмяРеквизита;
		КонецЕсли;
		Если НайденнаяСтрока.ДействуетС = АдресНаДату Тогда
			ДатаБылаИзменена = Ложь;
			СтрокаДействующегоАдреса = НайденнаяСтрока;
			Прервать;
		КонецЕсли;
		
		Дельта = ТекущаяДатаАдреса - НайденнаяСтрока.ДействуетС;
		Дельта = ?(Дельта > 0, Дельта, -Дельта);
		Если Дельта <= МинимальнаяДельта Тогда
			МинимальнаяДельта = Дельта;
			СтрокаДействующегоАдреса = НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаБылаИзменена Тогда
		
		Отбор = Новый Структура("ДействуетС, Вид", АдресДействуетС, Результат.Вид);
		СтрокиСАдресом = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		ПредставлениеРедактируемогоАдреса = ?(СтрокиСАдресом.Количество() > 0, СтрокиСАдресом[0].Представление, "");
		Если СтрСравнить(Результат.Представление, ПредставлениеРедактируемогоАдреса) <> 0 Тогда
			НоваяКонтактнаяИнформация = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКонтактнаяИнформация, Результат);
			НоваяКонтактнаяИнформация.ЗначенияПолей           = Результат.КонтактнаяИнформация;
			НоваяКонтактнаяИнформация.Значение                = Результат.Значение;
			НоваяКонтактнаяИнформация.ДействуетС              = АдресНаДату;
			НоваяКонтактнаяИнформация.ХранитьИсториюИзменений = Истина;
			Если СтрокаДействующегоАдреса = Неопределено Тогда
				Отбор = Новый Структура("ЭтоИсторическаяКонтактнаяИнформация, Вид", Ложь, Результат.Вид);
				НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
				Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					НайденнаяСтрока.ЭтоИсторическаяКонтактнаяИнформация = Истина;
					НайденнаяСтрока.ИмяРеквизита = "";
				КонецЦикла;
				НоваяКонтактнаяИнформация.ИмяРеквизита = ИмяРеквизита;
				НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
			Иначе
				НоваяКонтактнаяИнформация.ЭтоИсторическаяКонтактнаяИнформация = Истина;
				Результат.Представление                = СтрокаДействующегоАдреса.Представление;
				Результат.КонтактнаяИнформация         = СтрокаДействующегоАдреса.ЗначенияПолей;
				Результат.Значение = СтрокаДействующегоАдреса.Значение;
			КонецЕсли;
		ИначеЕсли СтрСравнить(Результат.Комментарий, СтрокаДействующегоАдреса.Комментарий) <> 0 И СтрокиСАдресом.Количество() > 0 Тогда
			// Поменяли только комментарий.
			СтрокиСАдресом[0].Комментарий = Результат.Комментарий;
		КонецЕсли;
	Иначе
		Если СтрСравнить(Результат.Представление, СтрокаДействующегоАдреса.Представление) <> 0
			ИЛИ СтрСравнить(Результат.Комментарий, СтрокаДействующегоАдреса.Комментарий) <> 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДействующегоАдреса, Результат);
				СтрокаДействующегоАдреса.ЗначенияПолей                       = Результат.КонтактнаяИнформация;
				СтрокаДействующегоАдреса.Значение                            = Результат.Значение;
				СтрокаДействующегоАдреса.ИмяРеквизита                        = ИмяРеквизита;
				СтрокаДействующегоАдреса.ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыИстории(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВводНовогоАдреса = ?(Результат.Свойство("ВводНовогоАдреса"), Результат.ВводНовогоАдреса, Ложь);
	Если ВводНовогоАдреса Тогда
		АдресДействуетС = АдресНаДату;
		АдресНаДату = Результат.ТекущийАдрес;
		НаселенныйПунктДетально = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
		ОбработкаИзмененияАдреса();
	Иначе
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ссылка);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		
		ИмяРеквизита = "";
		Для Каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ИмяРеквизита = СтрокаКонтактнойИнформации.ИмяРеквизита;
			КонецЕсли;
			КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Удалить(СтрокаКонтактнойИнформации);
		КонецЦикла;
		
		ЭтоИсторическаяКонтактнаяИнформация = Ложь;
		ПараметрыОбновления = Новый Структура;
		Для Каждого СтрокаКонтактнойИнформации Из Результат.История Цикл
			ДанныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаКонтактнойИнформации);
			Если НЕ СтрокаКонтактнойИнформации.ЭтоИсторическаяКонтактнаяИнформация Тогда
				ДанныеСтроки.ИмяРеквизита = ИмяРеквизита;
			КонецЕсли;
			Если НачалоДня(Результат.ТекущийАдрес) = НачалоДня(СтрокаКонтактнойИнформации.ДействуетС) Тогда
				АдресНаДату = Результат.ТекущийАдрес;
				НаселенныйПунктДетально = СтрокаJSONВСтруктуру(СтрокаКонтактнойИнформации.Значение);
				ОбработкаИзмененияАдреса();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтобразитьИнформациюОДатахДействияАдреса(АдресНаДату);
	
	Если НЕ ЭтотОбъект.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Результат.Модифицированность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаJSONВСтруктуру(Значение)
	Возврат УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(Значение);
КонецФункции

&НаКлиенте
Процедура СохранитьСостояниеФормы()
	УстановитьКлючИспользованияФормы();
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СброситьМодифицированностьПриВыборе()
	Модифицированность = Ложь;
	КопияКомментария   = Комментарий;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатаВыбораПоОбновлениюФлагов(Контекст, ВозвращатьСписокЗначений = Ложь)
	// Обновляем некоторые флаги
	ЗначениеФлагов = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Контекст.ВидКонтактнойИнформации.Ссылка);
	
	Контекст.ВидКонтактнойИнформации.ТолькоНациональныйАдрес = ЗначениеФлагов.ТолькоНациональныйАдрес;
	Контекст.ВидКонтактнойИнформации.ПроверятьКорректность   = ЗначениеФлагов.ПроверятьКорректность;

	Возврат РезультатВыбора(Контекст, ВозвращатьСписокЗначений);
КонецФункции

&НаСервереБезКонтекста
Функция РезультатВыбора(Контекст, ВозвращатьСписокЗначений = Ложь)
	
	НаселенныйПунктДетально = Контекст.НаселенныйПунктДетально;
	Результат      = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения");
	
	НаселенныйПунктДетально.Value = РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(НаселенныйПунктДетально, Контекст.ВидКонтактнойИнформации.ВключатьСтрануВПредставление);
	
	Если ВозвращатьСписокЗначений Тогда
		ДанныеВыбора = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(НаселенныйПунктДетально);
	ИначеЕсли Контекст.Страна = Контекст.ОсновнаяСтрана И ПустаяСтрока(НаселенныйПунктДетально.Value) Тогда
		ДанныеВыбора = "";
	Иначе
		ДанныеВыбора = НаселенныйПунктДетально;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеВыбора) = Тип("Структура") Тогда
		Значение = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеВыбора);
		КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзJSONВXML(ДанныеВыбора, Контекст.ВидКонтактнойИнформации.Тип);
	Иначе
		Значение             = "";
		КонтактнаяИнформация = "";
	КонецЕсли;
	
	Результат.ДанныеВыбора = Новый Структура;
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	Результат.ДанныеВыбора.Вставить("Значение", Значение);
	Результат.ДанныеВыбора.Вставить("Представление", НаселенныйПунктДетально.Value);
	Результат.ДанныеВыбора.Вставить("Комментарий", НаселенныйПунктДетально.Comment);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме",
		УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(НаселенныйПунктДетально));
		
	// ошибки заполнения
	Результат.ОшибкиЗаполнения = Новый Массив;
		
	Если Контекст.ВидКонтактнойИнформации.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес 
		И Контекст.ВидКонтактнойИнформации.РедактированиеТолькоВДиалоге Тогда
			АдресВВидеГиперссылки = Истина;
	Иначе
			АдресВВидеГиперссылки = Ложь;
	КонецЕсли;
	Результат.ДанныеВыбора.Вставить("АдресВВидеГиперссылки", АдресВВидеГиперссылки);
	
	// Подавляем перенос строк в возвращаемом отдельно представлении.
	Результат.ДанныеВыбора.Представление = СокрЛП(СтрЗаменить(Результат.ДанныеВыбора.Представление, Символы.ПС, " "));
	Результат.ДанныеВыбора.Вставить("Вид", Контекст.ВидКонтактнойИнформации.Ссылка);
	Результат.ДанныеВыбора.Вставить("Тип", Контекст.ВидКонтактнойИнформации.Тип);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция СписокОшибокЗаполнения(Адрес, ВидКонтактнойИнформации, ПредупреждатьОбОтсутствии, ТребуетсяОбновление = Ложь)
	
	Результат = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Адрес, ВидКонтактнойИнформации);
	ОпределитьНеобходимостьОбновленияКлассификатора(Адрес, ТребуетсяОбновление);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ОпределитьНеобходимостьОбновленияКлассификатора(Знач НаселенныйПунктДетально, ТребуетсяОбновление)
	
	// проверка источника
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		ИнформацияОбОбновление = МодульАдресныйКлассификаторСлужебный.ОписаниеПоследнейЗагрузки(НаселенныйПунктДетально.AreaID);
		ТребуетсяОбновление = ИнформацияОбОбновление.НеобходимоОбновление;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокКонтактнойИнформации(ВидКонтактнойИнформации, КонтактнаяИнформацияОписаниеДополнительныхРеквизитов)

	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	
	СписокКонтактнойИнформации = Новый Массив;
	Для каждого СтрокаКонтактнойИнформации Из НайденныеСтроки Цикл
		КонтактнаяИнформация = Новый Структура("Представление, Значение, ЗначенияПолей, ДействуетС, Комментарий");
		ЗаполнитьЗначенияСвойств(КонтактнаяИнформация, СтрокаКонтактнойИнформации);
		СписокКонтактнойИнформации.Добавить(КонтактнаяИнформация);
	КонецЦикла;
	
	Возврат СписокКонтактнойИнформации;
КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиАдресногоКлассификатора(Результат, ДополнительныеПараметры) Экспорт
	СообщениеОНеобходимостиОбновленияКлассификатора(НаселенныйПунктДетально.Регион.Идентификатор);
КонецПроцедуры

&НаСервере
Функция РезультатВыбораТолькоКомментария(КонтактнаяИнфо, Представление, Комментарий)
	
	Если ПустаяСтрока(КонтактнаяИнфо) Тогда
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO("");
		НоваяКонтактная.Комментарий = Комментарий;
		НоваяКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(НоваяКонтактная);
		АдресВведенВСвободнойФорме = Ложь;
		
	ИначеЕсли УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнфо) Тогда
		// Копия
		НоваяКонтактная = КонтактнаяИнфо;
		// Модифицируем значение "НоваяКонтактная".
		УправлениеКонтактнойИнформацией.УстановитьКомментарийКонтактнойИнформации(НоваяКонтактная, Комментарий);
		АдресВведенВСвободнойФорме = УправлениеКонтактнойИнформациейСлужебный.АдресВведенВСвободнойФорме(КонтактнаяИнфо);
		
	Иначе
		НоваяКонтактная = КонтактнаяИнфо;
		АдресВведенВСвободнойФорме = Ложь;
	КонецЕсли;
	
	Результат = Новый Структура("ДанныеВыбора, ОшибкиЗаполнения", Новый Структура, Новый СписокЗначений);
	Результат.ДанныеВыбора.Вставить("КонтактнаяИнформация", НоваяКонтактная);
	Результат.ДанныеВыбора.Вставить("Представление", Представление);
	Результат.ДанныеВыбора.Вставить("Комментарий", Комментарий);
	Результат.ДанныеВыбора.Вставить("ВведеноВСвободнойФорме", АдресВведенВСвободнойФорме);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СообщениеОНеобходимостиОбновленияКлассификатора(Идентификатор = Неопределено)
	
	Элементы.АдресныйКлассификаторУстарел.Видимость = Ложь;
	Если НЕ ВебСервисИспользуется И  ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		ИнформацияОбОбновление = МодульАдресныйКлассификаторСлужебный.ОписаниеПоследнейЗагрузки(Идентификатор);
		Элементы.АдресныйКлассификаторУстарел.Видимость = ИнформацияОбОбновление.НеобходимоОбновление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПоляПоТипуАдреса()
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
		ПоказатьАдресВСвободнойФорме();
	КонецЕсли;
	
	ЭтоНациональныйАдрес            = (Страна = ОсновнаяСтрана И Не МеждународныйФорматАдреса);
	ЭтоСтранаУчастникЕАЭС           = ЭтоСтранаУчастникЕАЭС(Страна);
	
	НаселенныйПунктДетально.Country = СокрЛП(Страна);
	
	Если ЭтоНациональныйАдрес Тогда
		
		Если ПустаяСтрока(НаселенныйПунктДетально.AddressType) Тогда
			НаселенныйПунктДетально.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		КонецЕсли;
		
		Элементы.Улица.Заголовок = НСтр("ru='Улица'");
		Элементы.ОКТМО.Видимость                     = ВидКонтактнойИнформации.УказыватьОКТМО;
		ВебСервисИспользуется                        = КлассификаторДоступен;
		ВидимостьСтроений                            = Истина;
		Элементы.ГруппаДобавлениеСтроения.Видимость  = Истина;
		Элементы.ГруппаДобавлениеПомещения.Видимость = Истина;
		Элементы.Дом.КнопкаВыбора                    = Истина;
		Элементы.НаселенныйПункт.КнопкаВыбора        = Истина;
		Элементы.Строение.КнопкаВыбора               = Ложь;
		Элементы.НаселенныйПункт.ПодсказкаВвода       = НСтр("ru='Введите первые буквы названия населенного пункта'");
		Элементы.Улица.ПодсказкаВвода                 = НСтр("ru='Введите первые буквы названия улицы'");
		
	Иначе
		
		Элементы.ГруппаДобавлениеСтроения.Видимость = Ложь;
		Элементы.ГруппаДобавлениеПомещения.Видимость = Ложь;
		Если ЭтоСтранаУчастникЕАЭС И Не МеждународныйФорматАдреса Тогда
			Элементы.Улица.Заголовок     = НСтр("ru='Улица'");
			Элементы.НаселенныйПункт.КнопкаВыбора = Истина;
			ВидимостьСтроений                     = Истина;
			Элементы.Дом.КнопкаВыбора             = Ложь;
			Элементы.Строение.КнопкаВыбора        = Ложь;
			
		Иначе
			Элементы.Улица.Заголовок     = НСтр("ru='Адрес'");
			Элементы.НаселенныйПункт.КнопкаВыбора = Ложь;
			Элементы.Улица.КнопкаВыбора           = Ложь;
			ВидимостьСтроений                     = Ложь;
		КонецЕсли;
		
		Элементы.ОКТМО.Видимость                       = Ложь;
		Элементы.ПроверитьЗаполнениеАдреса.Доступность = Ложь;
		ВебСервисИспользуется                          = Ложь;
		Элементы.НаселенныйПункт.ПодсказкаВвода        = "";
		Элементы.Улица.ПодсказкаВвода                  = "";
		
	КонецЕсли;
	
	// Проверять, вводить в свободной форме и искать по индексу можем только российские адреса.
	Элементы.Улица.МногострочныйРежим                          = НЕ ЭтоНациональныйАдрес;
	Элементы.ГруппаСтроенияИИнформация.Видимость               = ВидимостьСтроений;
	Элементы.Улица.КнопкаВыбора                                = ЭтоНациональныйАдрес;
	Элементы.ПроверитьЗаполнениеАдреса.Доступность             = ЭтоНациональныйАдрес;
	Элементы.ЗаполнитьПоПочтовомуИндексу.Доступность           = ЭтоНациональныйАдрес;
	Элементы.МуниципальноеДеление.Доступность                  = ЭтоНациональныйАдрес;
	Элементы.АдминистративноТерриториальноеДеление.Доступность = ЭтоНациональныйАдрес;
	
	Если ВидКонтактнойИнформации.ВключатьСтрануВПредставление Тогда
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
	УстановитьФлагиВМенюПоТипуАдреса();
	ПоказатьПодсказкуПоТипАдреса();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьОтображениеЭлементовНаФорме()
	// Разовые настройки отображения формы.
	
	Если Не ЕстьКлассификатор Тогда
		Элементы.ЗаполнитьПоПочтовомуИндексу.Видимость            = Ложь;
		Элементы.Улица.КнопкаВыбора                               = Ложь;
		Элементы.Дом.КнопкаВыбора                                 = Ложь;
		Элементы.Строение.КнопкаВыбора                            = Ложь;
		Элементы.НаселенныйПункт.ПодсказкаВвода                   = НСтр("ru='Введите название населенного пункта'");
		Элементы.Улица.ПодсказкаВвода                             = НСтр("ru='Введите название улицы'");
	КонецЕсли;
	
	// По умолчанию выводим представление.
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораЭлемента(ЭлементВид, ЭлементЗначение, Данные)
	ЭлементЗначение.КнопкаВыпадающегоСписка = Данные.МожноПодбиратьЗначения;
	
	СписокТипов = Данные.ВариантыТипа;
	ЭлементВид.КнопкаВыпадающегоСписка = СписокТипов.Количество() > 0;
	Если ЭлементВид.КнопкаВыпадающегоСписка Тогда
		ЭлементВид.СписокВыбора.ЗагрузитьЗначения(СписокТипов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеРеквизитовПоКонтактнойИнформации(ДанныеАдреса)
	
	// Общие реквизиты
	ПредставлениеАдреса = ДанныеАдреса.Value;
	Если ДанныеАдреса.Свойство("Comment") Тогда
		Комментарий         = ДанныеАдреса.Comment;
	КонецЕсли;
	
	// Копия комментария для анализа измененности.
	КопияКомментария = Комментарий;
	
	СсылкаНаОсновнуюСтрану = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	ДанныеСтраны = Неопределено;
	Если ДанныеАдреса.Свойство("Country") И ЗначениеЗаполнено(ДанныеАдреса.Country) Тогда
		ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, СокрЛП(ДанныеАдреса.Country));
	КонецЕсли;
	
	Если ДанныеСтраны = Неопределено Тогда
		// Не нашли ни в справочнике, ни в классификаторе.
		Страна    = СсылкаНаОсновнуюСтрану;
		КодСтраны = СсылкаНаОсновнуюСтрану.Код;
	Иначе
		Страна    = ДанныеСтраны.Ссылка;
		КодСтраны = ДанныеСтраны.Код;
	КонецЕсли;
		
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(ДанныеАдреса.AddressType)Тогда
		РазрешитьВводАдресаВСвободнойФорме = Истина;
	КонецЕсли;
	
	УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса)
	
	// Индекс просто ставим
	Если ДанныеАдреса.Свойство("ZIPCode") Тогда
		Индекс = Формат(ДанныеАдреса.ZIPCode, "ЧГ=");
	КонецЕсли;
	
	// Индекс просто ставим
	Если ДанныеАдреса.Свойство("OKTMO") Тогда
		ОКТМО = Формат(ДанныеАдреса.OKTMO, "ЧГ=");
	КонецЕсли;
	
	// Синтетический "Населенный пункт" получаем как представление.
	НаселенныйПункт = Обработки.РасширенныйВводКонтактнойИнформации.ПредставлениеНаселенногоПункта(ДанныеАдреса);
	Если ЗначениеЗаполнено(ДанныеАдреса.Street) Тогда
		Улица = ДанныеАдреса.Street + " " + ДанныеАдреса.StreetType;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.HouseType) Тогда
		ТипДома = ДанныеАдреса.HouseType;
		Если ДанныеАдреса.Свойство("HouseNumber") Тогда
			Дом     = ДанныеАдреса.HouseNumber;
		ИначеЕсли ДанныеАдреса.Свойство("House") Тогда
			Дом     = ДанныеАдреса.House;
		КонецЕсли;
	КонецЕсли;
		ЗаполняемПервоеЗдание = Истина;
	Если ДанныеАдреса.Свойство("Buildings") И  ТипЗнч(ДанныеАдреса.Buildings) = Тип("Массив") Тогда
		Для каждого ОписаниеЗдания Из ДанныеАдреса.Buildings Цикл
			Если ЗаполняемПервоеЗдание Тогда
				ТипСтроения = ОписаниеЗдания.Type;
				Строение    = ОписаниеЗдания.Number;
				ЗаполняемПервоеЗдание = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполняемПервоеПомещение = Истина;
	Если ДанныеАдреса.Свойство("Apartments") И  ТипЗнч(ДанныеАдреса.Apartments) = Тип("Массив") Тогда
		Для каждого ОписаниеСтроения Из ДанныеАдреса.Apartments Цикл
			Если ЗаполняемПервоеПомещение Тогда
				ТипПомещения    = ОписаниеСтроения.Type;
				Помещение       = ОписаниеСтроения.Number;
				ЗаполняемПервоеПомещение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОтобразитьДополнительныеЗдания(НаселенныйПунктДетально);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппуЭлементов(Группа)
	Пока Группа.ПодчиненныеЭлементы.Количество()>0 Цикл
		Элемент = Группа.ПодчиненныеЭлементы[0];
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УдалитьГруппуЭлементов(Элемент);
		КонецЕсли;
		Элементы.Удалить(Элемент);
	КонецЦикла;
	Элементы.Удалить(Группа);
КонецПроцедуры

&НаСервере
Функция ДобавитьПолеСтроенияИлиПомещения(Идентификатор, Тип, Значение)
	
	Если Тип = "Помещение" Тогда
		
		НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещенияОсновная,, "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
		
	Иначе
		
		НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
		ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроенияОсновная,, "ПутьКДаннымЗаголовка");
		
		НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
		НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
		
		НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
		
	КонецЕсли;
	
	НовыйЭлемент.КнопкаВыбора = Ложь;
	Добавлять = Новый Массив;
	
	Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
	Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
	
	ИзменитьРеквизиты(Добавлять);
	
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
	КонецЕсли;
	
	Если СтрСравнить(Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
		
		ЭтотОбъект[НовыйТип.Имя]     = Значение;
		Результат                    = НовыйЭлемент.Имя;
		
	Иначе
		
		НайденныеСтроки[0].ПредыдущиеЗначение = "";
		Результат                             = НовыйТип.Имя;
		
	КонецЕсли;
	
	ЭтотОбъект[НовыйЭлемент.Имя] = "";
	
	НовыйТип.ПутьКДанным     = НовыйТип.Имя;
	НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтобразитьДополнительныеЗдания(НаселенныйПунктДетальноПереопределение = Неопределено)
	
	Если НаселенныйПунктДетальноПереопределение <> Неопределено Тогда
		НаселенныйПунктДетально = НаселенныйПунктДетальноПереопределение;
	КонецЕсли;

	Если НаселенныйПунктДетально = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Удалять = Новый Массив;
	
	КоличествоЭлементов = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Количество();
	Пока КоличествоЭлементов > 0 Цикл
		
		КоличествоЭлементов = КоличествоЭлементов - 1;

		ЭлементыФормы = Элементы.ГруппаСтроенияДополнительно.ПодчиненныеЭлементы.Получить(КоличествоЭлементов);
		Идентификатор = Сред(ЭлементыФормы.Имя, 15);
		Удалять.Добавить("ТипСтроения" + Идентификатор);
		Удалять.Добавить("Строение" + Идентификатор);
		Элементы.Удалить(Элементы["ГруппаСтроение" + Идентификатор]);
		
		НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяЭлемента = "";
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоЭлементов = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Количество();
	Пока КоличествоЭлементов > 0 Цикл
		
		КоличествоЭлементов = КоличествоЭлементов - 1;
		ЭлементыФормы = Элементы.ГруппаПомещенияДополнительно.ПодчиненныеЭлементы.Получить(КоличествоЭлементов);
		
		Идентификатор = Сред(ЭлементыФормы.Имя, 16);
		Удалять.Добавить("ТипПомещения" + Идентификатор);
		Удалять.Добавить("Помещение" + Идентификатор);
		Элементы.Удалить(Элементы["ГруппаПомещение" + Идентификатор]);
		
		НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ИмяЭлемента = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(, Удалять);
	
	Если ТипЗнч(НаселенныйПунктДетально.Buildings) = Тип("Массив") Тогда
		КоличествоЗданий = НаселенныйПунктДетально.Buildings.Количество() - 1;
		
		Результат = Неопределено;
		Для НомерСтроки = 1 По КоличествоЗданий Цикл
			
			Строка        = НаселенныйПунктДетально.Buildings[НомерСтроки];
			Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");
			
			НоваяГруппа = Элементы.Добавить("ГруппаСтроение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаСтроенияДополнительно);
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаСтроенияОсновная,, "ПутьКДаннымЗаголовка");
			
			НовыйТип = Элементы.Добавить("ТипСтроения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипСтроения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипСтроения.СписокВыбора.ВыгрузитьЗначения());
			НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипСтроенияПриИзменении");
			
			НовыйЭлемент = Элементы.Добавить("Строение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Строение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Строение.СписокВыбора.ВыгрузитьЗначения());
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтроениеПриИзменении");
			НовыйЭлемент.КнопкаВыбора = Ложь;
			
			Если НомерСтроки = КоличествоЗданий Тогда
				Результат = НовыйЭлемент.Имя;
			КонецЕсли;
			
			Добавлять = Новый Массив;
			Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
			Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
			
			ИзменитьРеквизиты(Добавлять);
			ЭтотОбъект[НовыйТип.Имя]     = Строка.Type;
			ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Number;
			
			НовыйТип.ПутьКДанным     = НовыйТип.Имя;
			НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
			
			НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Строка.Type));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НаселенныйПунктДетально.Apartments) = Тип("Массив") Тогда
		КоличествоПомещений = НаселенныйПунктДетально.Apartments.Количество() - 1;
		
		Результат = Неопределено;
		Для НомерСтроки = 1 По КоличествоПомещений Цикл
			
			Строка        = НаселенныйПунктДетально.Apartments[НомерСтроки];
			Идентификатор = СтрЗаменить(Новый УникальныйИдентификатор(),"-", "");
			
			НоваяГруппа = Элементы.Добавить("ГруппаПомещение" + Идентификатор, Тип("ГруппаФормы"), Элементы.ГруппаПомещенияДополнительно);
			ЗаполнитьЗначенияСвойств(НоваяГруппа, Элементы.ГруппаПомещенияОсновная,, "ПутьКДаннымЗаголовка");
			
			НовыйТип = Элементы.Добавить("ТипПомещения" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйТип, Элементы.ТипПомещения, , "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйТип.СписокВыбора.ЗагрузитьЗначения(Элементы.ТипПомещения.СписокВыбора.ВыгрузитьЗначения());
			НовыйТип.УстановитьДействие("ПриИзменении", "Подключаемый_ТипПомещенияПриИзменении");
			
			НовыйЭлемент = Элементы.Добавить("Помещение" + Идентификатор, Тип("ПолеФормы"), НоваяГруппа);
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элементы.Помещение,, "ПутьКДанным, СписокВыбора, ВыделенныйТекст, СвязьПоТипу");
			НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(Элементы.Помещение.СписокВыбора.ВыгрузитьЗначения());
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПомещениеПриИзменении");
			НовыйЭлемент.КнопкаВыбора = Ложь;
			
			Если НомерСтроки = КоличествоПомещений Тогда
				Результат = НовыйЭлемент.Имя;
			КонецЕсли;
			
			Добавлять = Новый Массив;
			Добавлять.Добавить(Новый РеквизитФормы(НовыйТип.Имя,     Новый ОписаниеТипов("Строка")));
			Добавлять.Добавить(Новый РеквизитФормы(НовыйЭлемент.Имя, Новый ОписаниеТипов("Строка")));
			
			ИзменитьРеквизиты(Добавлять);
			ЭтотОбъект[НовыйТип.Имя]     = Строка.Type;
			ЭтотОбъект[НовыйЭлемент.Имя] = Строка.Number;
			
			НовыйТип.ПутьКДанным     = НовыйТип.Имя;
			НовыйЭлемент.ПутьКДанным = НовыйЭлемент.Имя;
			
			НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Строка.Type));
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденныеСтроки[0].ИмяЭлемента = Идентификатор;
				
			Иначе
				
				НовоеПомещение                       = ДополнительныеСтроенияИПомещения.Добавить();
				НовоеПомещение.Тип                   = "Помещение";
				НовоеПомещение.Значение              = НаименованиеПриДобавлениеПроизвольногоПомещения();
				НовоеПомещение.Видимость             = Ложь;
				НовоеПомещение.Ключ                  = "";
				НовоеПомещение.ПредыдущиеЗначение    = Строка.Type;
				НовоеПомещение.ИмяЭлемента           = Идентификатор;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтобразитьИнформациюОДатахДействияАдреса(ДействуетС)
	
	Если ВводНовогоАдреса Тогда
		ТекстИсторическийАдрес = НСтр("ru = ''");
		АдресНаДату = ДействуетС;
		Элементы.ГруппаИсторическийАдрес.Видимость = ЗначениеЗаполнено(ДействуетС);
	Иначе
		ДействуетДо = Неопределено;
		
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ссылка);
		НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 
			ИЛИ (НайденныеСтроки.Количество() = 1 И ПустаяСтрока(НайденныеСтроки[0].Представление)) Тогда
				АдресНаДату = Дата(1, 1, 1);
				Элементы.ГруппаИсторическийАдрес.Видимость = Ложь;
				Элементы.ИсторияИзменений.Видимость = Ложь;
		Иначе
			Результат = ОпределитьДатуДействия(ДействуетС, НайденныеСтроки);
			АдресНаДату = Результат.ДействуетС;
			АдресДействуетС = Результат.ДействуетС;
			
			Если НЕ ЗначениеЗаполнено(Результат.ДействуетС)
				И ПустаяСтрока(Результат.ТекущаяСтрока.Представление) Тогда
					Элементы.ГруппаИсторическийАдрес.Видимость = Ложь;
			ИначеЕсли ЗначениеЗаполнено(Результат.ДействуетПо) Тогда
				ТекстИсторическийАдрес = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'действует по %1'"), Формат(Результат.ДействуетПо - 10, "ДЛФ=DD"));
			Иначе
				ТекстИсторическийАдрес = НСтр("ru = 'действует по настоящее время.'");
			КонецЕсли;
			ОтобразитьКоличествоЗаписейВИсторииИзменений();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ТекстПроДатуДействия.Заголовок = ТекстИсторическийАдрес;
	Элементы.АдресНаДату.ФорматРедактирования = ?(ЗначениеЗаполнено(АдресНаДату), "", "ДФ='""" + НСтр("ru='начало учета'") + """'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьКоличествоЗаписейВИсторииИзменений()
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации.Ссылка);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 1 Тогда
		Элементы.ИсторияИзмененийГиперссылка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='История изменений (%1)'"), НайденныеСтроки.Количество());
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Истина;
	ИначеЕсли НайденныеСтроки.Количество() = 1 И ПустаяСтрока(НайденныеСтроки[0].ЗначенияПолей) Тогда
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Ложь;
	Иначе
		Элементы.ИсторияИзмененийГиперссылка.Заголовок = НСтр("ru='История изменений'");
		Элементы.ИсторияИзмененийГиперссылка.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьДатуДействия(ДействуетС, История)
	
	Результат = Новый Структура("ДействуетПо, ДействуетС, ТекущаяСтрока");
	Если История.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущаяСтрока        = Неопределено;
	ДействуетПо          = Неопределено;
	Минимум              = -1;
	МинимумСравнительный = Неопределено;
	
	Для каждого СтрокаИстория Из История Цикл
		Дельта = СтрокаИстория.ДействуетС - ДействуетС;
		Если Дельта <= 0 И (МинимумСравнительный = Неопределено ИЛИ Дельта > МинимумСравнительный) Тогда
			ТекущаяСтрока        = СтрокаИстория;
			МинимумСравнительный = Дельта;
		КонецЕсли;

		Если Минимум = -1 Тогда
			Минимум       = Дельта + 1;
			ТекущаяСтрока = СтрокаИстория;
		КонецЕсли;
		Если Дельта > 0 И МодульЧисла(Дельта) < МодульЧисла(Минимум) Тогда
			ДействуетПо = СтрокаИстория.ДействуетС;
			Минимум     = МодульЧисла(Дельта);
		КонецЕсли;
	КонецЦикла;
	
	Результат.ДействуетПо   = ДействуетПо;
	Результат.ДействуетС    = ТекущаяСтрока.ДействуетС;
	Результат.ТекущаяСтрока = ТекущаяСтрока;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МодульЧисла(Число)
	Возврат Макс(Число, -Число);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ТипСтроенияПриИзменении(Элемент)
	
	Идентификатор = Сред(Элемент.Имя, 12);
	НайденныеСтрокиСтарые = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтрокиСтарые.Количество() > 0 Тогда
		СтароеЗначение = НайденныеСтрокиСтарые[0].Значение;
	КонецЕсли;
	
	Значение = ЭтотОбъект[Элемент.Имя];
	
	НайденныеСтрокиНовый = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтрокиНовый.Количество() > 0 Тогда
		
		Если НайденныеСтрокиНовый[0].Видимость = Ложь Тогда
			ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое уже значение есть на форме, откатываем на старое.
			Возврат;
		КонецЕсли;
		НайденныеСтрокиСтарые[0].ИмяЭлемента = "";
		НайденныеСтрокиНовый[0].ИмяЭлемента  = Идентификатор;
	КонецЕсли;
	
	Для каждого Помещения Из НаселенныйПунктДетально.Buildings Цикл
		Если СтрСравнить(Помещения.Type, СтароеЗначение) = 0 Тогда
			Помещения.Type = ЭтотОбъект[Элемент.Имя];
			ОбновитьПредставлениеАдреса();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтроениеПриИзменении(Элемент)
	
	Идентификатор = Сред(Элемент.Имя, 9);
	
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Значение = НайденныеСтроки[0].Значение;
	Иначе
		Возврат;
	КонецЕсли;

	ЭтоНовый = Истина;
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Buildings.Количество() - 1 Цикл
		Помещения = НаселенныйПунктДетально.Buildings[ИндексПозиции];
		Если СтрСравнить(Помещения.Type, Значение) = 0 Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Помещения.Number = ЭтотОбъект[Элемент.Имя];
			Иначе
				НаселенныйПунктДетально.Buildings.Удалить(ИндексПозиции);
			КонецЕсли;
			ЭтоНовый = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНовый Тогда
		НаселенныйПунктДетально.Buildings.Добавить(ЗначениеСтроенияИлиПомещения(Значение, ЭтотОбъект[Элемент.Имя]));
	КонецЕсли;
	
	ОбновитьПредставлениеАдреса();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТипПомещенияПриИзменении(Элемент)
	
	Идентификатор = Сред(Элемент.Имя, 13);
	НайденныеСтрокиСтарые = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтрокиСтарые.Количество() > 0 Тогда
		СтароеЗначение = НайденныеСтрокиСтарые[0].ПредыдущиеЗначение;
	КонецЕсли;
	
	Значение = ПерваяБукваЗаглавная(ЭтотОбъект[Элемент.Имя]);
	Если ПустаяСтрока(Значение) Тогда
		ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое значение есть на форме, откатываем на старое.
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиНовый = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("Значение", Значение));
	Если НайденныеСтрокиНовый.Количество() > 0 Тогда
		
		Если НайденныеСтрокиНовый[0].Видимость = Ложь Тогда
			ЭтотОбъект[Элемент.Имя] = СтароеЗначение; // Такое значение есть на форме, откатываем на старое.
			Возврат;
		КонецЕсли;
		
		НайденныеСтрокиНовый[0].ИмяЭлемента         = Идентификатор;
		НайденныеСтрокиСтарые[0].ИмяЭлемента        = "";
		Если СтрСравнить(НайденныеСтрокиСтарые[0].Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
			НайденныеСтрокиСтарые[0].ПредыдущиеЗначение = ЭтотОбъект[Элемент.Имя];
		Иначе
			НайденныеСтрокиСтарые[0].ПредыдущиеЗначение =  НаименованиеПриДобавлениеПроизвольногоПомещения();
		КонецЕсли;
	Иначе
		
		НовоеПомещение                       = ДополнительныеСтроенияИПомещения.Добавить();
		НовоеПомещение.Тип                   = "Помещение";
		НовоеПомещение.Значение              = Значение;
		НовоеПомещение.Видимость             = Ложь;
		НовоеПомещение.Ключ                  = "";
		НовоеПомещение.ПредыдущиеЗначение    = ЭтотОбъект[Элемент.Имя];
		НовоеПомещение.ИмяЭлемента           = Идентификатор;
		НайденныеСтрокиСтарые[0].ИмяЭлемента = "";
		
	КонецЕсли;
	
	Для каждого Помещения Из НаселенныйПунктДетально.Apartments Цикл
		Если СтрСравнить(Помещения.Type, СтароеЗначение) = 0 Тогда
			Помещения.Type = ЭтотОбъект[Элемент.Имя];
			ОбновитьПредставлениеАдреса();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПомещениеПриИзменении(Элемент)
	
	Идентификатор = Сред(Элемент.Имя, 10);
	
	НайденныеСтроки = ДополнительныеСтроенияИПомещения.НайтиСтроки(Новый Структура("ИмяЭлемента", Идентификатор));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если СтрСравнить(НайденныеСтроки[0].Значение, НаименованиеПриДобавлениеПроизвольногоПомещения()) <> 0 Тогда
			Значение = НайденныеСтроки[0].Значение;
		Иначе
			Значение = НайденныеСтроки[0].ПредыдущиеЗначение;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Истина;
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Apartments.Количество() - 1 Цикл
		Помещения = НаселенныйПунктДетально.Apartments[ИндексПозиции];
		Если СтрСравнить(Помещения.Type, Значение) = 0 Тогда
			Если ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
				Помещения.Number = ЭтотОбъект[Элемент.Имя];
			Иначе
				НаселенныйПунктДетально.Apartments.Удалить(ИндексПозиции);
			КонецЕсли;
			ЭтоНовый = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоНовый Тогда
		НаселенныйПунктДетально.Apartments.Добавить(ЗначениеСтроенияИлиПомещения(Значение, ЭтотОбъект[Элемент.Имя]));
	КонецЕсли;
	ОбновитьПредставлениеАдреса();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПомещениеИзАдреса(УдаляемыйТипПомещения)
	
	Для ИндексПозиции = 0 По НаселенныйПунктДетально.Apartments.Количество() - 1 Цикл
		СведенияОПомещении = НаселенныйПунктДетально.Apartments[ИндексПозиции];
		Если СтрСравнить(СведенияОПомещении.Type, УдаляемыйТипПомещения) =0 Тогда
			НаселенныйПунктДетально.Apartments.Удалить(ИндексПозиции);
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМенюДобавленияСтроенийИПомещений()
	
	Для каждого СтроениеПомещение Из ДополнительныеСтроенияИПомещения Цикл
		
		Если ЗначениеЗаполнено(СтроениеПомещение.Ключ) Тогда
			
			Если ЗначениеЗаполнено(СтроениеПомещение.ИмяЭлемента)
				Или СтрСравнить(СтроениеПомещение.Значение, ТипПомещения) = 0
				Или СтрСравнить(СтроениеПомещение.Значение, ТипСтроения)  = 0 Тогда
					СтроениеПомещение.Видимость = Ложь;
					Элементы["Добавить_"+ СтроениеПомещение.Ключ].Видимость = Ложь;
			Иначе
					СтроениеПомещение.Видимость = Истина;
					Элементы["Добавить_"+ СтроениеПомещение.Ключ].Видимость = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте 
Процедура СообщитьОбОшибкахЗаполнения(СписокОшибок, ПредупреждатьОбОтсутствии, ТребуетсяОбновление = Ложь)
	
	ОчиститьСообщения();
	
	КоличествоОшибок = СписокОшибок.Количество();
	Если КоличествоОшибок = 0 И ПредупреждатьОбОтсутствии Тогда
		Элементы.ГруппаОписаниеНедоступностиСервера.Видимость = Ложь;
		// Нет ошибок
		Если НЕ ВебСервисИспользуется И ТребуетсяОбновление Тогда
			Если ЕстьПравоЗагружатьКлассификатор Тогда
				СообщениеОПроверкеАдреса = НСтр("ru='Адрес введен корректно, но адресные сведения, загруженные в программу, давно не обновлялись.
				|Рекомендуется выполнить обновление и повторить проверку адреса заново.'");
				ВопросОбОбновлениеАдресногоКлассификатора(СообщениеОПроверкеАдреса);
			Иначе
				СообщениеОПроверкеАдреса = НСтр("ru='Адрес введен корректно, но адресные сведения, загруженные в программу,
				|давно не обновлялись. Рекомендуется выполнить обновление и повторить проверку адреса заново.
				|Для обновления адресного классификатора необходимо обратиться к администратору.'");
				ПоказатьПредупреждение(, СообщениеОПроверкеАдреса);
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Адрес введен корректно.'"));
		КонецЕсли;
		
		Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисДоступен;
		Возврат;
	КонецЕсли;
	
	Если КоличествоОшибок = 1 Тогда
		МестоОшибки = СписокОшибок[0].Значение;
		Если СписокОшибок[0].Пометка = Ложь И НЕ ВебСервисИспользуется Тогда
			ТекстВопроса = НСтр("ru = 'Адрес не может быть проверен.'") + Символы.ПС + СписокОшибок[0].Представление + Символы.ПС + НСтр("ru = 'Загрузить классификатор для проверки адреса?'");
			ПредложениеЗагрузкиКлассификатора(ТекстВопроса);
			Возврат;
		ИначеЕсли ПустаяСтрока(МестоОшибки) Или МестоОшибки = "/" Тогда
			// Одна ошибка на весь адрес, не привязанная к полю.
			ПоказатьПредупреждение(, СписокОшибок[0].Представление);
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СообщениеОбОшибке;
	Элементы.ГруппаОписаниеНедоступностиСервера.Видимость = Истина;
	// Сообщаем список с привязкой к полям.
	Для Каждого Элемент Из СписокОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Элемент.Представление,,, Элемент.Значение);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросОбОбновление(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ОбновитьКлассификатор" Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗагрузкиАдресногоКлассификатора", ЭтотОбъект);
			МодульАдресныйКлассификаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");
			МодульАдресныйКлассификаторКлиент.ПоказатьФормуЗагрузкиАдресногоКлассификатора(ОповещениеОЗакрытие);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАдресКлиент()
	
	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		
		Если ЭлементАдреса.Ключ = "Type" Тогда
			Продолжить;
		ИначеЕсли ЭлементАдреса.Ключ = "Buildings"  ИЛИ ЭлементАдреса.Ключ = "Apartments" Тогда
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = Новый Массив;
		Иначе
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидКонтактнойИнформации.ТолькоНациональныйАдрес Тогда
		НаселенныйПунктДетально.Country = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	КонецЕсли;
	
	НаселенныйПунктДетально.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
	ОтобразитьДополнительныеЗдания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаселенныйПунктУстановитьПоляАдреса(НаселенныйПунктДетально, Знач ВыбранноеЗначение)
	
	Если ВыбранноеЗначение.Свойство("Адрес") И ЗначениеЗаполнено(ВыбранноеЗначение.Адрес) Тогда
		ПолученныйАдрес = УправлениеКонтактнойИнформациейСлужебный.СтрокаJSONВСтруктуру(ВыбранноеЗначение.Адрес);
		ПолученныйАдрес.addressType = ?(СтрСравнить(ПолученныйАдрес.addressType,"TERRITORIAL") = 0, 
			РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес(),
			РаботаСАдресамиКлиентСервер.МуниципальныйАдрес());
	Иначе
		ПолученныйАдрес = ОпределитьАдресПоИдентификатору(ВыбранноеЗначение);
	КонецЕсли;
	ИменаУровнейНаселенногоПункта = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса("Все", Ложь);
	Для каждого ИмяУровня Из ИменаУровнейНаселенногоПункта Цикл
		Если ПолученныйАдрес.Свойство(ИмяУровня) Тогда
			НаселенныйПунктДетально[ИмяУровня] = ПолученныйАдрес[ИмяУровня];
			НаселенныйПунктДетально[ИмяУровня + "Type"] = ПолученныйАдрес[ИмяУровня + "Type"];
			НаселенныйПунктДетально[ИмяУровня + "ID"]   = ПолученныйАдрес[ИмяУровня + "ID"];
		КонецЕсли;
	КонецЦикла;
	
	НаселенныйПунктДетально.AddressType = ПолученныйАдрес.AddressType;
	
	Если ЗначениеЗаполнено(ПолученныйАдрес.ZipCode) Тогда
		НаселенныйПунктДетально.ZipCode = ПолученныйАдрес.ZipCode;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныйАдрес.OKTMO) Тогда
		НаселенныйПунктДетально.OKTMO = ПолученныйАдрес.OKTMO;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.Street)
		Или ЗначениеЗаполнено(НаселенныйПунктДетально.HouseNumber)
		Или НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
			УстановитьИдентификаторыАдреса(НаселенныйПунктДетально);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура УстановитьКлючИспользованияФормы()
	КлючСохраненияПоложенияОкна = Строка(Страна);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПроверитьДоступностьКлассификатора()
	
	Если Не ЕстьКлассификатор Тогда
		Возврат;
	КонецЕсли;
	
	Задание = ПроверитьДоступностьКлассификатораВФоне(УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиДоступностиКлассификатораВФоне", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиДоступностиКлассификатораВФоне(Задание, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Задание) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Выполнено" Тогда
		ДоступностьКлассификатора = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		Если ДоступностьКлассификатора <> Неопределено Тогда
			Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = ?(ДоступностьКлассификатора.Отказ,
			Элементы.СервисНедоступен, Элементы.СервисДоступен);
			Если ДоступностьКлассификатора.Отказ Тогда
				ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС 
				+ ДоступностьКлассификатора.КраткоеПредставлениеОшибки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Задание.Статус = "Ошибка" Тогда
		Элементы.ГруппаОписаниеНедоступностиСервера.ТекущаяСтраница = Элементы.СервисНедоступен;
		ТекстСообщенияСервиса = НСтр("ru = 'Автоподбор и проверка адреса недоступны:'") + Символы.ПС 
		+ Задание.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторизацияНаСайтеПоддержкиПользователейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ПроверитьДоступностьКлассификатора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоляДомовИСтроений(Знач ВыбранноеЗначение)
	
	Модифицированность = Истина;
	НеобходимоПерерисоватьПоляДомов = НаселенныйПунктДетально.Buildings.Количество() > 1;

	НаселенныйПунктДетально.ZIPcode = ВыбранноеЗначение.Индекс;
	НаселенныйПунктДетально.OKTMO   = ВыбранноеЗначение.ОКТМО;
	
	Если ВыбранноеЗначение.Свойство("Дом") Тогда
		НаселенныйПунктДетально.HouseNumber   = ВыбранноеЗначение.Дом.НомерВладения;
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Дом.ВидВладения) Тогда
			НаселенныйПунктДетально.HouseType = ВыбранноеЗначение.Дом.ВидВладения;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПунктДетально.Buildings.Очистить();
	
	Если ВыбранноеЗначение.Свойство("Корпус") И ТипЗнч(ВыбранноеЗначение.Корпус) = Тип("Структура") Тогда
		СведенияОКорпусе = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
			ВыбранноеЗначение.Корпус.ВидКорпуса, ВыбранноеЗначение.Корпус.НомерКорпуса);
		НаселенныйПунктДетально.Buildings.Добавить(СведенияОКорпусе);
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("Строение") И ТипЗнч(ВыбранноеЗначение.Строение) = Тип("Структура") Тогда
		СведенияОКорпусе = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
			ПерваяБукваЗаглавная(ВыбранноеЗначение.Строение.ВидСтроения),
			ВыбранноеЗначение.Строение.НомерСтроения);
		НаселенныйПунктДетально.Buildings.Добавить(СведенияОКорпусе);
	КонецЕсли;
	
	// отрисовка
	
	Индекс = НаселенныйПунктДетально.ZipCode;
	ОКТМО  = НаселенныйПунктДетально.OKTMO;
	
	Дом     = НаселенныйПунктДетально.HouseNumber;
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseType) Тогда
		ТипДома = НаселенныйПунктДетально.HouseType;
	КонецЕсли;
	
	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		Строение       = НаселенныйПунктДетально.Buildings[0].Number;
		ТипСтроения    = НаселенныйПунктДетально.Buildings[0].Type;
		Если НаселенныйПунктДетально.Buildings.Количество() > 1 Тогда
			НеобходимоПерерисоватьПоляДомов = Истина;
		КонецЕсли;
	Иначе
		Строение       = "";
	КонецЕсли;
	
	Если НеобходимоПерерисоватьПоляДомов Тогда
		ПодключитьОбработчикОжидания("ОтобразитьДополнительныеЗданияКлиент", 0.1, Истина);
	Иначе
		ОбновитьПредставлениеАдреса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПерваяБукваЗаглавная(Строка)
	Возврат ВРег(Лев(Строка, 1)) + Сред(НРег(Строка), 2); // Использовать ТРег нельзя.
КонецФункции

&НаКлиенте
Процедура ОтобразитьДополнительныеЗданияКлиент()
	ИмяТекущего = ОтобразитьДополнительныеЗдания();
	
	ОбновитьМенюДобавленияСтроенийИПомещений();
	
	Если ИмяТекущего <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ИмяТекущего];
	КонецЕсли;
	
	ОбновитьПредставлениеАдреса();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредопределенныеВариантыАдреса(Параметры)
	
	Если Параметры.Свойство("Индекс") Тогда
		Индекс = Параметры.Индекс;
	КонецЕсли;
	
	// Возможные варианты дома, строения, квартиры.
	ВариантыДанныхДом = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхДом();
	УстановитьСписокВыбораЭлемента(Элементы.ТипДома, Элементы.Дом, ВариантыДанныхДом);
	
	ВариантыДанныхСтроение = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхСтроение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипСтроения, Элементы.Строение, ВариантыДанныхСтроение);
	
	ВариантыДанныхПомещение = Обработки.РасширенныйВводКонтактнойИнформации.ВариантыДанныхПомещение();
	УстановитьСписокВыбораЭлемента(Элементы.ТипПомещения, Элементы.Помещение, ВариантыДанныхПомещение);
	Элементы.ТипПомещения.СписокВыбора.НайтиПоЗначению("").Значение = НаименованиеПриДобавлениеПроизвольногоПомещения();
	
	// Возможно пустые значения, чтобы не смущали.
	Если ПустаяСтрока(Дом) И ПустаяСтрока(ТипДома) Тогда
		ТипДома = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипДома);
	КонецЕсли;
	Если ПустаяСтрока(Строение) И ПустаяСтрока(ТипСтроения) Тогда
		ТипСтроения = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипСтроения);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипПомещения")
		И ВариантыДанныхПомещение.ВариантыТипа.Найти(Параметры.ТипПомещения) <> Неопределено Тогда
			ТипПомещения = Параметры.ТипПомещения;
	КонецЕсли;

	Если ПустаяСтрока(Помещение) И ПустаяСтрока(ТипПомещения) Тогда
		ТипПомещения = УправлениеКонтактнойИнформациейКлиентСервер.ПервыйИлиПустой(Элементы.ТипПомещения);
	КонецЕсли;
	
	Для каждого ВариантДанных Из ВариантыДанныхСтроение.ВариантыТипа Цикл
		ДобавитьОписаниеСтроенияИлиПомещения(ВариантДанных,   "Строение");
	КонецЦикла;
	
	Для каждого ВариантДанных Из ВариантыДанныхПомещение.ВариантыТипа Цикл
		
		Если ПустаяСтрока(ВариантДанных) Тогда
			ВариантДанных = НаименованиеПриДобавлениеПроизвольногоПомещения();
		КонецЕсли;
		
		ДобавитьОписаниеСтроенияИлиПомещения(ВариантДанных,   "Помещение", СтрЗаменить(ВариантДанных, "/", ""));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОРегионе(НаименованиеСубъектаРФ)
	
	МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
	СведенияОРегионе = МодульАдресныйКлассификаторСлужебный.СведенияОРегионе(НаименованиеСубъектаРФ);
	
	Возврат СведенияОРегионе;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьДоступностьКлассификатораВФоне(Знач УникальныйИдентификатор)
	ИмяМетода = "Обработки.РасширенныйВводКонтактнойИнформации.ПроверитьДоступностьКлассификатора";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка доступности сервиса адресного классификатора'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, Новый Структура, НастройкиЗапуска);
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьАдресПоИдентификатору(СведенияОбАдреса)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокРеквизитовНаселенныйПункт(СведенияОбАдреса);
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораНаселенногоПункта(Текст)
	
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораНаселенногоПункта(Текст);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьСписокДомов(Идентификатор)

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		ЕстьСписокДомов = МодульАдресныйКлассификаторСлужебный.ЕстьСписокДомов(Идентификатор);
		Возврат ЕстьСписокДомов;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораУлицы(Текст, ПараметрыАвтоподбора)
	
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораУлицы(Текст, ПараметрыАвтоподбора);
	
КонецФункции

&НаСервереБезКонтекста
Функция СписокАвтоподбораВариантовДомов(Идентификатор, Текст)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокАвтоподбораНомераДомов(Идентификатор, Текст);
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервереХранитьИсториюИзменений()
	
	Если ВидКонтактнойИнформации.ХранитьИсториюИзменений Тогда
		Если Параметры.Свойство("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов") Тогда
			Для каждого СтрокаКИ Из Параметры.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				НоваяСтрока = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКИ);
			КонецЦикла;
		Иначе
			Элементы.ИсторияИзменений.Видимость           = Ложь;
		КонецЕсли;
		Элементы.ИсторияИзмененийГиперссылка.Видимость = НЕ Параметры.Свойство("ИзФормыИстории");
		ВводНовогоАдреса = ?(Параметры.Свойство("ВводНовогоАдреса"), Параметры.ВводНовогоАдреса, Ложь);
		Если ВводНовогоАдреса Тогда
			ДействуетС = Параметры.ДействуетС;
		Иначе
			ДействуетС = ?(ЗначениеЗаполнено(Параметры.ДействуетС), Параметры.ДействуетС, ТекущаяДатаСеанса());
		КонецЕсли;
		ОтобразитьИнформациюОДатахДействияАдреса(ДействуетС);
	Иначе
		Элементы.ИсторияИзменений.Видимость           = Ложь;
		Элементы.ГруппаИсторическийАдрес.Видимость    = Ложь;
	КонецЕсли;

КонецПроцедуры

// Предлагает загрузить адресный классификатор.
//
//  Параметры:
//      Текст  - Строка        - Дополнительный текст предложения.
//      Регион - Число, Строка - Код или название региона для загрузки.
//
&НаКлиенте
Процедура ПредложениеЗагрузкиКлассификатора(Знач Текст = "", Знач Регион = Неопределено)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Возврат;
	КонецЕсли;
	
	НеЗагружатьАдресныйКлассификатор = ПараметрыПриложения.Получить("АдресныйКлассификатор.НеЗагружатьКлассификатор");
	Если НеЗагружатьАдресныйКлассификатор = Неопределено ИЛИ НеЗагружатьАдресныйКлассификатор = Ложь Тогда
		ТипПараметраРегиона = ТипЗнч(Регион);
		ПараметрыФормы = Новый Структура;
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыФормы.Вставить("ТекстПредупреждения", Текст);
		
		Если ТипПараметраРегиона = Тип("Число") Тогда
			ПараметрыЗагрузки.Вставить("КодРегионаДляЗагрузки", Регион);
			
		ИначеЕсли ТипПараметраРегиона = Тип("Строка") Тогда
			ПараметрыЗагрузки.Вставить("НазваниеРегиона", Регион);
			ПараметрыФормы.Вставить("НазваниеРегиона", Регион);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПредложениеЗагрузкиКлассификатораЗавершение", ЭтотОбъект, ПараметрыЗагрузки);
		ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ЗагрузкаАдресногоКлассификатора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложениеЗагрузкиКлассификатораЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
КонецПроцедуры

// Загружает адресный классификатор.
//
&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Знач ДополнительныеПараметры = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АдресныйКлассификаторКлиент");
		МодульАдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Страны ЕАЭС поддерживающие структурированный ввод.
// 
&НаСервереБезКонтекста
Функция ЭтоСтранаУчастникЕАЭС(Страна)
	Возврат УправлениеКонтактнойИнформацией.ЭтоСтранаУчастникЕАЭС(Страна);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеПриДобавлениеПроизвольногоПомещения()
	Возврат НСтр("ru='Другое'");
КонецФункции

&НаСервере
Функция ОпределитьЗначениеАдреса(Параметры)
	
	Если Параметры.Свойство("Значение") Тогда
		Если ПустаяСтрока(Параметры.Значение) И ЗначениеЗаполнено(Параметры.ЗначенияПолей) Тогда
			ЗначенияПолей = Параметры.ЗначенияПолей;
		Иначе
			ЗначенияПолей = Параметры.Значение;
		КонецЕсли;
	Иначе
		ЗначенияПолей = Параметры.ЗначенияПолей;
	КонецЕсли;
	Возврат ЗначенияПолей;

КонецФункции

&НаСервере
Функция ИзвлечьСтарыйФорматАдреса(Знач ЗначенияПолей, Знач ТипКонтактнойИнформации)
	
	Перем XDTOКонтактная, РезультатыЧтения;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей)
		И ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии.
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление   = Параметры.Представление;
			XDTOКонтактная.Состав.Страна   = Строка(ОсновнаяСтрана);
		КонецЕсли;
	Иначе
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(ЗначенияПолей, Параметры.Представление, );
		Если Параметры.Свойство("Страна") И ЗначениеЗаполнено(Параметры.Страна) Тогда
			Если ТипЗнч(Параметры.Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
				XDTOКонтактная.Состав.Страна = Параметры.Страна.Наименование;
			Иначе
				XDTOКонтактная.Состав.Страна = Строка(Параметры.Страна);
			КонецЕсли;
		Иначе
			XDTOКонтактная.Состав.Страна = ОсновнаяСтрана.Наименование;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Комментарий <> Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации.
		XDTOКонтактная.Комментарий = Параметры.Комментарий;
	КонецЕсли;
	Возврат XDTOКонтактная;

КонецФункции

&НаСервере
Процедура СформироватьМенюДобавленияСтроенийИПомещений()
	
	Для каждого СтроениеИлиПомещение Из ДополнительныеСтроенияИПомещения Цикл
		
		Если ЗначениеЗаполнено(СтроениеИлиПомещение.Ключ) Тогда
			ИмяКоманды                        = "Добавить_" + СтроениеИлиПомещение.Ключ;
			Команда                           = Команды.Добавить(ИмяКоманды);
			Команда.Подсказка                 = НСтр("ru = 'Добавить'") + " " + НРег(СтроениеИлиПомещение.Значение);
			Команда.Действие                  = "Подключаемый_ДобавитьСтроениеИлиПомещение";
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
			Группа = ?(СтроениеИлиПомещение.Тип = "Строение", Элементы.ГруппаДобавлениеСтроения, Элементы.ГруппаДобавлениеПомещения);
			Кнопка            = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Группа);
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.Заголовок  = СтроениеИлиПомещение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОписаниеСтроенияИлиПомещения(ИмяПомещенияИлиСтроения, Тип, Ключ = "")
	
	ОписаниеПомещения               = ДополнительныеСтроенияИПомещения.Добавить();
	ОписаниеПомещения.Значение      = ИмяПомещенияИлиСтроения;
	ОписаниеПомещения.Тип           = Тип;
	ОписаниеПомещения.Видимость     = Истина;
	ОписаниеПомещения.Ключ          = ?(ПустаяСтрока(Ключ), ИмяПомещенияИлиСтроения, Ключ);
	ОписаниеПомещения.ПредыдущиеЗначение = ИмяПомещенияИлиСтроения;
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеСтроенияИлиПомещения(Тип, Значение)
	Возврат Новый Структура("Type, Number", Тип, Значение);
КонецФункции

&НаКлиенте
Процедура ИндексНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СтрДлина(Индекс) = 6 Тогда
		ФормаВыбораУлицПоИндексу(Индекс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	
	РаботаСАдресамиКлиентСервер.ОбновитьПредставлениеАдреса(НаселенныйПунктДетально, ВидКонтактнойИнформации.ВключатьСтрануВПредставление);
	ПредставлениеАдреса = НаселенныйПунктДетально.Value;
	
	ПоказатьПодсказкуПоТипАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодсказкуПоТипАдреса()
	
	Если РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(НаселенныйПунктДетально.AddressType) Тогда
		Элементы.СтраницаТипАдреса.ТекущаяСтраница = Элементы.СтраницаМуниципальныйАдрес;
	ИначеЕсли РаботаСАдресамиКлиентСервер.ЭтоАдминистративноТерриториальныйАдрес(НаселенныйПунктДетально.AddressType) Тогда
		Элементы.СтраницаТипАдреса.ТекущаяСтраница = Элементы.СтраницаАдминистративноТерриториальныйАдрес;
	Иначе
		Элементы.СтраницаТипАдреса.ТекущаяСтраница = Элементы.СтраницаДругойАдрес;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияАдреса()
	
	НаселенныйПункт = РаботаСАдресамиКлиентСервер.ПредставлениеНаселенногоПунктаАдреса(НаселенныйПунктДетально);
	
	Улица = ?(ПустаяСтрока(НаселенныйПунктДетально.Street), "",
		НаселенныйПунктДетально.Street + " " + НаселенныйПунктДетально.StreetType);
	
	ОбновитьПредставлениеАдреса();
	
	ФорматАдреса = НаселенныйПунктДетально.AddressType;
	Индекс       = НаселенныйПунктДетально.ZIPCode;
	ОКТМО        = НаселенныйПунктДетально.OKTMO;
	
	Если ЗначениеЗаполнено(НаселенныйПунктДетально.HouseType) Тогда
		ТипДома = НаселенныйПунктДетально.HouseType;
	КонецЕсли;
	Дом = НаселенныйПунктДетально.HouseNumber;
	
	Если НаселенныйПунктДетально.Buildings.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НаселенныйПунктДетально.Buildings[0].Type) Тогда
			ТипСтроения = НаселенныйПунктДетально.Buildings[0].Type;
		КонецЕсли;
		
		Строение = НаселенныйПунктДетально.Buildings[0].Number;
		Если НаселенныйПунктДетально.Buildings.Количество() > 1 Тогда
			// 
		КонецЕсли;
	Иначе
		Строение = "";
	КонецЕсли;
	
	Если НаселенныйПунктДетально.Apartments.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НаселенныйПунктДетально.Apartments[0].Type) Тогда
			ТипПомещения = НаселенныйПунктДетально.Apartments[0].Type;
		КонецЕсли;
		
		Помещение    = НаселенныйПунктДетально.Apartments[0].Number;
		Если НаселенныйПунктДетально.Apartments.Количество() > 1 Тогда
			// 
		КонецЕсли;
		
	Иначе
		Помещение = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиВМенюПоТипуАдреса()
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
		Элементы.АдресВСвободнойФорме.Пометка                  = Истина;
		Элементы.МуниципальноеДеление.Пометка                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	ИначеЕсли РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(НаселенныйПунктДетально.AddressType) Тогда
		Элементы.АдресВСвободнойФорме.Пометка = Ложь;
		Элементы.МуниципальноеДеление.Пометка = Истина;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	ИначеЕсли РаботаСАдресамиКлиентСервер.ЭтоАдминистративноТерриториальныйАдрес(НаселенныйПунктДетально.AddressType) Тогда
		Элементы.АдресВСвободнойФорме.Пометка = Ложь;
		Элементы.МуниципальноеДеление.Пометка = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Истина;
	Иначе
		Элементы.МуниципальноеДеление.Пометка                  = Ложь;
		Элементы.АдминистративноТерриториальноеДеление.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИдентификаторыАдреса()
	Для каждого ЭлементАдреса Из НаселенныйПунктДетально Цикл
		Если СтрЗаканчиваетсяНа(ЭлементАдреса.Ключ, "ID") Тогда
			НаселенныйПунктДетально[ЭлементАдреса.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИдентификаторыАдреса(Адрес)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Адрес);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти